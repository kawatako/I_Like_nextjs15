
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Tag
 * 
 */
export type Tag = $Result.DefaultSelection<Prisma.$TagPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model RankingList
 * 
 */
export type RankingList = $Result.DefaultSelection<Prisma.$RankingListPayload>
/**
 * Model RankedItem
 * 
 */
export type RankedItem = $Result.DefaultSelection<Prisma.$RankedItemPayload>
/**
 * Model RankingListTag
 * 
 */
export type RankingListTag = $Result.DefaultSelection<Prisma.$RankingListTagPayload>
/**
 * Model RankingListComment
 * 
 */
export type RankingListComment = $Result.DefaultSelection<Prisma.$RankingListCommentPayload>
/**
 * Model TrendingSubject
 * 
 */
export type TrendingSubject = $Result.DefaultSelection<Prisma.$TrendingSubjectPayload>
/**
 * Model TrendingTag
 * 
 */
export type TrendingTag = $Result.DefaultSelection<Prisma.$TrendingTagPayload>
/**
 * Model TrendingItem
 * 
 */
export type TrendingItem = $Result.DefaultSelection<Prisma.$TrendingItemPayload>
/**
 * Model AverageItemRank
 * 
 */
export type AverageItemRank = $Result.DefaultSelection<Prisma.$AverageItemRankPayload>
/**
 * Model AverageItemComment
 * 
 */
export type AverageItemComment = $Result.DefaultSelection<Prisma.$AverageItemCommentPayload>
/**
 * Model Post
 * 
 */
export type Post = $Result.DefaultSelection<Prisma.$PostPayload>
/**
 * Model Retweet
 * 
 */
export type Retweet = $Result.DefaultSelection<Prisma.$RetweetPayload>
/**
 * Model FeedItem
 * 
 */
export type FeedItem = $Result.DefaultSelection<Prisma.$FeedItemPayload>
/**
 * Model Like
 * 
 */
export type Like = $Result.DefaultSelection<Prisma.$LikePayload>
/**
 * Model Reply
 * 
 */
export type Reply = $Result.DefaultSelection<Prisma.$ReplyPayload>
/**
 * Model FollowRequest
 * 
 */
export type FollowRequest = $Result.DefaultSelection<Prisma.$FollowRequestPayload>
/**
 * Model Follow
 * 
 */
export type Follow = $Result.DefaultSelection<Prisma.$FollowPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const ListStatus: {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED'
};

export type ListStatus = (typeof ListStatus)[keyof typeof ListStatus]


export const FollowRequestStatus: {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED'
};

export type FollowRequestStatus = (typeof FollowRequestStatus)[keyof typeof FollowRequestStatus]


export const FeedType: {
  POST: 'POST',
  RANKING_UPDATE: 'RANKING_UPDATE',
  RETWEET: 'RETWEET',
  QUOTE_RETWEET: 'QUOTE_RETWEET'
};

export type FeedType = (typeof FeedType)[keyof typeof FeedType]


export const TrendPeriod: {
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY'
};

export type TrendPeriod = (typeof TrendPeriod)[keyof typeof TrendPeriod]

}

export type ListStatus = $Enums.ListStatus

export const ListStatus: typeof $Enums.ListStatus

export type FollowRequestStatus = $Enums.FollowRequestStatus

export const FollowRequestStatus: typeof $Enums.FollowRequestStatus

export type FeedType = $Enums.FeedType

export const FeedType: typeof $Enums.FeedType

export type TrendPeriod = $Enums.TrendPeriod

export const TrendPeriod: typeof $Enums.TrendPeriod

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Tags
 * const tags = await prisma.tag.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Tags
   * const tags = await prisma.tag.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.tag`: Exposes CRUD operations for the **Tag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tag.findMany()
    * ```
    */
  get tag(): Prisma.TagDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.rankingList`: Exposes CRUD operations for the **RankingList** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RankingLists
    * const rankingLists = await prisma.rankingList.findMany()
    * ```
    */
  get rankingList(): Prisma.RankingListDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.rankedItem`: Exposes CRUD operations for the **RankedItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RankedItems
    * const rankedItems = await prisma.rankedItem.findMany()
    * ```
    */
  get rankedItem(): Prisma.RankedItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.rankingListTag`: Exposes CRUD operations for the **RankingListTag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RankingListTags
    * const rankingListTags = await prisma.rankingListTag.findMany()
    * ```
    */
  get rankingListTag(): Prisma.RankingListTagDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.rankingListComment`: Exposes CRUD operations for the **RankingListComment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RankingListComments
    * const rankingListComments = await prisma.rankingListComment.findMany()
    * ```
    */
  get rankingListComment(): Prisma.RankingListCommentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.trendingSubject`: Exposes CRUD operations for the **TrendingSubject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TrendingSubjects
    * const trendingSubjects = await prisma.trendingSubject.findMany()
    * ```
    */
  get trendingSubject(): Prisma.TrendingSubjectDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.trendingTag`: Exposes CRUD operations for the **TrendingTag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TrendingTags
    * const trendingTags = await prisma.trendingTag.findMany()
    * ```
    */
  get trendingTag(): Prisma.TrendingTagDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.trendingItem`: Exposes CRUD operations for the **TrendingItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TrendingItems
    * const trendingItems = await prisma.trendingItem.findMany()
    * ```
    */
  get trendingItem(): Prisma.TrendingItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.averageItemRank`: Exposes CRUD operations for the **AverageItemRank** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AverageItemRanks
    * const averageItemRanks = await prisma.averageItemRank.findMany()
    * ```
    */
  get averageItemRank(): Prisma.AverageItemRankDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.averageItemComment`: Exposes CRUD operations for the **AverageItemComment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AverageItemComments
    * const averageItemComments = await prisma.averageItemComment.findMany()
    * ```
    */
  get averageItemComment(): Prisma.AverageItemCommentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.post`: Exposes CRUD operations for the **Post** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Posts
    * const posts = await prisma.post.findMany()
    * ```
    */
  get post(): Prisma.PostDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.retweet`: Exposes CRUD operations for the **Retweet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Retweets
    * const retweets = await prisma.retweet.findMany()
    * ```
    */
  get retweet(): Prisma.RetweetDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.feedItem`: Exposes CRUD operations for the **FeedItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FeedItems
    * const feedItems = await prisma.feedItem.findMany()
    * ```
    */
  get feedItem(): Prisma.FeedItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.like`: Exposes CRUD operations for the **Like** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Likes
    * const likes = await prisma.like.findMany()
    * ```
    */
  get like(): Prisma.LikeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reply`: Exposes CRUD operations for the **Reply** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Replies
    * const replies = await prisma.reply.findMany()
    * ```
    */
  get reply(): Prisma.ReplyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.followRequest`: Exposes CRUD operations for the **FollowRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FollowRequests
    * const followRequests = await prisma.followRequest.findMany()
    * ```
    */
  get followRequest(): Prisma.FollowRequestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.follow`: Exposes CRUD operations for the **Follow** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Follows
    * const follows = await prisma.follow.findMany()
    * ```
    */
  get follow(): Prisma.FollowDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Tag: 'Tag',
    User: 'User',
    RankingList: 'RankingList',
    RankedItem: 'RankedItem',
    RankingListTag: 'RankingListTag',
    RankingListComment: 'RankingListComment',
    TrendingSubject: 'TrendingSubject',
    TrendingTag: 'TrendingTag',
    TrendingItem: 'TrendingItem',
    AverageItemRank: 'AverageItemRank',
    AverageItemComment: 'AverageItemComment',
    Post: 'Post',
    Retweet: 'Retweet',
    FeedItem: 'FeedItem',
    Like: 'Like',
    Reply: 'Reply',
    FollowRequest: 'FollowRequest',
    Follow: 'Follow'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "tag" | "user" | "rankingList" | "rankedItem" | "rankingListTag" | "rankingListComment" | "trendingSubject" | "trendingTag" | "trendingItem" | "averageItemRank" | "averageItemComment" | "post" | "retweet" | "feedItem" | "like" | "reply" | "followRequest" | "follow"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Tag: {
        payload: Prisma.$TagPayload<ExtArgs>
        fields: Prisma.TagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findFirst: {
            args: Prisma.TagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findMany: {
            args: Prisma.TagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          create: {
            args: Prisma.TagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          createMany: {
            args: Prisma.TagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          delete: {
            args: Prisma.TagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          update: {
            args: Prisma.TagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          deleteMany: {
            args: Prisma.TagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TagUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          upsert: {
            args: Prisma.TagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          aggregate: {
            args: Prisma.TagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTag>
          }
          groupBy: {
            args: Prisma.TagGroupByArgs<ExtArgs>
            result: $Utils.Optional<TagGroupByOutputType>[]
          }
          count: {
            args: Prisma.TagCountArgs<ExtArgs>
            result: $Utils.Optional<TagCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      RankingList: {
        payload: Prisma.$RankingListPayload<ExtArgs>
        fields: Prisma.RankingListFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RankingListFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingListPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RankingListFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingListPayload>
          }
          findFirst: {
            args: Prisma.RankingListFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingListPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RankingListFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingListPayload>
          }
          findMany: {
            args: Prisma.RankingListFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingListPayload>[]
          }
          create: {
            args: Prisma.RankingListCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingListPayload>
          }
          createMany: {
            args: Prisma.RankingListCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RankingListCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingListPayload>[]
          }
          delete: {
            args: Prisma.RankingListDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingListPayload>
          }
          update: {
            args: Prisma.RankingListUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingListPayload>
          }
          deleteMany: {
            args: Prisma.RankingListDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RankingListUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RankingListUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingListPayload>[]
          }
          upsert: {
            args: Prisma.RankingListUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingListPayload>
          }
          aggregate: {
            args: Prisma.RankingListAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRankingList>
          }
          groupBy: {
            args: Prisma.RankingListGroupByArgs<ExtArgs>
            result: $Utils.Optional<RankingListGroupByOutputType>[]
          }
          count: {
            args: Prisma.RankingListCountArgs<ExtArgs>
            result: $Utils.Optional<RankingListCountAggregateOutputType> | number
          }
        }
      }
      RankedItem: {
        payload: Prisma.$RankedItemPayload<ExtArgs>
        fields: Prisma.RankedItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RankedItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankedItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RankedItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankedItemPayload>
          }
          findFirst: {
            args: Prisma.RankedItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankedItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RankedItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankedItemPayload>
          }
          findMany: {
            args: Prisma.RankedItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankedItemPayload>[]
          }
          create: {
            args: Prisma.RankedItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankedItemPayload>
          }
          createMany: {
            args: Prisma.RankedItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RankedItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankedItemPayload>[]
          }
          delete: {
            args: Prisma.RankedItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankedItemPayload>
          }
          update: {
            args: Prisma.RankedItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankedItemPayload>
          }
          deleteMany: {
            args: Prisma.RankedItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RankedItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RankedItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankedItemPayload>[]
          }
          upsert: {
            args: Prisma.RankedItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankedItemPayload>
          }
          aggregate: {
            args: Prisma.RankedItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRankedItem>
          }
          groupBy: {
            args: Prisma.RankedItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<RankedItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.RankedItemCountArgs<ExtArgs>
            result: $Utils.Optional<RankedItemCountAggregateOutputType> | number
          }
        }
      }
      RankingListTag: {
        payload: Prisma.$RankingListTagPayload<ExtArgs>
        fields: Prisma.RankingListTagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RankingListTagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingListTagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RankingListTagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingListTagPayload>
          }
          findFirst: {
            args: Prisma.RankingListTagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingListTagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RankingListTagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingListTagPayload>
          }
          findMany: {
            args: Prisma.RankingListTagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingListTagPayload>[]
          }
          create: {
            args: Prisma.RankingListTagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingListTagPayload>
          }
          createMany: {
            args: Prisma.RankingListTagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RankingListTagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingListTagPayload>[]
          }
          delete: {
            args: Prisma.RankingListTagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingListTagPayload>
          }
          update: {
            args: Prisma.RankingListTagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingListTagPayload>
          }
          deleteMany: {
            args: Prisma.RankingListTagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RankingListTagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RankingListTagUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingListTagPayload>[]
          }
          upsert: {
            args: Prisma.RankingListTagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingListTagPayload>
          }
          aggregate: {
            args: Prisma.RankingListTagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRankingListTag>
          }
          groupBy: {
            args: Prisma.RankingListTagGroupByArgs<ExtArgs>
            result: $Utils.Optional<RankingListTagGroupByOutputType>[]
          }
          count: {
            args: Prisma.RankingListTagCountArgs<ExtArgs>
            result: $Utils.Optional<RankingListTagCountAggregateOutputType> | number
          }
        }
      }
      RankingListComment: {
        payload: Prisma.$RankingListCommentPayload<ExtArgs>
        fields: Prisma.RankingListCommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RankingListCommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingListCommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RankingListCommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingListCommentPayload>
          }
          findFirst: {
            args: Prisma.RankingListCommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingListCommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RankingListCommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingListCommentPayload>
          }
          findMany: {
            args: Prisma.RankingListCommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingListCommentPayload>[]
          }
          create: {
            args: Prisma.RankingListCommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingListCommentPayload>
          }
          createMany: {
            args: Prisma.RankingListCommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RankingListCommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingListCommentPayload>[]
          }
          delete: {
            args: Prisma.RankingListCommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingListCommentPayload>
          }
          update: {
            args: Prisma.RankingListCommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingListCommentPayload>
          }
          deleteMany: {
            args: Prisma.RankingListCommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RankingListCommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RankingListCommentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingListCommentPayload>[]
          }
          upsert: {
            args: Prisma.RankingListCommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingListCommentPayload>
          }
          aggregate: {
            args: Prisma.RankingListCommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRankingListComment>
          }
          groupBy: {
            args: Prisma.RankingListCommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<RankingListCommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.RankingListCommentCountArgs<ExtArgs>
            result: $Utils.Optional<RankingListCommentCountAggregateOutputType> | number
          }
        }
      }
      TrendingSubject: {
        payload: Prisma.$TrendingSubjectPayload<ExtArgs>
        fields: Prisma.TrendingSubjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TrendingSubjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingSubjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TrendingSubjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingSubjectPayload>
          }
          findFirst: {
            args: Prisma.TrendingSubjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingSubjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TrendingSubjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingSubjectPayload>
          }
          findMany: {
            args: Prisma.TrendingSubjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingSubjectPayload>[]
          }
          create: {
            args: Prisma.TrendingSubjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingSubjectPayload>
          }
          createMany: {
            args: Prisma.TrendingSubjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TrendingSubjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingSubjectPayload>[]
          }
          delete: {
            args: Prisma.TrendingSubjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingSubjectPayload>
          }
          update: {
            args: Prisma.TrendingSubjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingSubjectPayload>
          }
          deleteMany: {
            args: Prisma.TrendingSubjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TrendingSubjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TrendingSubjectUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingSubjectPayload>[]
          }
          upsert: {
            args: Prisma.TrendingSubjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingSubjectPayload>
          }
          aggregate: {
            args: Prisma.TrendingSubjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTrendingSubject>
          }
          groupBy: {
            args: Prisma.TrendingSubjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<TrendingSubjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.TrendingSubjectCountArgs<ExtArgs>
            result: $Utils.Optional<TrendingSubjectCountAggregateOutputType> | number
          }
        }
      }
      TrendingTag: {
        payload: Prisma.$TrendingTagPayload<ExtArgs>
        fields: Prisma.TrendingTagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TrendingTagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingTagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TrendingTagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingTagPayload>
          }
          findFirst: {
            args: Prisma.TrendingTagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingTagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TrendingTagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingTagPayload>
          }
          findMany: {
            args: Prisma.TrendingTagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingTagPayload>[]
          }
          create: {
            args: Prisma.TrendingTagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingTagPayload>
          }
          createMany: {
            args: Prisma.TrendingTagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TrendingTagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingTagPayload>[]
          }
          delete: {
            args: Prisma.TrendingTagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingTagPayload>
          }
          update: {
            args: Prisma.TrendingTagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingTagPayload>
          }
          deleteMany: {
            args: Prisma.TrendingTagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TrendingTagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TrendingTagUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingTagPayload>[]
          }
          upsert: {
            args: Prisma.TrendingTagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingTagPayload>
          }
          aggregate: {
            args: Prisma.TrendingTagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTrendingTag>
          }
          groupBy: {
            args: Prisma.TrendingTagGroupByArgs<ExtArgs>
            result: $Utils.Optional<TrendingTagGroupByOutputType>[]
          }
          count: {
            args: Prisma.TrendingTagCountArgs<ExtArgs>
            result: $Utils.Optional<TrendingTagCountAggregateOutputType> | number
          }
        }
      }
      TrendingItem: {
        payload: Prisma.$TrendingItemPayload<ExtArgs>
        fields: Prisma.TrendingItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TrendingItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TrendingItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingItemPayload>
          }
          findFirst: {
            args: Prisma.TrendingItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TrendingItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingItemPayload>
          }
          findMany: {
            args: Prisma.TrendingItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingItemPayload>[]
          }
          create: {
            args: Prisma.TrendingItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingItemPayload>
          }
          createMany: {
            args: Prisma.TrendingItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TrendingItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingItemPayload>[]
          }
          delete: {
            args: Prisma.TrendingItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingItemPayload>
          }
          update: {
            args: Prisma.TrendingItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingItemPayload>
          }
          deleteMany: {
            args: Prisma.TrendingItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TrendingItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TrendingItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingItemPayload>[]
          }
          upsert: {
            args: Prisma.TrendingItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingItemPayload>
          }
          aggregate: {
            args: Prisma.TrendingItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTrendingItem>
          }
          groupBy: {
            args: Prisma.TrendingItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<TrendingItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.TrendingItemCountArgs<ExtArgs>
            result: $Utils.Optional<TrendingItemCountAggregateOutputType> | number
          }
        }
      }
      AverageItemRank: {
        payload: Prisma.$AverageItemRankPayload<ExtArgs>
        fields: Prisma.AverageItemRankFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AverageItemRankFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AverageItemRankPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AverageItemRankFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AverageItemRankPayload>
          }
          findFirst: {
            args: Prisma.AverageItemRankFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AverageItemRankPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AverageItemRankFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AverageItemRankPayload>
          }
          findMany: {
            args: Prisma.AverageItemRankFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AverageItemRankPayload>[]
          }
          create: {
            args: Prisma.AverageItemRankCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AverageItemRankPayload>
          }
          createMany: {
            args: Prisma.AverageItemRankCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AverageItemRankCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AverageItemRankPayload>[]
          }
          delete: {
            args: Prisma.AverageItemRankDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AverageItemRankPayload>
          }
          update: {
            args: Prisma.AverageItemRankUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AverageItemRankPayload>
          }
          deleteMany: {
            args: Prisma.AverageItemRankDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AverageItemRankUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AverageItemRankUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AverageItemRankPayload>[]
          }
          upsert: {
            args: Prisma.AverageItemRankUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AverageItemRankPayload>
          }
          aggregate: {
            args: Prisma.AverageItemRankAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAverageItemRank>
          }
          groupBy: {
            args: Prisma.AverageItemRankGroupByArgs<ExtArgs>
            result: $Utils.Optional<AverageItemRankGroupByOutputType>[]
          }
          count: {
            args: Prisma.AverageItemRankCountArgs<ExtArgs>
            result: $Utils.Optional<AverageItemRankCountAggregateOutputType> | number
          }
        }
      }
      AverageItemComment: {
        payload: Prisma.$AverageItemCommentPayload<ExtArgs>
        fields: Prisma.AverageItemCommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AverageItemCommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AverageItemCommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AverageItemCommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AverageItemCommentPayload>
          }
          findFirst: {
            args: Prisma.AverageItemCommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AverageItemCommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AverageItemCommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AverageItemCommentPayload>
          }
          findMany: {
            args: Prisma.AverageItemCommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AverageItemCommentPayload>[]
          }
          create: {
            args: Prisma.AverageItemCommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AverageItemCommentPayload>
          }
          createMany: {
            args: Prisma.AverageItemCommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AverageItemCommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AverageItemCommentPayload>[]
          }
          delete: {
            args: Prisma.AverageItemCommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AverageItemCommentPayload>
          }
          update: {
            args: Prisma.AverageItemCommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AverageItemCommentPayload>
          }
          deleteMany: {
            args: Prisma.AverageItemCommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AverageItemCommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AverageItemCommentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AverageItemCommentPayload>[]
          }
          upsert: {
            args: Prisma.AverageItemCommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AverageItemCommentPayload>
          }
          aggregate: {
            args: Prisma.AverageItemCommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAverageItemComment>
          }
          groupBy: {
            args: Prisma.AverageItemCommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AverageItemCommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AverageItemCommentCountArgs<ExtArgs>
            result: $Utils.Optional<AverageItemCommentCountAggregateOutputType> | number
          }
        }
      }
      Post: {
        payload: Prisma.$PostPayload<ExtArgs>
        fields: Prisma.PostFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          findFirst: {
            args: Prisma.PostFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          findMany: {
            args: Prisma.PostFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          create: {
            args: Prisma.PostCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          createMany: {
            args: Prisma.PostCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PostCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          delete: {
            args: Prisma.PostDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          update: {
            args: Prisma.PostUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          deleteMany: {
            args: Prisma.PostDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PostUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PostUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          upsert: {
            args: Prisma.PostUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          aggregate: {
            args: Prisma.PostAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePost>
          }
          groupBy: {
            args: Prisma.PostGroupByArgs<ExtArgs>
            result: $Utils.Optional<PostGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostCountArgs<ExtArgs>
            result: $Utils.Optional<PostCountAggregateOutputType> | number
          }
        }
      }
      Retweet: {
        payload: Prisma.$RetweetPayload<ExtArgs>
        fields: Prisma.RetweetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RetweetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RetweetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RetweetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RetweetPayload>
          }
          findFirst: {
            args: Prisma.RetweetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RetweetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RetweetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RetweetPayload>
          }
          findMany: {
            args: Prisma.RetweetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RetweetPayload>[]
          }
          create: {
            args: Prisma.RetweetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RetweetPayload>
          }
          createMany: {
            args: Prisma.RetweetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RetweetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RetweetPayload>[]
          }
          delete: {
            args: Prisma.RetweetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RetweetPayload>
          }
          update: {
            args: Prisma.RetweetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RetweetPayload>
          }
          deleteMany: {
            args: Prisma.RetweetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RetweetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RetweetUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RetweetPayload>[]
          }
          upsert: {
            args: Prisma.RetweetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RetweetPayload>
          }
          aggregate: {
            args: Prisma.RetweetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRetweet>
          }
          groupBy: {
            args: Prisma.RetweetGroupByArgs<ExtArgs>
            result: $Utils.Optional<RetweetGroupByOutputType>[]
          }
          count: {
            args: Prisma.RetweetCountArgs<ExtArgs>
            result: $Utils.Optional<RetweetCountAggregateOutputType> | number
          }
        }
      }
      FeedItem: {
        payload: Prisma.$FeedItemPayload<ExtArgs>
        fields: Prisma.FeedItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeedItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeedItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedItemPayload>
          }
          findFirst: {
            args: Prisma.FeedItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeedItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedItemPayload>
          }
          findMany: {
            args: Prisma.FeedItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedItemPayload>[]
          }
          create: {
            args: Prisma.FeedItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedItemPayload>
          }
          createMany: {
            args: Prisma.FeedItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FeedItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedItemPayload>[]
          }
          delete: {
            args: Prisma.FeedItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedItemPayload>
          }
          update: {
            args: Prisma.FeedItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedItemPayload>
          }
          deleteMany: {
            args: Prisma.FeedItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeedItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FeedItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedItemPayload>[]
          }
          upsert: {
            args: Prisma.FeedItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedItemPayload>
          }
          aggregate: {
            args: Prisma.FeedItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeedItem>
          }
          groupBy: {
            args: Prisma.FeedItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeedItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeedItemCountArgs<ExtArgs>
            result: $Utils.Optional<FeedItemCountAggregateOutputType> | number
          }
        }
      }
      Like: {
        payload: Prisma.$LikePayload<ExtArgs>
        fields: Prisma.LikeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LikeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LikeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          findFirst: {
            args: Prisma.LikeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LikeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          findMany: {
            args: Prisma.LikeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>[]
          }
          create: {
            args: Prisma.LikeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          createMany: {
            args: Prisma.LikeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LikeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>[]
          }
          delete: {
            args: Prisma.LikeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          update: {
            args: Prisma.LikeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          deleteMany: {
            args: Prisma.LikeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LikeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LikeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>[]
          }
          upsert: {
            args: Prisma.LikeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          aggregate: {
            args: Prisma.LikeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLike>
          }
          groupBy: {
            args: Prisma.LikeGroupByArgs<ExtArgs>
            result: $Utils.Optional<LikeGroupByOutputType>[]
          }
          count: {
            args: Prisma.LikeCountArgs<ExtArgs>
            result: $Utils.Optional<LikeCountAggregateOutputType> | number
          }
        }
      }
      Reply: {
        payload: Prisma.$ReplyPayload<ExtArgs>
        fields: Prisma.ReplyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReplyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReplyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReplyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReplyPayload>
          }
          findFirst: {
            args: Prisma.ReplyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReplyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReplyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReplyPayload>
          }
          findMany: {
            args: Prisma.ReplyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReplyPayload>[]
          }
          create: {
            args: Prisma.ReplyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReplyPayload>
          }
          createMany: {
            args: Prisma.ReplyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReplyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReplyPayload>[]
          }
          delete: {
            args: Prisma.ReplyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReplyPayload>
          }
          update: {
            args: Prisma.ReplyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReplyPayload>
          }
          deleteMany: {
            args: Prisma.ReplyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReplyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReplyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReplyPayload>[]
          }
          upsert: {
            args: Prisma.ReplyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReplyPayload>
          }
          aggregate: {
            args: Prisma.ReplyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReply>
          }
          groupBy: {
            args: Prisma.ReplyGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReplyGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReplyCountArgs<ExtArgs>
            result: $Utils.Optional<ReplyCountAggregateOutputType> | number
          }
        }
      }
      FollowRequest: {
        payload: Prisma.$FollowRequestPayload<ExtArgs>
        fields: Prisma.FollowRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FollowRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FollowRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowRequestPayload>
          }
          findFirst: {
            args: Prisma.FollowRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FollowRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowRequestPayload>
          }
          findMany: {
            args: Prisma.FollowRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowRequestPayload>[]
          }
          create: {
            args: Prisma.FollowRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowRequestPayload>
          }
          createMany: {
            args: Prisma.FollowRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FollowRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowRequestPayload>[]
          }
          delete: {
            args: Prisma.FollowRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowRequestPayload>
          }
          update: {
            args: Prisma.FollowRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowRequestPayload>
          }
          deleteMany: {
            args: Prisma.FollowRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FollowRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FollowRequestUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowRequestPayload>[]
          }
          upsert: {
            args: Prisma.FollowRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowRequestPayload>
          }
          aggregate: {
            args: Prisma.FollowRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFollowRequest>
          }
          groupBy: {
            args: Prisma.FollowRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<FollowRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.FollowRequestCountArgs<ExtArgs>
            result: $Utils.Optional<FollowRequestCountAggregateOutputType> | number
          }
        }
      }
      Follow: {
        payload: Prisma.$FollowPayload<ExtArgs>
        fields: Prisma.FollowFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FollowFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FollowFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>
          }
          findFirst: {
            args: Prisma.FollowFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FollowFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>
          }
          findMany: {
            args: Prisma.FollowFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>[]
          }
          create: {
            args: Prisma.FollowCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>
          }
          createMany: {
            args: Prisma.FollowCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FollowCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>[]
          }
          delete: {
            args: Prisma.FollowDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>
          }
          update: {
            args: Prisma.FollowUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>
          }
          deleteMany: {
            args: Prisma.FollowDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FollowUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FollowUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>[]
          }
          upsert: {
            args: Prisma.FollowUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>
          }
          aggregate: {
            args: Prisma.FollowAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFollow>
          }
          groupBy: {
            args: Prisma.FollowGroupByArgs<ExtArgs>
            result: $Utils.Optional<FollowGroupByOutputType>[]
          }
          count: {
            args: Prisma.FollowCountArgs<ExtArgs>
            result: $Utils.Optional<FollowCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    tag?: TagOmit
    user?: UserOmit
    rankingList?: RankingListOmit
    rankedItem?: RankedItemOmit
    rankingListTag?: RankingListTagOmit
    rankingListComment?: RankingListCommentOmit
    trendingSubject?: TrendingSubjectOmit
    trendingTag?: TrendingTagOmit
    trendingItem?: TrendingItemOmit
    averageItemRank?: AverageItemRankOmit
    averageItemComment?: AverageItemCommentOmit
    post?: PostOmit
    retweet?: RetweetOmit
    feedItem?: FeedItemOmit
    like?: LikeOmit
    reply?: ReplyOmit
    followRequest?: FollowRequestOmit
    follow?: FollowOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type TagCountOutputType
   */

  export type TagCountOutputType = {
    trendingStats: number
    rankingListTags: number
  }

  export type TagCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    trendingStats?: boolean | TagCountOutputTypeCountTrendingStatsArgs
    rankingListTags?: boolean | TagCountOutputTypeCountRankingListTagsArgs
  }

  // Custom InputTypes
  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagCountOutputType
     */
    select?: TagCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeCountTrendingStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrendingTagWhereInput
  }

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeCountRankingListTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RankingListTagWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    feedItems: number
    following: number
    followedBy: number
    receivedFollowRequests: number
    sentFollowRequests: number
    likes: number
    posts: number
    rankingLists: number
    replies: number
    retweets: number
    rankingListComments: number
    averageItemComments: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feedItems?: boolean | UserCountOutputTypeCountFeedItemsArgs
    following?: boolean | UserCountOutputTypeCountFollowingArgs
    followedBy?: boolean | UserCountOutputTypeCountFollowedByArgs
    receivedFollowRequests?: boolean | UserCountOutputTypeCountReceivedFollowRequestsArgs
    sentFollowRequests?: boolean | UserCountOutputTypeCountSentFollowRequestsArgs
    likes?: boolean | UserCountOutputTypeCountLikesArgs
    posts?: boolean | UserCountOutputTypeCountPostsArgs
    rankingLists?: boolean | UserCountOutputTypeCountRankingListsArgs
    replies?: boolean | UserCountOutputTypeCountRepliesArgs
    retweets?: boolean | UserCountOutputTypeCountRetweetsArgs
    rankingListComments?: boolean | UserCountOutputTypeCountRankingListCommentsArgs
    averageItemComments?: boolean | UserCountOutputTypeCountAverageItemCommentsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFeedItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedItemWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFollowingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FollowWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFollowedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FollowWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReceivedFollowRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FollowRequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSentFollowRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FollowRequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRankingListsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RankingListWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRepliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReplyWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRetweetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RetweetWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRankingListCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RankingListCommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAverageItemCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AverageItemCommentWhereInput
  }


  /**
   * Count Type RankingListCountOutputType
   */

  export type RankingListCountOutputType = {
    feedItems: number
    likes: number
    items: number
    rankingListTags: number
  }

  export type RankingListCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feedItems?: boolean | RankingListCountOutputTypeCountFeedItemsArgs
    likes?: boolean | RankingListCountOutputTypeCountLikesArgs
    items?: boolean | RankingListCountOutputTypeCountItemsArgs
    rankingListTags?: boolean | RankingListCountOutputTypeCountRankingListTagsArgs
  }

  // Custom InputTypes
  /**
   * RankingListCountOutputType without action
   */
  export type RankingListCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingListCountOutputType
     */
    select?: RankingListCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RankingListCountOutputType without action
   */
  export type RankingListCountOutputTypeCountFeedItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedItemWhereInput
  }

  /**
   * RankingListCountOutputType without action
   */
  export type RankingListCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeWhereInput
  }

  /**
   * RankingListCountOutputType without action
   */
  export type RankingListCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RankedItemWhereInput
  }

  /**
   * RankingListCountOutputType without action
   */
  export type RankingListCountOutputTypeCountRankingListTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RankingListTagWhereInput
  }


  /**
   * Count Type PostCountOutputType
   */

  export type PostCountOutputType = {
    feedItems: number
    likes: number
    replies: number
  }

  export type PostCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feedItems?: boolean | PostCountOutputTypeCountFeedItemsArgs
    likes?: boolean | PostCountOutputTypeCountLikesArgs
    replies?: boolean | PostCountOutputTypeCountRepliesArgs
  }

  // Custom InputTypes
  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostCountOutputType
     */
    select?: PostCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountFeedItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedItemWhereInput
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeWhereInput
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountRepliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReplyWhereInput
  }


  /**
   * Count Type FeedItemCountOutputType
   */

  export type FeedItemCountOutputType = {
    quotedByItems: number
    retweetedByItems: number
    retweets: number
  }

  export type FeedItemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quotedByItems?: boolean | FeedItemCountOutputTypeCountQuotedByItemsArgs
    retweetedByItems?: boolean | FeedItemCountOutputTypeCountRetweetedByItemsArgs
    retweets?: boolean | FeedItemCountOutputTypeCountRetweetsArgs
  }

  // Custom InputTypes
  /**
   * FeedItemCountOutputType without action
   */
  export type FeedItemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedItemCountOutputType
     */
    select?: FeedItemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FeedItemCountOutputType without action
   */
  export type FeedItemCountOutputTypeCountQuotedByItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedItemWhereInput
  }

  /**
   * FeedItemCountOutputType without action
   */
  export type FeedItemCountOutputTypeCountRetweetedByItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedItemWhereInput
  }

  /**
   * FeedItemCountOutputType without action
   */
  export type FeedItemCountOutputTypeCountRetweetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RetweetWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Tag
   */

  export type AggregateTag = {
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  export type TagMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
  }

  export type TagMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
  }

  export type TagCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    _all: number
  }


  export type TagMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
  }

  export type TagMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
  }

  export type TagCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    _all?: true
  }

  export type TagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tag to aggregate.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    _count?: true | TagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagMaxAggregateInputType
  }

  export type GetTagAggregateType<T extends TagAggregateArgs> = {
        [P in keyof T & keyof AggregateTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTag[P]>
      : GetScalarType<T[P], AggregateTag[P]>
  }




  export type TagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
    orderBy?: TagOrderByWithAggregationInput | TagOrderByWithAggregationInput[]
    by: TagScalarFieldEnum[] | TagScalarFieldEnum
    having?: TagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagCountAggregateInputType | true
    _min?: TagMinAggregateInputType
    _max?: TagMaxAggregateInputType
  }

  export type TagGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  type GetTagGroupByPayload<T extends TagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagGroupByOutputType[P]>
            : GetScalarType<T[P], TagGroupByOutputType[P]>
        }
      >
    >


  export type TagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    trendingStats?: boolean | Tag$trendingStatsArgs<ExtArgs>
    rankingListTags?: boolean | Tag$rankingListTagsArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tag"]>

  export type TagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["tag"]>

  export type TagSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["tag"]>

  export type TagSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
  }

  export type TagOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "createdAt", ExtArgs["result"]["tag"]>
  export type TagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    trendingStats?: boolean | Tag$trendingStatsArgs<ExtArgs>
    rankingListTags?: boolean | Tag$rankingListTagsArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type TagIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tag"
    objects: {
      trendingStats: Prisma.$TrendingTagPayload<ExtArgs>[]
      rankingListTags: Prisma.$RankingListTagPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      createdAt: Date
    }, ExtArgs["result"]["tag"]>
    composites: {}
  }

  type TagGetPayload<S extends boolean | null | undefined | TagDefaultArgs> = $Result.GetResult<Prisma.$TagPayload, S>

  type TagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TagCountAggregateInputType | true
    }

  export interface TagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tag'], meta: { name: 'Tag' } }
    /**
     * Find zero or one Tag that matches the filter.
     * @param {TagFindUniqueArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TagFindUniqueArgs>(args: SelectSubset<T, TagFindUniqueArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tag that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TagFindUniqueOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TagFindUniqueOrThrowArgs>(args: SelectSubset<T, TagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TagFindFirstArgs>(args?: SelectSubset<T, TagFindFirstArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TagFindFirstOrThrowArgs>(args?: SelectSubset<T, TagFindFirstOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tag.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagWithIdOnly = await prisma.tag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TagFindManyArgs>(args?: SelectSubset<T, TagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tag.
     * @param {TagCreateArgs} args - Arguments to create a Tag.
     * @example
     * // Create one Tag
     * const Tag = await prisma.tag.create({
     *   data: {
     *     // ... data to create a Tag
     *   }
     * })
     * 
     */
    create<T extends TagCreateArgs>(args: SelectSubset<T, TagCreateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tags.
     * @param {TagCreateManyArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TagCreateManyArgs>(args?: SelectSubset<T, TagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tags and returns the data saved in the database.
     * @param {TagCreateManyAndReturnArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tags and only return the `id`
     * const tagWithIdOnly = await prisma.tag.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TagCreateManyAndReturnArgs>(args?: SelectSubset<T, TagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Tag.
     * @param {TagDeleteArgs} args - Arguments to delete one Tag.
     * @example
     * // Delete one Tag
     * const Tag = await prisma.tag.delete({
     *   where: {
     *     // ... filter to delete one Tag
     *   }
     * })
     * 
     */
    delete<T extends TagDeleteArgs>(args: SelectSubset<T, TagDeleteArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tag.
     * @param {TagUpdateArgs} args - Arguments to update one Tag.
     * @example
     * // Update one Tag
     * const tag = await prisma.tag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TagUpdateArgs>(args: SelectSubset<T, TagUpdateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tags.
     * @param {TagDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TagDeleteManyArgs>(args?: SelectSubset<T, TagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TagUpdateManyArgs>(args: SelectSubset<T, TagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags and returns the data updated in the database.
     * @param {TagUpdateManyAndReturnArgs} args - Arguments to update many Tags.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tags and only return the `id`
     * const tagWithIdOnly = await prisma.tag.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TagUpdateManyAndReturnArgs>(args: SelectSubset<T, TagUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Tag.
     * @param {TagUpsertArgs} args - Arguments to update or create a Tag.
     * @example
     * // Update or create a Tag
     * const tag = await prisma.tag.upsert({
     *   create: {
     *     // ... data to create a Tag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tag we want to update
     *   }
     * })
     */
    upsert<T extends TagUpsertArgs>(args: SelectSubset<T, TagUpsertArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tag.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagCountArgs>(
      args?: Subset<T, TagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagAggregateArgs>(args: Subset<T, TagAggregateArgs>): Prisma.PrismaPromise<GetTagAggregateType<T>>

    /**
     * Group by Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagGroupByArgs['orderBy'] }
        : { orderBy?: TagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tag model
   */
  readonly fields: TagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    trendingStats<T extends Tag$trendingStatsArgs<ExtArgs> = {}>(args?: Subset<T, Tag$trendingStatsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrendingTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    rankingListTags<T extends Tag$rankingListTagsArgs<ExtArgs> = {}>(args?: Subset<T, Tag$rankingListTagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RankingListTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tag model
   */
  interface TagFieldRefs {
    readonly id: FieldRef<"Tag", 'String'>
    readonly name: FieldRef<"Tag", 'String'>
    readonly createdAt: FieldRef<"Tag", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Tag findUnique
   */
  export type TagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findUniqueOrThrow
   */
  export type TagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findFirst
   */
  export type TagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findFirstOrThrow
   */
  export type TagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findMany
   */
  export type TagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tags to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag create
   */
  export type TagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to create a Tag.
     */
    data: XOR<TagCreateInput, TagUncheckedCreateInput>
  }

  /**
   * Tag createMany
   */
  export type TagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tag createManyAndReturn
   */
  export type TagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tag update
   */
  export type TagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to update a Tag.
     */
    data: XOR<TagUpdateInput, TagUncheckedUpdateInput>
    /**
     * Choose, which Tag to update.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag updateMany
   */
  export type TagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tags.
     */
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagWhereInput
    /**
     * Limit how many Tags to update.
     */
    limit?: number
  }

  /**
   * Tag updateManyAndReturn
   */
  export type TagUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * The data used to update Tags.
     */
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagWhereInput
    /**
     * Limit how many Tags to update.
     */
    limit?: number
  }

  /**
   * Tag upsert
   */
  export type TagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The filter to search for the Tag to update in case it exists.
     */
    where: TagWhereUniqueInput
    /**
     * In case the Tag found by the `where` argument doesn't exist, create a new Tag with this data.
     */
    create: XOR<TagCreateInput, TagUncheckedCreateInput>
    /**
     * In case the Tag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagUpdateInput, TagUncheckedUpdateInput>
  }

  /**
   * Tag delete
   */
  export type TagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter which Tag to delete.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag deleteMany
   */
  export type TagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tags to delete
     */
    where?: TagWhereInput
    /**
     * Limit how many Tags to delete.
     */
    limit?: number
  }

  /**
   * Tag.trendingStats
   */
  export type Tag$trendingStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingTag
     */
    select?: TrendingTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingTag
     */
    omit?: TrendingTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrendingTagInclude<ExtArgs> | null
    where?: TrendingTagWhereInput
    orderBy?: TrendingTagOrderByWithRelationInput | TrendingTagOrderByWithRelationInput[]
    cursor?: TrendingTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrendingTagScalarFieldEnum | TrendingTagScalarFieldEnum[]
  }

  /**
   * Tag.rankingListTags
   */
  export type Tag$rankingListTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingListTag
     */
    select?: RankingListTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankingListTag
     */
    omit?: RankingListTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListTagInclude<ExtArgs> | null
    where?: RankingListTagWhereInput
    orderBy?: RankingListTagOrderByWithRelationInput | RankingListTagOrderByWithRelationInput[]
    cursor?: RankingListTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RankingListTagScalarFieldEnum | RankingListTagScalarFieldEnum[]
  }

  /**
   * Tag without action
   */
  export type TagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    clerkId: string | null
    username: string | null
    name: string | null
    bio: string | null
    image: string | null
    coverImageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isPrivate: boolean | null
    birthday: Date | null
    location: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    clerkId: string | null
    username: string | null
    name: string | null
    bio: string | null
    image: string | null
    coverImageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isPrivate: boolean | null
    birthday: Date | null
    location: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    clerkId: number
    username: number
    name: number
    bio: number
    image: number
    coverImageUrl: number
    socialLinks: number
    createdAt: number
    updatedAt: number
    isPrivate: number
    birthday: number
    location: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    clerkId?: true
    username?: true
    name?: true
    bio?: true
    image?: true
    coverImageUrl?: true
    createdAt?: true
    updatedAt?: true
    isPrivate?: true
    birthday?: true
    location?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    clerkId?: true
    username?: true
    name?: true
    bio?: true
    image?: true
    coverImageUrl?: true
    createdAt?: true
    updatedAt?: true
    isPrivate?: true
    birthday?: true
    location?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    clerkId?: true
    username?: true
    name?: true
    bio?: true
    image?: true
    coverImageUrl?: true
    socialLinks?: true
    createdAt?: true
    updatedAt?: true
    isPrivate?: true
    birthday?: true
    location?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    clerkId: string
    username: string
    name: string | null
    bio: string | null
    image: string | null
    coverImageUrl: string | null
    socialLinks: JsonValue | null
    createdAt: Date
    updatedAt: Date
    isPrivate: boolean
    birthday: Date | null
    location: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clerkId?: boolean
    username?: boolean
    name?: boolean
    bio?: boolean
    image?: boolean
    coverImageUrl?: boolean
    socialLinks?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isPrivate?: boolean
    birthday?: boolean
    location?: boolean
    feedItems?: boolean | User$feedItemsArgs<ExtArgs>
    following?: boolean | User$followingArgs<ExtArgs>
    followedBy?: boolean | User$followedByArgs<ExtArgs>
    receivedFollowRequests?: boolean | User$receivedFollowRequestsArgs<ExtArgs>
    sentFollowRequests?: boolean | User$sentFollowRequestsArgs<ExtArgs>
    likes?: boolean | User$likesArgs<ExtArgs>
    posts?: boolean | User$postsArgs<ExtArgs>
    rankingLists?: boolean | User$rankingListsArgs<ExtArgs>
    replies?: boolean | User$repliesArgs<ExtArgs>
    retweets?: boolean | User$retweetsArgs<ExtArgs>
    rankingListComments?: boolean | User$rankingListCommentsArgs<ExtArgs>
    averageItemComments?: boolean | User$averageItemCommentsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clerkId?: boolean
    username?: boolean
    name?: boolean
    bio?: boolean
    image?: boolean
    coverImageUrl?: boolean
    socialLinks?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isPrivate?: boolean
    birthday?: boolean
    location?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clerkId?: boolean
    username?: boolean
    name?: boolean
    bio?: boolean
    image?: boolean
    coverImageUrl?: boolean
    socialLinks?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isPrivate?: boolean
    birthday?: boolean
    location?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    clerkId?: boolean
    username?: boolean
    name?: boolean
    bio?: boolean
    image?: boolean
    coverImageUrl?: boolean
    socialLinks?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isPrivate?: boolean
    birthday?: boolean
    location?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clerkId" | "username" | "name" | "bio" | "image" | "coverImageUrl" | "socialLinks" | "createdAt" | "updatedAt" | "isPrivate" | "birthday" | "location", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feedItems?: boolean | User$feedItemsArgs<ExtArgs>
    following?: boolean | User$followingArgs<ExtArgs>
    followedBy?: boolean | User$followedByArgs<ExtArgs>
    receivedFollowRequests?: boolean | User$receivedFollowRequestsArgs<ExtArgs>
    sentFollowRequests?: boolean | User$sentFollowRequestsArgs<ExtArgs>
    likes?: boolean | User$likesArgs<ExtArgs>
    posts?: boolean | User$postsArgs<ExtArgs>
    rankingLists?: boolean | User$rankingListsArgs<ExtArgs>
    replies?: boolean | User$repliesArgs<ExtArgs>
    retweets?: boolean | User$retweetsArgs<ExtArgs>
    rankingListComments?: boolean | User$rankingListCommentsArgs<ExtArgs>
    averageItemComments?: boolean | User$averageItemCommentsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      feedItems: Prisma.$FeedItemPayload<ExtArgs>[]
      following: Prisma.$FollowPayload<ExtArgs>[]
      followedBy: Prisma.$FollowPayload<ExtArgs>[]
      receivedFollowRequests: Prisma.$FollowRequestPayload<ExtArgs>[]
      sentFollowRequests: Prisma.$FollowRequestPayload<ExtArgs>[]
      likes: Prisma.$LikePayload<ExtArgs>[]
      posts: Prisma.$PostPayload<ExtArgs>[]
      rankingLists: Prisma.$RankingListPayload<ExtArgs>[]
      replies: Prisma.$ReplyPayload<ExtArgs>[]
      retweets: Prisma.$RetweetPayload<ExtArgs>[]
      rankingListComments: Prisma.$RankingListCommentPayload<ExtArgs>[]
      averageItemComments: Prisma.$AverageItemCommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clerkId: string
      username: string
      name: string | null
      bio: string | null
      image: string | null
      coverImageUrl: string | null
      socialLinks: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      isPrivate: boolean
      birthday: Date | null
      location: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    feedItems<T extends User$feedItemsArgs<ExtArgs> = {}>(args?: Subset<T, User$feedItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    following<T extends User$followingArgs<ExtArgs> = {}>(args?: Subset<T, User$followingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    followedBy<T extends User$followedByArgs<ExtArgs> = {}>(args?: Subset<T, User$followedByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    receivedFollowRequests<T extends User$receivedFollowRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$receivedFollowRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sentFollowRequests<T extends User$sentFollowRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$sentFollowRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    likes<T extends User$likesArgs<ExtArgs> = {}>(args?: Subset<T, User$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    posts<T extends User$postsArgs<ExtArgs> = {}>(args?: Subset<T, User$postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    rankingLists<T extends User$rankingListsArgs<ExtArgs> = {}>(args?: Subset<T, User$rankingListsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RankingListPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    replies<T extends User$repliesArgs<ExtArgs> = {}>(args?: Subset<T, User$repliesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReplyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    retweets<T extends User$retweetsArgs<ExtArgs> = {}>(args?: Subset<T, User$retweetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RetweetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    rankingListComments<T extends User$rankingListCommentsArgs<ExtArgs> = {}>(args?: Subset<T, User$rankingListCommentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RankingListCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    averageItemComments<T extends User$averageItemCommentsArgs<ExtArgs> = {}>(args?: Subset<T, User$averageItemCommentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AverageItemCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly clerkId: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly bio: FieldRef<"User", 'String'>
    readonly image: FieldRef<"User", 'String'>
    readonly coverImageUrl: FieldRef<"User", 'String'>
    readonly socialLinks: FieldRef<"User", 'Json'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly isPrivate: FieldRef<"User", 'Boolean'>
    readonly birthday: FieldRef<"User", 'DateTime'>
    readonly location: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.feedItems
   */
  export type User$feedItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedItem
     */
    select?: FeedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedItem
     */
    omit?: FeedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedItemInclude<ExtArgs> | null
    where?: FeedItemWhereInput
    orderBy?: FeedItemOrderByWithRelationInput | FeedItemOrderByWithRelationInput[]
    cursor?: FeedItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedItemScalarFieldEnum | FeedItemScalarFieldEnum[]
  }

  /**
   * User.following
   */
  export type User$followingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    where?: FollowWhereInput
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    cursor?: FollowWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[]
  }

  /**
   * User.followedBy
   */
  export type User$followedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    where?: FollowWhereInput
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    cursor?: FollowWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[]
  }

  /**
   * User.receivedFollowRequests
   */
  export type User$receivedFollowRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FollowRequest
     */
    select?: FollowRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FollowRequest
     */
    omit?: FollowRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowRequestInclude<ExtArgs> | null
    where?: FollowRequestWhereInput
    orderBy?: FollowRequestOrderByWithRelationInput | FollowRequestOrderByWithRelationInput[]
    cursor?: FollowRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FollowRequestScalarFieldEnum | FollowRequestScalarFieldEnum[]
  }

  /**
   * User.sentFollowRequests
   */
  export type User$sentFollowRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FollowRequest
     */
    select?: FollowRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FollowRequest
     */
    omit?: FollowRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowRequestInclude<ExtArgs> | null
    where?: FollowRequestWhereInput
    orderBy?: FollowRequestOrderByWithRelationInput | FollowRequestOrderByWithRelationInput[]
    cursor?: FollowRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FollowRequestScalarFieldEnum | FollowRequestScalarFieldEnum[]
  }

  /**
   * User.likes
   */
  export type User$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    where?: LikeWhereInput
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    cursor?: LikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * User.posts
   */
  export type User$postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    where?: PostWhereInput
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * User.rankingLists
   */
  export type User$rankingListsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingList
     */
    select?: RankingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankingList
     */
    omit?: RankingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListInclude<ExtArgs> | null
    where?: RankingListWhereInput
    orderBy?: RankingListOrderByWithRelationInput | RankingListOrderByWithRelationInput[]
    cursor?: RankingListWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RankingListScalarFieldEnum | RankingListScalarFieldEnum[]
  }

  /**
   * User.replies
   */
  export type User$repliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reply
     */
    omit?: ReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReplyInclude<ExtArgs> | null
    where?: ReplyWhereInput
    orderBy?: ReplyOrderByWithRelationInput | ReplyOrderByWithRelationInput[]
    cursor?: ReplyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReplyScalarFieldEnum | ReplyScalarFieldEnum[]
  }

  /**
   * User.retweets
   */
  export type User$retweetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Retweet
     */
    select?: RetweetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Retweet
     */
    omit?: RetweetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RetweetInclude<ExtArgs> | null
    where?: RetweetWhereInput
    orderBy?: RetweetOrderByWithRelationInput | RetweetOrderByWithRelationInput[]
    cursor?: RetweetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RetweetScalarFieldEnum | RetweetScalarFieldEnum[]
  }

  /**
   * User.rankingListComments
   */
  export type User$rankingListCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingListComment
     */
    select?: RankingListCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankingListComment
     */
    omit?: RankingListCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListCommentInclude<ExtArgs> | null
    where?: RankingListCommentWhereInput
    orderBy?: RankingListCommentOrderByWithRelationInput | RankingListCommentOrderByWithRelationInput[]
    cursor?: RankingListCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RankingListCommentScalarFieldEnum | RankingListCommentScalarFieldEnum[]
  }

  /**
   * User.averageItemComments
   */
  export type User$averageItemCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AverageItemComment
     */
    select?: AverageItemCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AverageItemComment
     */
    omit?: AverageItemCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AverageItemCommentInclude<ExtArgs> | null
    where?: AverageItemCommentWhereInput
    orderBy?: AverageItemCommentOrderByWithRelationInput | AverageItemCommentOrderByWithRelationInput[]
    cursor?: AverageItemCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AverageItemCommentScalarFieldEnum | AverageItemCommentScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model RankingList
   */

  export type AggregateRankingList = {
    _count: RankingListCountAggregateOutputType | null
    _avg: RankingListAvgAggregateOutputType | null
    _sum: RankingListSumAggregateOutputType | null
    _min: RankingListMinAggregateOutputType | null
    _max: RankingListMaxAggregateOutputType | null
  }

  export type RankingListAvgAggregateOutputType = {
    displayOrder: number | null
    likeCount: number | null
  }

  export type RankingListSumAggregateOutputType = {
    displayOrder: number | null
    likeCount: number | null
  }

  export type RankingListMinAggregateOutputType = {
    id: string | null
    subject: string | null
    description: string | null
    status: $Enums.ListStatus | null
    listImageUrl: string | null
    authorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    displayOrder: number | null
    likeCount: number | null
  }

  export type RankingListMaxAggregateOutputType = {
    id: string | null
    subject: string | null
    description: string | null
    status: $Enums.ListStatus | null
    listImageUrl: string | null
    authorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    displayOrder: number | null
    likeCount: number | null
  }

  export type RankingListCountAggregateOutputType = {
    id: number
    subject: number
    description: number
    status: number
    listImageUrl: number
    authorId: number
    createdAt: number
    updatedAt: number
    displayOrder: number
    likeCount: number
    _all: number
  }


  export type RankingListAvgAggregateInputType = {
    displayOrder?: true
    likeCount?: true
  }

  export type RankingListSumAggregateInputType = {
    displayOrder?: true
    likeCount?: true
  }

  export type RankingListMinAggregateInputType = {
    id?: true
    subject?: true
    description?: true
    status?: true
    listImageUrl?: true
    authorId?: true
    createdAt?: true
    updatedAt?: true
    displayOrder?: true
    likeCount?: true
  }

  export type RankingListMaxAggregateInputType = {
    id?: true
    subject?: true
    description?: true
    status?: true
    listImageUrl?: true
    authorId?: true
    createdAt?: true
    updatedAt?: true
    displayOrder?: true
    likeCount?: true
  }

  export type RankingListCountAggregateInputType = {
    id?: true
    subject?: true
    description?: true
    status?: true
    listImageUrl?: true
    authorId?: true
    createdAt?: true
    updatedAt?: true
    displayOrder?: true
    likeCount?: true
    _all?: true
  }

  export type RankingListAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RankingList to aggregate.
     */
    where?: RankingListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RankingLists to fetch.
     */
    orderBy?: RankingListOrderByWithRelationInput | RankingListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RankingListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RankingLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RankingLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RankingLists
    **/
    _count?: true | RankingListCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RankingListAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RankingListSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RankingListMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RankingListMaxAggregateInputType
  }

  export type GetRankingListAggregateType<T extends RankingListAggregateArgs> = {
        [P in keyof T & keyof AggregateRankingList]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRankingList[P]>
      : GetScalarType<T[P], AggregateRankingList[P]>
  }




  export type RankingListGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RankingListWhereInput
    orderBy?: RankingListOrderByWithAggregationInput | RankingListOrderByWithAggregationInput[]
    by: RankingListScalarFieldEnum[] | RankingListScalarFieldEnum
    having?: RankingListScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RankingListCountAggregateInputType | true
    _avg?: RankingListAvgAggregateInputType
    _sum?: RankingListSumAggregateInputType
    _min?: RankingListMinAggregateInputType
    _max?: RankingListMaxAggregateInputType
  }

  export type RankingListGroupByOutputType = {
    id: string
    subject: string
    description: string | null
    status: $Enums.ListStatus
    listImageUrl: string | null
    authorId: string
    createdAt: Date
    updatedAt: Date
    displayOrder: number | null
    likeCount: number
    _count: RankingListCountAggregateOutputType | null
    _avg: RankingListAvgAggregateOutputType | null
    _sum: RankingListSumAggregateOutputType | null
    _min: RankingListMinAggregateOutputType | null
    _max: RankingListMaxAggregateOutputType | null
  }

  type GetRankingListGroupByPayload<T extends RankingListGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RankingListGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RankingListGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RankingListGroupByOutputType[P]>
            : GetScalarType<T[P], RankingListGroupByOutputType[P]>
        }
      >
    >


  export type RankingListSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subject?: boolean
    description?: boolean
    status?: boolean
    listImageUrl?: boolean
    authorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    displayOrder?: boolean
    likeCount?: boolean
    feedItems?: boolean | RankingList$feedItemsArgs<ExtArgs>
    likes?: boolean | RankingList$likesArgs<ExtArgs>
    items?: boolean | RankingList$itemsArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
    rankingListTags?: boolean | RankingList$rankingListTagsArgs<ExtArgs>
    _count?: boolean | RankingListCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rankingList"]>

  export type RankingListSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subject?: boolean
    description?: boolean
    status?: boolean
    listImageUrl?: boolean
    authorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    displayOrder?: boolean
    likeCount?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rankingList"]>

  export type RankingListSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subject?: boolean
    description?: boolean
    status?: boolean
    listImageUrl?: boolean
    authorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    displayOrder?: boolean
    likeCount?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rankingList"]>

  export type RankingListSelectScalar = {
    id?: boolean
    subject?: boolean
    description?: boolean
    status?: boolean
    listImageUrl?: boolean
    authorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    displayOrder?: boolean
    likeCount?: boolean
  }

  export type RankingListOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "subject" | "description" | "status" | "listImageUrl" | "authorId" | "createdAt" | "updatedAt" | "displayOrder" | "likeCount", ExtArgs["result"]["rankingList"]>
  export type RankingListInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feedItems?: boolean | RankingList$feedItemsArgs<ExtArgs>
    likes?: boolean | RankingList$likesArgs<ExtArgs>
    items?: boolean | RankingList$itemsArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
    rankingListTags?: boolean | RankingList$rankingListTagsArgs<ExtArgs>
    _count?: boolean | RankingListCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RankingListIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RankingListIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $RankingListPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RankingList"
    objects: {
      feedItems: Prisma.$FeedItemPayload<ExtArgs>[]
      likes: Prisma.$LikePayload<ExtArgs>[]
      items: Prisma.$RankedItemPayload<ExtArgs>[]
      author: Prisma.$UserPayload<ExtArgs>
      rankingListTags: Prisma.$RankingListTagPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      subject: string
      description: string | null
      status: $Enums.ListStatus
      listImageUrl: string | null
      authorId: string
      createdAt: Date
      updatedAt: Date
      displayOrder: number | null
      likeCount: number
    }, ExtArgs["result"]["rankingList"]>
    composites: {}
  }

  type RankingListGetPayload<S extends boolean | null | undefined | RankingListDefaultArgs> = $Result.GetResult<Prisma.$RankingListPayload, S>

  type RankingListCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RankingListFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RankingListCountAggregateInputType | true
    }

  export interface RankingListDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RankingList'], meta: { name: 'RankingList' } }
    /**
     * Find zero or one RankingList that matches the filter.
     * @param {RankingListFindUniqueArgs} args - Arguments to find a RankingList
     * @example
     * // Get one RankingList
     * const rankingList = await prisma.rankingList.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RankingListFindUniqueArgs>(args: SelectSubset<T, RankingListFindUniqueArgs<ExtArgs>>): Prisma__RankingListClient<$Result.GetResult<Prisma.$RankingListPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RankingList that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RankingListFindUniqueOrThrowArgs} args - Arguments to find a RankingList
     * @example
     * // Get one RankingList
     * const rankingList = await prisma.rankingList.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RankingListFindUniqueOrThrowArgs>(args: SelectSubset<T, RankingListFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RankingListClient<$Result.GetResult<Prisma.$RankingListPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RankingList that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingListFindFirstArgs} args - Arguments to find a RankingList
     * @example
     * // Get one RankingList
     * const rankingList = await prisma.rankingList.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RankingListFindFirstArgs>(args?: SelectSubset<T, RankingListFindFirstArgs<ExtArgs>>): Prisma__RankingListClient<$Result.GetResult<Prisma.$RankingListPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RankingList that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingListFindFirstOrThrowArgs} args - Arguments to find a RankingList
     * @example
     * // Get one RankingList
     * const rankingList = await prisma.rankingList.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RankingListFindFirstOrThrowArgs>(args?: SelectSubset<T, RankingListFindFirstOrThrowArgs<ExtArgs>>): Prisma__RankingListClient<$Result.GetResult<Prisma.$RankingListPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RankingLists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingListFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RankingLists
     * const rankingLists = await prisma.rankingList.findMany()
     * 
     * // Get first 10 RankingLists
     * const rankingLists = await prisma.rankingList.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rankingListWithIdOnly = await prisma.rankingList.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RankingListFindManyArgs>(args?: SelectSubset<T, RankingListFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RankingListPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RankingList.
     * @param {RankingListCreateArgs} args - Arguments to create a RankingList.
     * @example
     * // Create one RankingList
     * const RankingList = await prisma.rankingList.create({
     *   data: {
     *     // ... data to create a RankingList
     *   }
     * })
     * 
     */
    create<T extends RankingListCreateArgs>(args: SelectSubset<T, RankingListCreateArgs<ExtArgs>>): Prisma__RankingListClient<$Result.GetResult<Prisma.$RankingListPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RankingLists.
     * @param {RankingListCreateManyArgs} args - Arguments to create many RankingLists.
     * @example
     * // Create many RankingLists
     * const rankingList = await prisma.rankingList.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RankingListCreateManyArgs>(args?: SelectSubset<T, RankingListCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RankingLists and returns the data saved in the database.
     * @param {RankingListCreateManyAndReturnArgs} args - Arguments to create many RankingLists.
     * @example
     * // Create many RankingLists
     * const rankingList = await prisma.rankingList.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RankingLists and only return the `id`
     * const rankingListWithIdOnly = await prisma.rankingList.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RankingListCreateManyAndReturnArgs>(args?: SelectSubset<T, RankingListCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RankingListPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RankingList.
     * @param {RankingListDeleteArgs} args - Arguments to delete one RankingList.
     * @example
     * // Delete one RankingList
     * const RankingList = await prisma.rankingList.delete({
     *   where: {
     *     // ... filter to delete one RankingList
     *   }
     * })
     * 
     */
    delete<T extends RankingListDeleteArgs>(args: SelectSubset<T, RankingListDeleteArgs<ExtArgs>>): Prisma__RankingListClient<$Result.GetResult<Prisma.$RankingListPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RankingList.
     * @param {RankingListUpdateArgs} args - Arguments to update one RankingList.
     * @example
     * // Update one RankingList
     * const rankingList = await prisma.rankingList.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RankingListUpdateArgs>(args: SelectSubset<T, RankingListUpdateArgs<ExtArgs>>): Prisma__RankingListClient<$Result.GetResult<Prisma.$RankingListPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RankingLists.
     * @param {RankingListDeleteManyArgs} args - Arguments to filter RankingLists to delete.
     * @example
     * // Delete a few RankingLists
     * const { count } = await prisma.rankingList.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RankingListDeleteManyArgs>(args?: SelectSubset<T, RankingListDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RankingLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingListUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RankingLists
     * const rankingList = await prisma.rankingList.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RankingListUpdateManyArgs>(args: SelectSubset<T, RankingListUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RankingLists and returns the data updated in the database.
     * @param {RankingListUpdateManyAndReturnArgs} args - Arguments to update many RankingLists.
     * @example
     * // Update many RankingLists
     * const rankingList = await prisma.rankingList.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RankingLists and only return the `id`
     * const rankingListWithIdOnly = await prisma.rankingList.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RankingListUpdateManyAndReturnArgs>(args: SelectSubset<T, RankingListUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RankingListPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RankingList.
     * @param {RankingListUpsertArgs} args - Arguments to update or create a RankingList.
     * @example
     * // Update or create a RankingList
     * const rankingList = await prisma.rankingList.upsert({
     *   create: {
     *     // ... data to create a RankingList
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RankingList we want to update
     *   }
     * })
     */
    upsert<T extends RankingListUpsertArgs>(args: SelectSubset<T, RankingListUpsertArgs<ExtArgs>>): Prisma__RankingListClient<$Result.GetResult<Prisma.$RankingListPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RankingLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingListCountArgs} args - Arguments to filter RankingLists to count.
     * @example
     * // Count the number of RankingLists
     * const count = await prisma.rankingList.count({
     *   where: {
     *     // ... the filter for the RankingLists we want to count
     *   }
     * })
    **/
    count<T extends RankingListCountArgs>(
      args?: Subset<T, RankingListCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RankingListCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RankingList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingListAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RankingListAggregateArgs>(args: Subset<T, RankingListAggregateArgs>): Prisma.PrismaPromise<GetRankingListAggregateType<T>>

    /**
     * Group by RankingList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingListGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RankingListGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RankingListGroupByArgs['orderBy'] }
        : { orderBy?: RankingListGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RankingListGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRankingListGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RankingList model
   */
  readonly fields: RankingListFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RankingList.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RankingListClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    feedItems<T extends RankingList$feedItemsArgs<ExtArgs> = {}>(args?: Subset<T, RankingList$feedItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    likes<T extends RankingList$likesArgs<ExtArgs> = {}>(args?: Subset<T, RankingList$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    items<T extends RankingList$itemsArgs<ExtArgs> = {}>(args?: Subset<T, RankingList$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RankedItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    rankingListTags<T extends RankingList$rankingListTagsArgs<ExtArgs> = {}>(args?: Subset<T, RankingList$rankingListTagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RankingListTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RankingList model
   */
  interface RankingListFieldRefs {
    readonly id: FieldRef<"RankingList", 'String'>
    readonly subject: FieldRef<"RankingList", 'String'>
    readonly description: FieldRef<"RankingList", 'String'>
    readonly status: FieldRef<"RankingList", 'ListStatus'>
    readonly listImageUrl: FieldRef<"RankingList", 'String'>
    readonly authorId: FieldRef<"RankingList", 'String'>
    readonly createdAt: FieldRef<"RankingList", 'DateTime'>
    readonly updatedAt: FieldRef<"RankingList", 'DateTime'>
    readonly displayOrder: FieldRef<"RankingList", 'Int'>
    readonly likeCount: FieldRef<"RankingList", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * RankingList findUnique
   */
  export type RankingListFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingList
     */
    select?: RankingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankingList
     */
    omit?: RankingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListInclude<ExtArgs> | null
    /**
     * Filter, which RankingList to fetch.
     */
    where: RankingListWhereUniqueInput
  }

  /**
   * RankingList findUniqueOrThrow
   */
  export type RankingListFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingList
     */
    select?: RankingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankingList
     */
    omit?: RankingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListInclude<ExtArgs> | null
    /**
     * Filter, which RankingList to fetch.
     */
    where: RankingListWhereUniqueInput
  }

  /**
   * RankingList findFirst
   */
  export type RankingListFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingList
     */
    select?: RankingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankingList
     */
    omit?: RankingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListInclude<ExtArgs> | null
    /**
     * Filter, which RankingList to fetch.
     */
    where?: RankingListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RankingLists to fetch.
     */
    orderBy?: RankingListOrderByWithRelationInput | RankingListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RankingLists.
     */
    cursor?: RankingListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RankingLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RankingLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RankingLists.
     */
    distinct?: RankingListScalarFieldEnum | RankingListScalarFieldEnum[]
  }

  /**
   * RankingList findFirstOrThrow
   */
  export type RankingListFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingList
     */
    select?: RankingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankingList
     */
    omit?: RankingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListInclude<ExtArgs> | null
    /**
     * Filter, which RankingList to fetch.
     */
    where?: RankingListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RankingLists to fetch.
     */
    orderBy?: RankingListOrderByWithRelationInput | RankingListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RankingLists.
     */
    cursor?: RankingListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RankingLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RankingLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RankingLists.
     */
    distinct?: RankingListScalarFieldEnum | RankingListScalarFieldEnum[]
  }

  /**
   * RankingList findMany
   */
  export type RankingListFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingList
     */
    select?: RankingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankingList
     */
    omit?: RankingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListInclude<ExtArgs> | null
    /**
     * Filter, which RankingLists to fetch.
     */
    where?: RankingListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RankingLists to fetch.
     */
    orderBy?: RankingListOrderByWithRelationInput | RankingListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RankingLists.
     */
    cursor?: RankingListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RankingLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RankingLists.
     */
    skip?: number
    distinct?: RankingListScalarFieldEnum | RankingListScalarFieldEnum[]
  }

  /**
   * RankingList create
   */
  export type RankingListCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingList
     */
    select?: RankingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankingList
     */
    omit?: RankingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListInclude<ExtArgs> | null
    /**
     * The data needed to create a RankingList.
     */
    data: XOR<RankingListCreateInput, RankingListUncheckedCreateInput>
  }

  /**
   * RankingList createMany
   */
  export type RankingListCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RankingLists.
     */
    data: RankingListCreateManyInput | RankingListCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RankingList createManyAndReturn
   */
  export type RankingListCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingList
     */
    select?: RankingListSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RankingList
     */
    omit?: RankingListOmit<ExtArgs> | null
    /**
     * The data used to create many RankingLists.
     */
    data: RankingListCreateManyInput | RankingListCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RankingList update
   */
  export type RankingListUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingList
     */
    select?: RankingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankingList
     */
    omit?: RankingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListInclude<ExtArgs> | null
    /**
     * The data needed to update a RankingList.
     */
    data: XOR<RankingListUpdateInput, RankingListUncheckedUpdateInput>
    /**
     * Choose, which RankingList to update.
     */
    where: RankingListWhereUniqueInput
  }

  /**
   * RankingList updateMany
   */
  export type RankingListUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RankingLists.
     */
    data: XOR<RankingListUpdateManyMutationInput, RankingListUncheckedUpdateManyInput>
    /**
     * Filter which RankingLists to update
     */
    where?: RankingListWhereInput
    /**
     * Limit how many RankingLists to update.
     */
    limit?: number
  }

  /**
   * RankingList updateManyAndReturn
   */
  export type RankingListUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingList
     */
    select?: RankingListSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RankingList
     */
    omit?: RankingListOmit<ExtArgs> | null
    /**
     * The data used to update RankingLists.
     */
    data: XOR<RankingListUpdateManyMutationInput, RankingListUncheckedUpdateManyInput>
    /**
     * Filter which RankingLists to update
     */
    where?: RankingListWhereInput
    /**
     * Limit how many RankingLists to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RankingList upsert
   */
  export type RankingListUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingList
     */
    select?: RankingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankingList
     */
    omit?: RankingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListInclude<ExtArgs> | null
    /**
     * The filter to search for the RankingList to update in case it exists.
     */
    where: RankingListWhereUniqueInput
    /**
     * In case the RankingList found by the `where` argument doesn't exist, create a new RankingList with this data.
     */
    create: XOR<RankingListCreateInput, RankingListUncheckedCreateInput>
    /**
     * In case the RankingList was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RankingListUpdateInput, RankingListUncheckedUpdateInput>
  }

  /**
   * RankingList delete
   */
  export type RankingListDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingList
     */
    select?: RankingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankingList
     */
    omit?: RankingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListInclude<ExtArgs> | null
    /**
     * Filter which RankingList to delete.
     */
    where: RankingListWhereUniqueInput
  }

  /**
   * RankingList deleteMany
   */
  export type RankingListDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RankingLists to delete
     */
    where?: RankingListWhereInput
    /**
     * Limit how many RankingLists to delete.
     */
    limit?: number
  }

  /**
   * RankingList.feedItems
   */
  export type RankingList$feedItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedItem
     */
    select?: FeedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedItem
     */
    omit?: FeedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedItemInclude<ExtArgs> | null
    where?: FeedItemWhereInput
    orderBy?: FeedItemOrderByWithRelationInput | FeedItemOrderByWithRelationInput[]
    cursor?: FeedItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedItemScalarFieldEnum | FeedItemScalarFieldEnum[]
  }

  /**
   * RankingList.likes
   */
  export type RankingList$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    where?: LikeWhereInput
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    cursor?: LikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * RankingList.items
   */
  export type RankingList$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankedItem
     */
    select?: RankedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankedItem
     */
    omit?: RankedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankedItemInclude<ExtArgs> | null
    where?: RankedItemWhereInput
    orderBy?: RankedItemOrderByWithRelationInput | RankedItemOrderByWithRelationInput[]
    cursor?: RankedItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RankedItemScalarFieldEnum | RankedItemScalarFieldEnum[]
  }

  /**
   * RankingList.rankingListTags
   */
  export type RankingList$rankingListTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingListTag
     */
    select?: RankingListTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankingListTag
     */
    omit?: RankingListTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListTagInclude<ExtArgs> | null
    where?: RankingListTagWhereInput
    orderBy?: RankingListTagOrderByWithRelationInput | RankingListTagOrderByWithRelationInput[]
    cursor?: RankingListTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RankingListTagScalarFieldEnum | RankingListTagScalarFieldEnum[]
  }

  /**
   * RankingList without action
   */
  export type RankingListDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingList
     */
    select?: RankingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankingList
     */
    omit?: RankingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListInclude<ExtArgs> | null
  }


  /**
   * Model RankedItem
   */

  export type AggregateRankedItem = {
    _count: RankedItemCountAggregateOutputType | null
    _avg: RankedItemAvgAggregateOutputType | null
    _sum: RankedItemSumAggregateOutputType | null
    _min: RankedItemMinAggregateOutputType | null
    _max: RankedItemMaxAggregateOutputType | null
  }

  export type RankedItemAvgAggregateOutputType = {
    rank: number | null
  }

  export type RankedItemSumAggregateOutputType = {
    rank: number | null
  }

  export type RankedItemMinAggregateOutputType = {
    id: string | null
    itemName: string | null
    rank: number | null
    imageUrl: string | null
    itemDescription: string | null
    listId: string | null
    createdAt: Date | null
  }

  export type RankedItemMaxAggregateOutputType = {
    id: string | null
    itemName: string | null
    rank: number | null
    imageUrl: string | null
    itemDescription: string | null
    listId: string | null
    createdAt: Date | null
  }

  export type RankedItemCountAggregateOutputType = {
    id: number
    itemName: number
    rank: number
    imageUrl: number
    itemDescription: number
    listId: number
    createdAt: number
    _all: number
  }


  export type RankedItemAvgAggregateInputType = {
    rank?: true
  }

  export type RankedItemSumAggregateInputType = {
    rank?: true
  }

  export type RankedItemMinAggregateInputType = {
    id?: true
    itemName?: true
    rank?: true
    imageUrl?: true
    itemDescription?: true
    listId?: true
    createdAt?: true
  }

  export type RankedItemMaxAggregateInputType = {
    id?: true
    itemName?: true
    rank?: true
    imageUrl?: true
    itemDescription?: true
    listId?: true
    createdAt?: true
  }

  export type RankedItemCountAggregateInputType = {
    id?: true
    itemName?: true
    rank?: true
    imageUrl?: true
    itemDescription?: true
    listId?: true
    createdAt?: true
    _all?: true
  }

  export type RankedItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RankedItem to aggregate.
     */
    where?: RankedItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RankedItems to fetch.
     */
    orderBy?: RankedItemOrderByWithRelationInput | RankedItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RankedItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RankedItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RankedItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RankedItems
    **/
    _count?: true | RankedItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RankedItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RankedItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RankedItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RankedItemMaxAggregateInputType
  }

  export type GetRankedItemAggregateType<T extends RankedItemAggregateArgs> = {
        [P in keyof T & keyof AggregateRankedItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRankedItem[P]>
      : GetScalarType<T[P], AggregateRankedItem[P]>
  }




  export type RankedItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RankedItemWhereInput
    orderBy?: RankedItemOrderByWithAggregationInput | RankedItemOrderByWithAggregationInput[]
    by: RankedItemScalarFieldEnum[] | RankedItemScalarFieldEnum
    having?: RankedItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RankedItemCountAggregateInputType | true
    _avg?: RankedItemAvgAggregateInputType
    _sum?: RankedItemSumAggregateInputType
    _min?: RankedItemMinAggregateInputType
    _max?: RankedItemMaxAggregateInputType
  }

  export type RankedItemGroupByOutputType = {
    id: string
    itemName: string
    rank: number
    imageUrl: string | null
    itemDescription: string | null
    listId: string
    createdAt: Date
    _count: RankedItemCountAggregateOutputType | null
    _avg: RankedItemAvgAggregateOutputType | null
    _sum: RankedItemSumAggregateOutputType | null
    _min: RankedItemMinAggregateOutputType | null
    _max: RankedItemMaxAggregateOutputType | null
  }

  type GetRankedItemGroupByPayload<T extends RankedItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RankedItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RankedItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RankedItemGroupByOutputType[P]>
            : GetScalarType<T[P], RankedItemGroupByOutputType[P]>
        }
      >
    >


  export type RankedItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemName?: boolean
    rank?: boolean
    imageUrl?: boolean
    itemDescription?: boolean
    listId?: boolean
    createdAt?: boolean
    rankingList?: boolean | RankingListDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rankedItem"]>

  export type RankedItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemName?: boolean
    rank?: boolean
    imageUrl?: boolean
    itemDescription?: boolean
    listId?: boolean
    createdAt?: boolean
    rankingList?: boolean | RankingListDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rankedItem"]>

  export type RankedItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemName?: boolean
    rank?: boolean
    imageUrl?: boolean
    itemDescription?: boolean
    listId?: boolean
    createdAt?: boolean
    rankingList?: boolean | RankingListDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rankedItem"]>

  export type RankedItemSelectScalar = {
    id?: boolean
    itemName?: boolean
    rank?: boolean
    imageUrl?: boolean
    itemDescription?: boolean
    listId?: boolean
    createdAt?: boolean
  }

  export type RankedItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "itemName" | "rank" | "imageUrl" | "itemDescription" | "listId" | "createdAt", ExtArgs["result"]["rankedItem"]>
  export type RankedItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rankingList?: boolean | RankingListDefaultArgs<ExtArgs>
  }
  export type RankedItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rankingList?: boolean | RankingListDefaultArgs<ExtArgs>
  }
  export type RankedItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rankingList?: boolean | RankingListDefaultArgs<ExtArgs>
  }

  export type $RankedItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RankedItem"
    objects: {
      rankingList: Prisma.$RankingListPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      itemName: string
      rank: number
      imageUrl: string | null
      itemDescription: string | null
      listId: string
      createdAt: Date
    }, ExtArgs["result"]["rankedItem"]>
    composites: {}
  }

  type RankedItemGetPayload<S extends boolean | null | undefined | RankedItemDefaultArgs> = $Result.GetResult<Prisma.$RankedItemPayload, S>

  type RankedItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RankedItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RankedItemCountAggregateInputType | true
    }

  export interface RankedItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RankedItem'], meta: { name: 'RankedItem' } }
    /**
     * Find zero or one RankedItem that matches the filter.
     * @param {RankedItemFindUniqueArgs} args - Arguments to find a RankedItem
     * @example
     * // Get one RankedItem
     * const rankedItem = await prisma.rankedItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RankedItemFindUniqueArgs>(args: SelectSubset<T, RankedItemFindUniqueArgs<ExtArgs>>): Prisma__RankedItemClient<$Result.GetResult<Prisma.$RankedItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RankedItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RankedItemFindUniqueOrThrowArgs} args - Arguments to find a RankedItem
     * @example
     * // Get one RankedItem
     * const rankedItem = await prisma.rankedItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RankedItemFindUniqueOrThrowArgs>(args: SelectSubset<T, RankedItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RankedItemClient<$Result.GetResult<Prisma.$RankedItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RankedItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankedItemFindFirstArgs} args - Arguments to find a RankedItem
     * @example
     * // Get one RankedItem
     * const rankedItem = await prisma.rankedItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RankedItemFindFirstArgs>(args?: SelectSubset<T, RankedItemFindFirstArgs<ExtArgs>>): Prisma__RankedItemClient<$Result.GetResult<Prisma.$RankedItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RankedItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankedItemFindFirstOrThrowArgs} args - Arguments to find a RankedItem
     * @example
     * // Get one RankedItem
     * const rankedItem = await prisma.rankedItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RankedItemFindFirstOrThrowArgs>(args?: SelectSubset<T, RankedItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__RankedItemClient<$Result.GetResult<Prisma.$RankedItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RankedItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankedItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RankedItems
     * const rankedItems = await prisma.rankedItem.findMany()
     * 
     * // Get first 10 RankedItems
     * const rankedItems = await prisma.rankedItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rankedItemWithIdOnly = await prisma.rankedItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RankedItemFindManyArgs>(args?: SelectSubset<T, RankedItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RankedItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RankedItem.
     * @param {RankedItemCreateArgs} args - Arguments to create a RankedItem.
     * @example
     * // Create one RankedItem
     * const RankedItem = await prisma.rankedItem.create({
     *   data: {
     *     // ... data to create a RankedItem
     *   }
     * })
     * 
     */
    create<T extends RankedItemCreateArgs>(args: SelectSubset<T, RankedItemCreateArgs<ExtArgs>>): Prisma__RankedItemClient<$Result.GetResult<Prisma.$RankedItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RankedItems.
     * @param {RankedItemCreateManyArgs} args - Arguments to create many RankedItems.
     * @example
     * // Create many RankedItems
     * const rankedItem = await prisma.rankedItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RankedItemCreateManyArgs>(args?: SelectSubset<T, RankedItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RankedItems and returns the data saved in the database.
     * @param {RankedItemCreateManyAndReturnArgs} args - Arguments to create many RankedItems.
     * @example
     * // Create many RankedItems
     * const rankedItem = await prisma.rankedItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RankedItems and only return the `id`
     * const rankedItemWithIdOnly = await prisma.rankedItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RankedItemCreateManyAndReturnArgs>(args?: SelectSubset<T, RankedItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RankedItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RankedItem.
     * @param {RankedItemDeleteArgs} args - Arguments to delete one RankedItem.
     * @example
     * // Delete one RankedItem
     * const RankedItem = await prisma.rankedItem.delete({
     *   where: {
     *     // ... filter to delete one RankedItem
     *   }
     * })
     * 
     */
    delete<T extends RankedItemDeleteArgs>(args: SelectSubset<T, RankedItemDeleteArgs<ExtArgs>>): Prisma__RankedItemClient<$Result.GetResult<Prisma.$RankedItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RankedItem.
     * @param {RankedItemUpdateArgs} args - Arguments to update one RankedItem.
     * @example
     * // Update one RankedItem
     * const rankedItem = await prisma.rankedItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RankedItemUpdateArgs>(args: SelectSubset<T, RankedItemUpdateArgs<ExtArgs>>): Prisma__RankedItemClient<$Result.GetResult<Prisma.$RankedItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RankedItems.
     * @param {RankedItemDeleteManyArgs} args - Arguments to filter RankedItems to delete.
     * @example
     * // Delete a few RankedItems
     * const { count } = await prisma.rankedItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RankedItemDeleteManyArgs>(args?: SelectSubset<T, RankedItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RankedItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankedItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RankedItems
     * const rankedItem = await prisma.rankedItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RankedItemUpdateManyArgs>(args: SelectSubset<T, RankedItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RankedItems and returns the data updated in the database.
     * @param {RankedItemUpdateManyAndReturnArgs} args - Arguments to update many RankedItems.
     * @example
     * // Update many RankedItems
     * const rankedItem = await prisma.rankedItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RankedItems and only return the `id`
     * const rankedItemWithIdOnly = await prisma.rankedItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RankedItemUpdateManyAndReturnArgs>(args: SelectSubset<T, RankedItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RankedItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RankedItem.
     * @param {RankedItemUpsertArgs} args - Arguments to update or create a RankedItem.
     * @example
     * // Update or create a RankedItem
     * const rankedItem = await prisma.rankedItem.upsert({
     *   create: {
     *     // ... data to create a RankedItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RankedItem we want to update
     *   }
     * })
     */
    upsert<T extends RankedItemUpsertArgs>(args: SelectSubset<T, RankedItemUpsertArgs<ExtArgs>>): Prisma__RankedItemClient<$Result.GetResult<Prisma.$RankedItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RankedItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankedItemCountArgs} args - Arguments to filter RankedItems to count.
     * @example
     * // Count the number of RankedItems
     * const count = await prisma.rankedItem.count({
     *   where: {
     *     // ... the filter for the RankedItems we want to count
     *   }
     * })
    **/
    count<T extends RankedItemCountArgs>(
      args?: Subset<T, RankedItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RankedItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RankedItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankedItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RankedItemAggregateArgs>(args: Subset<T, RankedItemAggregateArgs>): Prisma.PrismaPromise<GetRankedItemAggregateType<T>>

    /**
     * Group by RankedItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankedItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RankedItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RankedItemGroupByArgs['orderBy'] }
        : { orderBy?: RankedItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RankedItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRankedItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RankedItem model
   */
  readonly fields: RankedItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RankedItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RankedItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rankingList<T extends RankingListDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RankingListDefaultArgs<ExtArgs>>): Prisma__RankingListClient<$Result.GetResult<Prisma.$RankingListPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RankedItem model
   */
  interface RankedItemFieldRefs {
    readonly id: FieldRef<"RankedItem", 'String'>
    readonly itemName: FieldRef<"RankedItem", 'String'>
    readonly rank: FieldRef<"RankedItem", 'Int'>
    readonly imageUrl: FieldRef<"RankedItem", 'String'>
    readonly itemDescription: FieldRef<"RankedItem", 'String'>
    readonly listId: FieldRef<"RankedItem", 'String'>
    readonly createdAt: FieldRef<"RankedItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RankedItem findUnique
   */
  export type RankedItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankedItem
     */
    select?: RankedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankedItem
     */
    omit?: RankedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankedItemInclude<ExtArgs> | null
    /**
     * Filter, which RankedItem to fetch.
     */
    where: RankedItemWhereUniqueInput
  }

  /**
   * RankedItem findUniqueOrThrow
   */
  export type RankedItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankedItem
     */
    select?: RankedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankedItem
     */
    omit?: RankedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankedItemInclude<ExtArgs> | null
    /**
     * Filter, which RankedItem to fetch.
     */
    where: RankedItemWhereUniqueInput
  }

  /**
   * RankedItem findFirst
   */
  export type RankedItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankedItem
     */
    select?: RankedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankedItem
     */
    omit?: RankedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankedItemInclude<ExtArgs> | null
    /**
     * Filter, which RankedItem to fetch.
     */
    where?: RankedItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RankedItems to fetch.
     */
    orderBy?: RankedItemOrderByWithRelationInput | RankedItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RankedItems.
     */
    cursor?: RankedItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RankedItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RankedItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RankedItems.
     */
    distinct?: RankedItemScalarFieldEnum | RankedItemScalarFieldEnum[]
  }

  /**
   * RankedItem findFirstOrThrow
   */
  export type RankedItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankedItem
     */
    select?: RankedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankedItem
     */
    omit?: RankedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankedItemInclude<ExtArgs> | null
    /**
     * Filter, which RankedItem to fetch.
     */
    where?: RankedItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RankedItems to fetch.
     */
    orderBy?: RankedItemOrderByWithRelationInput | RankedItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RankedItems.
     */
    cursor?: RankedItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RankedItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RankedItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RankedItems.
     */
    distinct?: RankedItemScalarFieldEnum | RankedItemScalarFieldEnum[]
  }

  /**
   * RankedItem findMany
   */
  export type RankedItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankedItem
     */
    select?: RankedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankedItem
     */
    omit?: RankedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankedItemInclude<ExtArgs> | null
    /**
     * Filter, which RankedItems to fetch.
     */
    where?: RankedItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RankedItems to fetch.
     */
    orderBy?: RankedItemOrderByWithRelationInput | RankedItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RankedItems.
     */
    cursor?: RankedItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RankedItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RankedItems.
     */
    skip?: number
    distinct?: RankedItemScalarFieldEnum | RankedItemScalarFieldEnum[]
  }

  /**
   * RankedItem create
   */
  export type RankedItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankedItem
     */
    select?: RankedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankedItem
     */
    omit?: RankedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankedItemInclude<ExtArgs> | null
    /**
     * The data needed to create a RankedItem.
     */
    data: XOR<RankedItemCreateInput, RankedItemUncheckedCreateInput>
  }

  /**
   * RankedItem createMany
   */
  export type RankedItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RankedItems.
     */
    data: RankedItemCreateManyInput | RankedItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RankedItem createManyAndReturn
   */
  export type RankedItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankedItem
     */
    select?: RankedItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RankedItem
     */
    omit?: RankedItemOmit<ExtArgs> | null
    /**
     * The data used to create many RankedItems.
     */
    data: RankedItemCreateManyInput | RankedItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankedItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RankedItem update
   */
  export type RankedItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankedItem
     */
    select?: RankedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankedItem
     */
    omit?: RankedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankedItemInclude<ExtArgs> | null
    /**
     * The data needed to update a RankedItem.
     */
    data: XOR<RankedItemUpdateInput, RankedItemUncheckedUpdateInput>
    /**
     * Choose, which RankedItem to update.
     */
    where: RankedItemWhereUniqueInput
  }

  /**
   * RankedItem updateMany
   */
  export type RankedItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RankedItems.
     */
    data: XOR<RankedItemUpdateManyMutationInput, RankedItemUncheckedUpdateManyInput>
    /**
     * Filter which RankedItems to update
     */
    where?: RankedItemWhereInput
    /**
     * Limit how many RankedItems to update.
     */
    limit?: number
  }

  /**
   * RankedItem updateManyAndReturn
   */
  export type RankedItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankedItem
     */
    select?: RankedItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RankedItem
     */
    omit?: RankedItemOmit<ExtArgs> | null
    /**
     * The data used to update RankedItems.
     */
    data: XOR<RankedItemUpdateManyMutationInput, RankedItemUncheckedUpdateManyInput>
    /**
     * Filter which RankedItems to update
     */
    where?: RankedItemWhereInput
    /**
     * Limit how many RankedItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankedItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RankedItem upsert
   */
  export type RankedItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankedItem
     */
    select?: RankedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankedItem
     */
    omit?: RankedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankedItemInclude<ExtArgs> | null
    /**
     * The filter to search for the RankedItem to update in case it exists.
     */
    where: RankedItemWhereUniqueInput
    /**
     * In case the RankedItem found by the `where` argument doesn't exist, create a new RankedItem with this data.
     */
    create: XOR<RankedItemCreateInput, RankedItemUncheckedCreateInput>
    /**
     * In case the RankedItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RankedItemUpdateInput, RankedItemUncheckedUpdateInput>
  }

  /**
   * RankedItem delete
   */
  export type RankedItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankedItem
     */
    select?: RankedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankedItem
     */
    omit?: RankedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankedItemInclude<ExtArgs> | null
    /**
     * Filter which RankedItem to delete.
     */
    where: RankedItemWhereUniqueInput
  }

  /**
   * RankedItem deleteMany
   */
  export type RankedItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RankedItems to delete
     */
    where?: RankedItemWhereInput
    /**
     * Limit how many RankedItems to delete.
     */
    limit?: number
  }

  /**
   * RankedItem without action
   */
  export type RankedItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankedItem
     */
    select?: RankedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankedItem
     */
    omit?: RankedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankedItemInclude<ExtArgs> | null
  }


  /**
   * Model RankingListTag
   */

  export type AggregateRankingListTag = {
    _count: RankingListTagCountAggregateOutputType | null
    _min: RankingListTagMinAggregateOutputType | null
    _max: RankingListTagMaxAggregateOutputType | null
  }

  export type RankingListTagMinAggregateOutputType = {
    id: string | null
    listId: string | null
    tagId: string | null
  }

  export type RankingListTagMaxAggregateOutputType = {
    id: string | null
    listId: string | null
    tagId: string | null
  }

  export type RankingListTagCountAggregateOutputType = {
    id: number
    listId: number
    tagId: number
    _all: number
  }


  export type RankingListTagMinAggregateInputType = {
    id?: true
    listId?: true
    tagId?: true
  }

  export type RankingListTagMaxAggregateInputType = {
    id?: true
    listId?: true
    tagId?: true
  }

  export type RankingListTagCountAggregateInputType = {
    id?: true
    listId?: true
    tagId?: true
    _all?: true
  }

  export type RankingListTagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RankingListTag to aggregate.
     */
    where?: RankingListTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RankingListTags to fetch.
     */
    orderBy?: RankingListTagOrderByWithRelationInput | RankingListTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RankingListTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RankingListTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RankingListTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RankingListTags
    **/
    _count?: true | RankingListTagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RankingListTagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RankingListTagMaxAggregateInputType
  }

  export type GetRankingListTagAggregateType<T extends RankingListTagAggregateArgs> = {
        [P in keyof T & keyof AggregateRankingListTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRankingListTag[P]>
      : GetScalarType<T[P], AggregateRankingListTag[P]>
  }




  export type RankingListTagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RankingListTagWhereInput
    orderBy?: RankingListTagOrderByWithAggregationInput | RankingListTagOrderByWithAggregationInput[]
    by: RankingListTagScalarFieldEnum[] | RankingListTagScalarFieldEnum
    having?: RankingListTagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RankingListTagCountAggregateInputType | true
    _min?: RankingListTagMinAggregateInputType
    _max?: RankingListTagMaxAggregateInputType
  }

  export type RankingListTagGroupByOutputType = {
    id: string
    listId: string
    tagId: string
    _count: RankingListTagCountAggregateOutputType | null
    _min: RankingListTagMinAggregateOutputType | null
    _max: RankingListTagMaxAggregateOutputType | null
  }

  type GetRankingListTagGroupByPayload<T extends RankingListTagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RankingListTagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RankingListTagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RankingListTagGroupByOutputType[P]>
            : GetScalarType<T[P], RankingListTagGroupByOutputType[P]>
        }
      >
    >


  export type RankingListTagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    listId?: boolean
    tagId?: boolean
    list?: boolean | RankingListDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rankingListTag"]>

  export type RankingListTagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    listId?: boolean
    tagId?: boolean
    list?: boolean | RankingListDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rankingListTag"]>

  export type RankingListTagSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    listId?: boolean
    tagId?: boolean
    list?: boolean | RankingListDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rankingListTag"]>

  export type RankingListTagSelectScalar = {
    id?: boolean
    listId?: boolean
    tagId?: boolean
  }

  export type RankingListTagOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "listId" | "tagId", ExtArgs["result"]["rankingListTag"]>
  export type RankingListTagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    list?: boolean | RankingListDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }
  export type RankingListTagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    list?: boolean | RankingListDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }
  export type RankingListTagIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    list?: boolean | RankingListDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }

  export type $RankingListTagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RankingListTag"
    objects: {
      list: Prisma.$RankingListPayload<ExtArgs>
      tag: Prisma.$TagPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      listId: string
      tagId: string
    }, ExtArgs["result"]["rankingListTag"]>
    composites: {}
  }

  type RankingListTagGetPayload<S extends boolean | null | undefined | RankingListTagDefaultArgs> = $Result.GetResult<Prisma.$RankingListTagPayload, S>

  type RankingListTagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RankingListTagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RankingListTagCountAggregateInputType | true
    }

  export interface RankingListTagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RankingListTag'], meta: { name: 'RankingListTag' } }
    /**
     * Find zero or one RankingListTag that matches the filter.
     * @param {RankingListTagFindUniqueArgs} args - Arguments to find a RankingListTag
     * @example
     * // Get one RankingListTag
     * const rankingListTag = await prisma.rankingListTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RankingListTagFindUniqueArgs>(args: SelectSubset<T, RankingListTagFindUniqueArgs<ExtArgs>>): Prisma__RankingListTagClient<$Result.GetResult<Prisma.$RankingListTagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RankingListTag that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RankingListTagFindUniqueOrThrowArgs} args - Arguments to find a RankingListTag
     * @example
     * // Get one RankingListTag
     * const rankingListTag = await prisma.rankingListTag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RankingListTagFindUniqueOrThrowArgs>(args: SelectSubset<T, RankingListTagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RankingListTagClient<$Result.GetResult<Prisma.$RankingListTagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RankingListTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingListTagFindFirstArgs} args - Arguments to find a RankingListTag
     * @example
     * // Get one RankingListTag
     * const rankingListTag = await prisma.rankingListTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RankingListTagFindFirstArgs>(args?: SelectSubset<T, RankingListTagFindFirstArgs<ExtArgs>>): Prisma__RankingListTagClient<$Result.GetResult<Prisma.$RankingListTagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RankingListTag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingListTagFindFirstOrThrowArgs} args - Arguments to find a RankingListTag
     * @example
     * // Get one RankingListTag
     * const rankingListTag = await prisma.rankingListTag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RankingListTagFindFirstOrThrowArgs>(args?: SelectSubset<T, RankingListTagFindFirstOrThrowArgs<ExtArgs>>): Prisma__RankingListTagClient<$Result.GetResult<Prisma.$RankingListTagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RankingListTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingListTagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RankingListTags
     * const rankingListTags = await prisma.rankingListTag.findMany()
     * 
     * // Get first 10 RankingListTags
     * const rankingListTags = await prisma.rankingListTag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rankingListTagWithIdOnly = await prisma.rankingListTag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RankingListTagFindManyArgs>(args?: SelectSubset<T, RankingListTagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RankingListTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RankingListTag.
     * @param {RankingListTagCreateArgs} args - Arguments to create a RankingListTag.
     * @example
     * // Create one RankingListTag
     * const RankingListTag = await prisma.rankingListTag.create({
     *   data: {
     *     // ... data to create a RankingListTag
     *   }
     * })
     * 
     */
    create<T extends RankingListTagCreateArgs>(args: SelectSubset<T, RankingListTagCreateArgs<ExtArgs>>): Prisma__RankingListTagClient<$Result.GetResult<Prisma.$RankingListTagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RankingListTags.
     * @param {RankingListTagCreateManyArgs} args - Arguments to create many RankingListTags.
     * @example
     * // Create many RankingListTags
     * const rankingListTag = await prisma.rankingListTag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RankingListTagCreateManyArgs>(args?: SelectSubset<T, RankingListTagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RankingListTags and returns the data saved in the database.
     * @param {RankingListTagCreateManyAndReturnArgs} args - Arguments to create many RankingListTags.
     * @example
     * // Create many RankingListTags
     * const rankingListTag = await prisma.rankingListTag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RankingListTags and only return the `id`
     * const rankingListTagWithIdOnly = await prisma.rankingListTag.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RankingListTagCreateManyAndReturnArgs>(args?: SelectSubset<T, RankingListTagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RankingListTagPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RankingListTag.
     * @param {RankingListTagDeleteArgs} args - Arguments to delete one RankingListTag.
     * @example
     * // Delete one RankingListTag
     * const RankingListTag = await prisma.rankingListTag.delete({
     *   where: {
     *     // ... filter to delete one RankingListTag
     *   }
     * })
     * 
     */
    delete<T extends RankingListTagDeleteArgs>(args: SelectSubset<T, RankingListTagDeleteArgs<ExtArgs>>): Prisma__RankingListTagClient<$Result.GetResult<Prisma.$RankingListTagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RankingListTag.
     * @param {RankingListTagUpdateArgs} args - Arguments to update one RankingListTag.
     * @example
     * // Update one RankingListTag
     * const rankingListTag = await prisma.rankingListTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RankingListTagUpdateArgs>(args: SelectSubset<T, RankingListTagUpdateArgs<ExtArgs>>): Prisma__RankingListTagClient<$Result.GetResult<Prisma.$RankingListTagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RankingListTags.
     * @param {RankingListTagDeleteManyArgs} args - Arguments to filter RankingListTags to delete.
     * @example
     * // Delete a few RankingListTags
     * const { count } = await prisma.rankingListTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RankingListTagDeleteManyArgs>(args?: SelectSubset<T, RankingListTagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RankingListTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingListTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RankingListTags
     * const rankingListTag = await prisma.rankingListTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RankingListTagUpdateManyArgs>(args: SelectSubset<T, RankingListTagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RankingListTags and returns the data updated in the database.
     * @param {RankingListTagUpdateManyAndReturnArgs} args - Arguments to update many RankingListTags.
     * @example
     * // Update many RankingListTags
     * const rankingListTag = await prisma.rankingListTag.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RankingListTags and only return the `id`
     * const rankingListTagWithIdOnly = await prisma.rankingListTag.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RankingListTagUpdateManyAndReturnArgs>(args: SelectSubset<T, RankingListTagUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RankingListTagPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RankingListTag.
     * @param {RankingListTagUpsertArgs} args - Arguments to update or create a RankingListTag.
     * @example
     * // Update or create a RankingListTag
     * const rankingListTag = await prisma.rankingListTag.upsert({
     *   create: {
     *     // ... data to create a RankingListTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RankingListTag we want to update
     *   }
     * })
     */
    upsert<T extends RankingListTagUpsertArgs>(args: SelectSubset<T, RankingListTagUpsertArgs<ExtArgs>>): Prisma__RankingListTagClient<$Result.GetResult<Prisma.$RankingListTagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RankingListTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingListTagCountArgs} args - Arguments to filter RankingListTags to count.
     * @example
     * // Count the number of RankingListTags
     * const count = await prisma.rankingListTag.count({
     *   where: {
     *     // ... the filter for the RankingListTags we want to count
     *   }
     * })
    **/
    count<T extends RankingListTagCountArgs>(
      args?: Subset<T, RankingListTagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RankingListTagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RankingListTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingListTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RankingListTagAggregateArgs>(args: Subset<T, RankingListTagAggregateArgs>): Prisma.PrismaPromise<GetRankingListTagAggregateType<T>>

    /**
     * Group by RankingListTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingListTagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RankingListTagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RankingListTagGroupByArgs['orderBy'] }
        : { orderBy?: RankingListTagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RankingListTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRankingListTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RankingListTag model
   */
  readonly fields: RankingListTagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RankingListTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RankingListTagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    list<T extends RankingListDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RankingListDefaultArgs<ExtArgs>>): Prisma__RankingListClient<$Result.GetResult<Prisma.$RankingListPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tag<T extends TagDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TagDefaultArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RankingListTag model
   */
  interface RankingListTagFieldRefs {
    readonly id: FieldRef<"RankingListTag", 'String'>
    readonly listId: FieldRef<"RankingListTag", 'String'>
    readonly tagId: FieldRef<"RankingListTag", 'String'>
  }
    

  // Custom InputTypes
  /**
   * RankingListTag findUnique
   */
  export type RankingListTagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingListTag
     */
    select?: RankingListTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankingListTag
     */
    omit?: RankingListTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListTagInclude<ExtArgs> | null
    /**
     * Filter, which RankingListTag to fetch.
     */
    where: RankingListTagWhereUniqueInput
  }

  /**
   * RankingListTag findUniqueOrThrow
   */
  export type RankingListTagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingListTag
     */
    select?: RankingListTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankingListTag
     */
    omit?: RankingListTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListTagInclude<ExtArgs> | null
    /**
     * Filter, which RankingListTag to fetch.
     */
    where: RankingListTagWhereUniqueInput
  }

  /**
   * RankingListTag findFirst
   */
  export type RankingListTagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingListTag
     */
    select?: RankingListTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankingListTag
     */
    omit?: RankingListTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListTagInclude<ExtArgs> | null
    /**
     * Filter, which RankingListTag to fetch.
     */
    where?: RankingListTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RankingListTags to fetch.
     */
    orderBy?: RankingListTagOrderByWithRelationInput | RankingListTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RankingListTags.
     */
    cursor?: RankingListTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RankingListTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RankingListTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RankingListTags.
     */
    distinct?: RankingListTagScalarFieldEnum | RankingListTagScalarFieldEnum[]
  }

  /**
   * RankingListTag findFirstOrThrow
   */
  export type RankingListTagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingListTag
     */
    select?: RankingListTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankingListTag
     */
    omit?: RankingListTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListTagInclude<ExtArgs> | null
    /**
     * Filter, which RankingListTag to fetch.
     */
    where?: RankingListTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RankingListTags to fetch.
     */
    orderBy?: RankingListTagOrderByWithRelationInput | RankingListTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RankingListTags.
     */
    cursor?: RankingListTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RankingListTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RankingListTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RankingListTags.
     */
    distinct?: RankingListTagScalarFieldEnum | RankingListTagScalarFieldEnum[]
  }

  /**
   * RankingListTag findMany
   */
  export type RankingListTagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingListTag
     */
    select?: RankingListTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankingListTag
     */
    omit?: RankingListTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListTagInclude<ExtArgs> | null
    /**
     * Filter, which RankingListTags to fetch.
     */
    where?: RankingListTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RankingListTags to fetch.
     */
    orderBy?: RankingListTagOrderByWithRelationInput | RankingListTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RankingListTags.
     */
    cursor?: RankingListTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RankingListTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RankingListTags.
     */
    skip?: number
    distinct?: RankingListTagScalarFieldEnum | RankingListTagScalarFieldEnum[]
  }

  /**
   * RankingListTag create
   */
  export type RankingListTagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingListTag
     */
    select?: RankingListTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankingListTag
     */
    omit?: RankingListTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListTagInclude<ExtArgs> | null
    /**
     * The data needed to create a RankingListTag.
     */
    data: XOR<RankingListTagCreateInput, RankingListTagUncheckedCreateInput>
  }

  /**
   * RankingListTag createMany
   */
  export type RankingListTagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RankingListTags.
     */
    data: RankingListTagCreateManyInput | RankingListTagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RankingListTag createManyAndReturn
   */
  export type RankingListTagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingListTag
     */
    select?: RankingListTagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RankingListTag
     */
    omit?: RankingListTagOmit<ExtArgs> | null
    /**
     * The data used to create many RankingListTags.
     */
    data: RankingListTagCreateManyInput | RankingListTagCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListTagIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RankingListTag update
   */
  export type RankingListTagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingListTag
     */
    select?: RankingListTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankingListTag
     */
    omit?: RankingListTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListTagInclude<ExtArgs> | null
    /**
     * The data needed to update a RankingListTag.
     */
    data: XOR<RankingListTagUpdateInput, RankingListTagUncheckedUpdateInput>
    /**
     * Choose, which RankingListTag to update.
     */
    where: RankingListTagWhereUniqueInput
  }

  /**
   * RankingListTag updateMany
   */
  export type RankingListTagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RankingListTags.
     */
    data: XOR<RankingListTagUpdateManyMutationInput, RankingListTagUncheckedUpdateManyInput>
    /**
     * Filter which RankingListTags to update
     */
    where?: RankingListTagWhereInput
    /**
     * Limit how many RankingListTags to update.
     */
    limit?: number
  }

  /**
   * RankingListTag updateManyAndReturn
   */
  export type RankingListTagUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingListTag
     */
    select?: RankingListTagSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RankingListTag
     */
    omit?: RankingListTagOmit<ExtArgs> | null
    /**
     * The data used to update RankingListTags.
     */
    data: XOR<RankingListTagUpdateManyMutationInput, RankingListTagUncheckedUpdateManyInput>
    /**
     * Filter which RankingListTags to update
     */
    where?: RankingListTagWhereInput
    /**
     * Limit how many RankingListTags to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListTagIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RankingListTag upsert
   */
  export type RankingListTagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingListTag
     */
    select?: RankingListTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankingListTag
     */
    omit?: RankingListTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListTagInclude<ExtArgs> | null
    /**
     * The filter to search for the RankingListTag to update in case it exists.
     */
    where: RankingListTagWhereUniqueInput
    /**
     * In case the RankingListTag found by the `where` argument doesn't exist, create a new RankingListTag with this data.
     */
    create: XOR<RankingListTagCreateInput, RankingListTagUncheckedCreateInput>
    /**
     * In case the RankingListTag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RankingListTagUpdateInput, RankingListTagUncheckedUpdateInput>
  }

  /**
   * RankingListTag delete
   */
  export type RankingListTagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingListTag
     */
    select?: RankingListTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankingListTag
     */
    omit?: RankingListTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListTagInclude<ExtArgs> | null
    /**
     * Filter which RankingListTag to delete.
     */
    where: RankingListTagWhereUniqueInput
  }

  /**
   * RankingListTag deleteMany
   */
  export type RankingListTagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RankingListTags to delete
     */
    where?: RankingListTagWhereInput
    /**
     * Limit how many RankingListTags to delete.
     */
    limit?: number
  }

  /**
   * RankingListTag without action
   */
  export type RankingListTagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingListTag
     */
    select?: RankingListTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankingListTag
     */
    omit?: RankingListTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListTagInclude<ExtArgs> | null
  }


  /**
   * Model RankingListComment
   */

  export type AggregateRankingListComment = {
    _count: RankingListCommentCountAggregateOutputType | null
    _min: RankingListCommentMinAggregateOutputType | null
    _max: RankingListCommentMaxAggregateOutputType | null
  }

  export type RankingListCommentMinAggregateOutputType = {
    id: string | null
    listId: string | null
    userId: string | null
    content: string | null
    createdAt: Date | null
  }

  export type RankingListCommentMaxAggregateOutputType = {
    id: string | null
    listId: string | null
    userId: string | null
    content: string | null
    createdAt: Date | null
  }

  export type RankingListCommentCountAggregateOutputType = {
    id: number
    listId: number
    userId: number
    content: number
    createdAt: number
    _all: number
  }


  export type RankingListCommentMinAggregateInputType = {
    id?: true
    listId?: true
    userId?: true
    content?: true
    createdAt?: true
  }

  export type RankingListCommentMaxAggregateInputType = {
    id?: true
    listId?: true
    userId?: true
    content?: true
    createdAt?: true
  }

  export type RankingListCommentCountAggregateInputType = {
    id?: true
    listId?: true
    userId?: true
    content?: true
    createdAt?: true
    _all?: true
  }

  export type RankingListCommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RankingListComment to aggregate.
     */
    where?: RankingListCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RankingListComments to fetch.
     */
    orderBy?: RankingListCommentOrderByWithRelationInput | RankingListCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RankingListCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RankingListComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RankingListComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RankingListComments
    **/
    _count?: true | RankingListCommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RankingListCommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RankingListCommentMaxAggregateInputType
  }

  export type GetRankingListCommentAggregateType<T extends RankingListCommentAggregateArgs> = {
        [P in keyof T & keyof AggregateRankingListComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRankingListComment[P]>
      : GetScalarType<T[P], AggregateRankingListComment[P]>
  }




  export type RankingListCommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RankingListCommentWhereInput
    orderBy?: RankingListCommentOrderByWithAggregationInput | RankingListCommentOrderByWithAggregationInput[]
    by: RankingListCommentScalarFieldEnum[] | RankingListCommentScalarFieldEnum
    having?: RankingListCommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RankingListCommentCountAggregateInputType | true
    _min?: RankingListCommentMinAggregateInputType
    _max?: RankingListCommentMaxAggregateInputType
  }

  export type RankingListCommentGroupByOutputType = {
    id: string
    listId: string
    userId: string
    content: string
    createdAt: Date
    _count: RankingListCommentCountAggregateOutputType | null
    _min: RankingListCommentMinAggregateOutputType | null
    _max: RankingListCommentMaxAggregateOutputType | null
  }

  type GetRankingListCommentGroupByPayload<T extends RankingListCommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RankingListCommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RankingListCommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RankingListCommentGroupByOutputType[P]>
            : GetScalarType<T[P], RankingListCommentGroupByOutputType[P]>
        }
      >
    >


  export type RankingListCommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    listId?: boolean
    userId?: boolean
    content?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rankingListComment"]>

  export type RankingListCommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    listId?: boolean
    userId?: boolean
    content?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rankingListComment"]>

  export type RankingListCommentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    listId?: boolean
    userId?: boolean
    content?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rankingListComment"]>

  export type RankingListCommentSelectScalar = {
    id?: boolean
    listId?: boolean
    userId?: boolean
    content?: boolean
    createdAt?: boolean
  }

  export type RankingListCommentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "listId" | "userId" | "content" | "createdAt", ExtArgs["result"]["rankingListComment"]>
  export type RankingListCommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RankingListCommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RankingListCommentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $RankingListCommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RankingListComment"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      listId: string
      userId: string
      content: string
      createdAt: Date
    }, ExtArgs["result"]["rankingListComment"]>
    composites: {}
  }

  type RankingListCommentGetPayload<S extends boolean | null | undefined | RankingListCommentDefaultArgs> = $Result.GetResult<Prisma.$RankingListCommentPayload, S>

  type RankingListCommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RankingListCommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RankingListCommentCountAggregateInputType | true
    }

  export interface RankingListCommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RankingListComment'], meta: { name: 'RankingListComment' } }
    /**
     * Find zero or one RankingListComment that matches the filter.
     * @param {RankingListCommentFindUniqueArgs} args - Arguments to find a RankingListComment
     * @example
     * // Get one RankingListComment
     * const rankingListComment = await prisma.rankingListComment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RankingListCommentFindUniqueArgs>(args: SelectSubset<T, RankingListCommentFindUniqueArgs<ExtArgs>>): Prisma__RankingListCommentClient<$Result.GetResult<Prisma.$RankingListCommentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RankingListComment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RankingListCommentFindUniqueOrThrowArgs} args - Arguments to find a RankingListComment
     * @example
     * // Get one RankingListComment
     * const rankingListComment = await prisma.rankingListComment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RankingListCommentFindUniqueOrThrowArgs>(args: SelectSubset<T, RankingListCommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RankingListCommentClient<$Result.GetResult<Prisma.$RankingListCommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RankingListComment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingListCommentFindFirstArgs} args - Arguments to find a RankingListComment
     * @example
     * // Get one RankingListComment
     * const rankingListComment = await prisma.rankingListComment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RankingListCommentFindFirstArgs>(args?: SelectSubset<T, RankingListCommentFindFirstArgs<ExtArgs>>): Prisma__RankingListCommentClient<$Result.GetResult<Prisma.$RankingListCommentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RankingListComment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingListCommentFindFirstOrThrowArgs} args - Arguments to find a RankingListComment
     * @example
     * // Get one RankingListComment
     * const rankingListComment = await prisma.rankingListComment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RankingListCommentFindFirstOrThrowArgs>(args?: SelectSubset<T, RankingListCommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__RankingListCommentClient<$Result.GetResult<Prisma.$RankingListCommentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RankingListComments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingListCommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RankingListComments
     * const rankingListComments = await prisma.rankingListComment.findMany()
     * 
     * // Get first 10 RankingListComments
     * const rankingListComments = await prisma.rankingListComment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rankingListCommentWithIdOnly = await prisma.rankingListComment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RankingListCommentFindManyArgs>(args?: SelectSubset<T, RankingListCommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RankingListCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RankingListComment.
     * @param {RankingListCommentCreateArgs} args - Arguments to create a RankingListComment.
     * @example
     * // Create one RankingListComment
     * const RankingListComment = await prisma.rankingListComment.create({
     *   data: {
     *     // ... data to create a RankingListComment
     *   }
     * })
     * 
     */
    create<T extends RankingListCommentCreateArgs>(args: SelectSubset<T, RankingListCommentCreateArgs<ExtArgs>>): Prisma__RankingListCommentClient<$Result.GetResult<Prisma.$RankingListCommentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RankingListComments.
     * @param {RankingListCommentCreateManyArgs} args - Arguments to create many RankingListComments.
     * @example
     * // Create many RankingListComments
     * const rankingListComment = await prisma.rankingListComment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RankingListCommentCreateManyArgs>(args?: SelectSubset<T, RankingListCommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RankingListComments and returns the data saved in the database.
     * @param {RankingListCommentCreateManyAndReturnArgs} args - Arguments to create many RankingListComments.
     * @example
     * // Create many RankingListComments
     * const rankingListComment = await prisma.rankingListComment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RankingListComments and only return the `id`
     * const rankingListCommentWithIdOnly = await prisma.rankingListComment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RankingListCommentCreateManyAndReturnArgs>(args?: SelectSubset<T, RankingListCommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RankingListCommentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RankingListComment.
     * @param {RankingListCommentDeleteArgs} args - Arguments to delete one RankingListComment.
     * @example
     * // Delete one RankingListComment
     * const RankingListComment = await prisma.rankingListComment.delete({
     *   where: {
     *     // ... filter to delete one RankingListComment
     *   }
     * })
     * 
     */
    delete<T extends RankingListCommentDeleteArgs>(args: SelectSubset<T, RankingListCommentDeleteArgs<ExtArgs>>): Prisma__RankingListCommentClient<$Result.GetResult<Prisma.$RankingListCommentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RankingListComment.
     * @param {RankingListCommentUpdateArgs} args - Arguments to update one RankingListComment.
     * @example
     * // Update one RankingListComment
     * const rankingListComment = await prisma.rankingListComment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RankingListCommentUpdateArgs>(args: SelectSubset<T, RankingListCommentUpdateArgs<ExtArgs>>): Prisma__RankingListCommentClient<$Result.GetResult<Prisma.$RankingListCommentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RankingListComments.
     * @param {RankingListCommentDeleteManyArgs} args - Arguments to filter RankingListComments to delete.
     * @example
     * // Delete a few RankingListComments
     * const { count } = await prisma.rankingListComment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RankingListCommentDeleteManyArgs>(args?: SelectSubset<T, RankingListCommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RankingListComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingListCommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RankingListComments
     * const rankingListComment = await prisma.rankingListComment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RankingListCommentUpdateManyArgs>(args: SelectSubset<T, RankingListCommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RankingListComments and returns the data updated in the database.
     * @param {RankingListCommentUpdateManyAndReturnArgs} args - Arguments to update many RankingListComments.
     * @example
     * // Update many RankingListComments
     * const rankingListComment = await prisma.rankingListComment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RankingListComments and only return the `id`
     * const rankingListCommentWithIdOnly = await prisma.rankingListComment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RankingListCommentUpdateManyAndReturnArgs>(args: SelectSubset<T, RankingListCommentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RankingListCommentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RankingListComment.
     * @param {RankingListCommentUpsertArgs} args - Arguments to update or create a RankingListComment.
     * @example
     * // Update or create a RankingListComment
     * const rankingListComment = await prisma.rankingListComment.upsert({
     *   create: {
     *     // ... data to create a RankingListComment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RankingListComment we want to update
     *   }
     * })
     */
    upsert<T extends RankingListCommentUpsertArgs>(args: SelectSubset<T, RankingListCommentUpsertArgs<ExtArgs>>): Prisma__RankingListCommentClient<$Result.GetResult<Prisma.$RankingListCommentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RankingListComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingListCommentCountArgs} args - Arguments to filter RankingListComments to count.
     * @example
     * // Count the number of RankingListComments
     * const count = await prisma.rankingListComment.count({
     *   where: {
     *     // ... the filter for the RankingListComments we want to count
     *   }
     * })
    **/
    count<T extends RankingListCommentCountArgs>(
      args?: Subset<T, RankingListCommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RankingListCommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RankingListComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingListCommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RankingListCommentAggregateArgs>(args: Subset<T, RankingListCommentAggregateArgs>): Prisma.PrismaPromise<GetRankingListCommentAggregateType<T>>

    /**
     * Group by RankingListComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingListCommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RankingListCommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RankingListCommentGroupByArgs['orderBy'] }
        : { orderBy?: RankingListCommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RankingListCommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRankingListCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RankingListComment model
   */
  readonly fields: RankingListCommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RankingListComment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RankingListCommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RankingListComment model
   */
  interface RankingListCommentFieldRefs {
    readonly id: FieldRef<"RankingListComment", 'String'>
    readonly listId: FieldRef<"RankingListComment", 'String'>
    readonly userId: FieldRef<"RankingListComment", 'String'>
    readonly content: FieldRef<"RankingListComment", 'String'>
    readonly createdAt: FieldRef<"RankingListComment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RankingListComment findUnique
   */
  export type RankingListCommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingListComment
     */
    select?: RankingListCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankingListComment
     */
    omit?: RankingListCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListCommentInclude<ExtArgs> | null
    /**
     * Filter, which RankingListComment to fetch.
     */
    where: RankingListCommentWhereUniqueInput
  }

  /**
   * RankingListComment findUniqueOrThrow
   */
  export type RankingListCommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingListComment
     */
    select?: RankingListCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankingListComment
     */
    omit?: RankingListCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListCommentInclude<ExtArgs> | null
    /**
     * Filter, which RankingListComment to fetch.
     */
    where: RankingListCommentWhereUniqueInput
  }

  /**
   * RankingListComment findFirst
   */
  export type RankingListCommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingListComment
     */
    select?: RankingListCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankingListComment
     */
    omit?: RankingListCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListCommentInclude<ExtArgs> | null
    /**
     * Filter, which RankingListComment to fetch.
     */
    where?: RankingListCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RankingListComments to fetch.
     */
    orderBy?: RankingListCommentOrderByWithRelationInput | RankingListCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RankingListComments.
     */
    cursor?: RankingListCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RankingListComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RankingListComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RankingListComments.
     */
    distinct?: RankingListCommentScalarFieldEnum | RankingListCommentScalarFieldEnum[]
  }

  /**
   * RankingListComment findFirstOrThrow
   */
  export type RankingListCommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingListComment
     */
    select?: RankingListCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankingListComment
     */
    omit?: RankingListCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListCommentInclude<ExtArgs> | null
    /**
     * Filter, which RankingListComment to fetch.
     */
    where?: RankingListCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RankingListComments to fetch.
     */
    orderBy?: RankingListCommentOrderByWithRelationInput | RankingListCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RankingListComments.
     */
    cursor?: RankingListCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RankingListComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RankingListComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RankingListComments.
     */
    distinct?: RankingListCommentScalarFieldEnum | RankingListCommentScalarFieldEnum[]
  }

  /**
   * RankingListComment findMany
   */
  export type RankingListCommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingListComment
     */
    select?: RankingListCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankingListComment
     */
    omit?: RankingListCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListCommentInclude<ExtArgs> | null
    /**
     * Filter, which RankingListComments to fetch.
     */
    where?: RankingListCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RankingListComments to fetch.
     */
    orderBy?: RankingListCommentOrderByWithRelationInput | RankingListCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RankingListComments.
     */
    cursor?: RankingListCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RankingListComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RankingListComments.
     */
    skip?: number
    distinct?: RankingListCommentScalarFieldEnum | RankingListCommentScalarFieldEnum[]
  }

  /**
   * RankingListComment create
   */
  export type RankingListCommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingListComment
     */
    select?: RankingListCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankingListComment
     */
    omit?: RankingListCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListCommentInclude<ExtArgs> | null
    /**
     * The data needed to create a RankingListComment.
     */
    data: XOR<RankingListCommentCreateInput, RankingListCommentUncheckedCreateInput>
  }

  /**
   * RankingListComment createMany
   */
  export type RankingListCommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RankingListComments.
     */
    data: RankingListCommentCreateManyInput | RankingListCommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RankingListComment createManyAndReturn
   */
  export type RankingListCommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingListComment
     */
    select?: RankingListCommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RankingListComment
     */
    omit?: RankingListCommentOmit<ExtArgs> | null
    /**
     * The data used to create many RankingListComments.
     */
    data: RankingListCommentCreateManyInput | RankingListCommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListCommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RankingListComment update
   */
  export type RankingListCommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingListComment
     */
    select?: RankingListCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankingListComment
     */
    omit?: RankingListCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListCommentInclude<ExtArgs> | null
    /**
     * The data needed to update a RankingListComment.
     */
    data: XOR<RankingListCommentUpdateInput, RankingListCommentUncheckedUpdateInput>
    /**
     * Choose, which RankingListComment to update.
     */
    where: RankingListCommentWhereUniqueInput
  }

  /**
   * RankingListComment updateMany
   */
  export type RankingListCommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RankingListComments.
     */
    data: XOR<RankingListCommentUpdateManyMutationInput, RankingListCommentUncheckedUpdateManyInput>
    /**
     * Filter which RankingListComments to update
     */
    where?: RankingListCommentWhereInput
    /**
     * Limit how many RankingListComments to update.
     */
    limit?: number
  }

  /**
   * RankingListComment updateManyAndReturn
   */
  export type RankingListCommentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingListComment
     */
    select?: RankingListCommentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RankingListComment
     */
    omit?: RankingListCommentOmit<ExtArgs> | null
    /**
     * The data used to update RankingListComments.
     */
    data: XOR<RankingListCommentUpdateManyMutationInput, RankingListCommentUncheckedUpdateManyInput>
    /**
     * Filter which RankingListComments to update
     */
    where?: RankingListCommentWhereInput
    /**
     * Limit how many RankingListComments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListCommentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RankingListComment upsert
   */
  export type RankingListCommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingListComment
     */
    select?: RankingListCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankingListComment
     */
    omit?: RankingListCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListCommentInclude<ExtArgs> | null
    /**
     * The filter to search for the RankingListComment to update in case it exists.
     */
    where: RankingListCommentWhereUniqueInput
    /**
     * In case the RankingListComment found by the `where` argument doesn't exist, create a new RankingListComment with this data.
     */
    create: XOR<RankingListCommentCreateInput, RankingListCommentUncheckedCreateInput>
    /**
     * In case the RankingListComment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RankingListCommentUpdateInput, RankingListCommentUncheckedUpdateInput>
  }

  /**
   * RankingListComment delete
   */
  export type RankingListCommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingListComment
     */
    select?: RankingListCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankingListComment
     */
    omit?: RankingListCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListCommentInclude<ExtArgs> | null
    /**
     * Filter which RankingListComment to delete.
     */
    where: RankingListCommentWhereUniqueInput
  }

  /**
   * RankingListComment deleteMany
   */
  export type RankingListCommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RankingListComments to delete
     */
    where?: RankingListCommentWhereInput
    /**
     * Limit how many RankingListComments to delete.
     */
    limit?: number
  }

  /**
   * RankingListComment without action
   */
  export type RankingListCommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingListComment
     */
    select?: RankingListCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankingListComment
     */
    omit?: RankingListCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListCommentInclude<ExtArgs> | null
  }


  /**
   * Model TrendingSubject
   */

  export type AggregateTrendingSubject = {
    _count: TrendingSubjectCountAggregateOutputType | null
    _avg: TrendingSubjectAvgAggregateOutputType | null
    _sum: TrendingSubjectSumAggregateOutputType | null
    _min: TrendingSubjectMinAggregateOutputType | null
    _max: TrendingSubjectMaxAggregateOutputType | null
  }

  export type TrendingSubjectAvgAggregateOutputType = {
    count: number | null
  }

  export type TrendingSubjectSumAggregateOutputType = {
    count: number | null
  }

  export type TrendingSubjectMinAggregateOutputType = {
    id: string | null
    subject: string | null
    count: number | null
    period: $Enums.TrendPeriod | null
    calculationDate: Date | null
  }

  export type TrendingSubjectMaxAggregateOutputType = {
    id: string | null
    subject: string | null
    count: number | null
    period: $Enums.TrendPeriod | null
    calculationDate: Date | null
  }

  export type TrendingSubjectCountAggregateOutputType = {
    id: number
    subject: number
    count: number
    period: number
    calculationDate: number
    _all: number
  }


  export type TrendingSubjectAvgAggregateInputType = {
    count?: true
  }

  export type TrendingSubjectSumAggregateInputType = {
    count?: true
  }

  export type TrendingSubjectMinAggregateInputType = {
    id?: true
    subject?: true
    count?: true
    period?: true
    calculationDate?: true
  }

  export type TrendingSubjectMaxAggregateInputType = {
    id?: true
    subject?: true
    count?: true
    period?: true
    calculationDate?: true
  }

  export type TrendingSubjectCountAggregateInputType = {
    id?: true
    subject?: true
    count?: true
    period?: true
    calculationDate?: true
    _all?: true
  }

  export type TrendingSubjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TrendingSubject to aggregate.
     */
    where?: TrendingSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrendingSubjects to fetch.
     */
    orderBy?: TrendingSubjectOrderByWithRelationInput | TrendingSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TrendingSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrendingSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrendingSubjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TrendingSubjects
    **/
    _count?: true | TrendingSubjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TrendingSubjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TrendingSubjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrendingSubjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrendingSubjectMaxAggregateInputType
  }

  export type GetTrendingSubjectAggregateType<T extends TrendingSubjectAggregateArgs> = {
        [P in keyof T & keyof AggregateTrendingSubject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrendingSubject[P]>
      : GetScalarType<T[P], AggregateTrendingSubject[P]>
  }




  export type TrendingSubjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrendingSubjectWhereInput
    orderBy?: TrendingSubjectOrderByWithAggregationInput | TrendingSubjectOrderByWithAggregationInput[]
    by: TrendingSubjectScalarFieldEnum[] | TrendingSubjectScalarFieldEnum
    having?: TrendingSubjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrendingSubjectCountAggregateInputType | true
    _avg?: TrendingSubjectAvgAggregateInputType
    _sum?: TrendingSubjectSumAggregateInputType
    _min?: TrendingSubjectMinAggregateInputType
    _max?: TrendingSubjectMaxAggregateInputType
  }

  export type TrendingSubjectGroupByOutputType = {
    id: string
    subject: string
    count: number
    period: $Enums.TrendPeriod
    calculationDate: Date
    _count: TrendingSubjectCountAggregateOutputType | null
    _avg: TrendingSubjectAvgAggregateOutputType | null
    _sum: TrendingSubjectSumAggregateOutputType | null
    _min: TrendingSubjectMinAggregateOutputType | null
    _max: TrendingSubjectMaxAggregateOutputType | null
  }

  type GetTrendingSubjectGroupByPayload<T extends TrendingSubjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TrendingSubjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrendingSubjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrendingSubjectGroupByOutputType[P]>
            : GetScalarType<T[P], TrendingSubjectGroupByOutputType[P]>
        }
      >
    >


  export type TrendingSubjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subject?: boolean
    count?: boolean
    period?: boolean
    calculationDate?: boolean
  }, ExtArgs["result"]["trendingSubject"]>

  export type TrendingSubjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subject?: boolean
    count?: boolean
    period?: boolean
    calculationDate?: boolean
  }, ExtArgs["result"]["trendingSubject"]>

  export type TrendingSubjectSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subject?: boolean
    count?: boolean
    period?: boolean
    calculationDate?: boolean
  }, ExtArgs["result"]["trendingSubject"]>

  export type TrendingSubjectSelectScalar = {
    id?: boolean
    subject?: boolean
    count?: boolean
    period?: boolean
    calculationDate?: boolean
  }

  export type TrendingSubjectOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "subject" | "count" | "period" | "calculationDate", ExtArgs["result"]["trendingSubject"]>

  export type $TrendingSubjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TrendingSubject"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      subject: string
      count: number
      period: $Enums.TrendPeriod
      calculationDate: Date
    }, ExtArgs["result"]["trendingSubject"]>
    composites: {}
  }

  type TrendingSubjectGetPayload<S extends boolean | null | undefined | TrendingSubjectDefaultArgs> = $Result.GetResult<Prisma.$TrendingSubjectPayload, S>

  type TrendingSubjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TrendingSubjectFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TrendingSubjectCountAggregateInputType | true
    }

  export interface TrendingSubjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TrendingSubject'], meta: { name: 'TrendingSubject' } }
    /**
     * Find zero or one TrendingSubject that matches the filter.
     * @param {TrendingSubjectFindUniqueArgs} args - Arguments to find a TrendingSubject
     * @example
     * // Get one TrendingSubject
     * const trendingSubject = await prisma.trendingSubject.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TrendingSubjectFindUniqueArgs>(args: SelectSubset<T, TrendingSubjectFindUniqueArgs<ExtArgs>>): Prisma__TrendingSubjectClient<$Result.GetResult<Prisma.$TrendingSubjectPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TrendingSubject that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TrendingSubjectFindUniqueOrThrowArgs} args - Arguments to find a TrendingSubject
     * @example
     * // Get one TrendingSubject
     * const trendingSubject = await prisma.trendingSubject.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TrendingSubjectFindUniqueOrThrowArgs>(args: SelectSubset<T, TrendingSubjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TrendingSubjectClient<$Result.GetResult<Prisma.$TrendingSubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TrendingSubject that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendingSubjectFindFirstArgs} args - Arguments to find a TrendingSubject
     * @example
     * // Get one TrendingSubject
     * const trendingSubject = await prisma.trendingSubject.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TrendingSubjectFindFirstArgs>(args?: SelectSubset<T, TrendingSubjectFindFirstArgs<ExtArgs>>): Prisma__TrendingSubjectClient<$Result.GetResult<Prisma.$TrendingSubjectPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TrendingSubject that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendingSubjectFindFirstOrThrowArgs} args - Arguments to find a TrendingSubject
     * @example
     * // Get one TrendingSubject
     * const trendingSubject = await prisma.trendingSubject.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TrendingSubjectFindFirstOrThrowArgs>(args?: SelectSubset<T, TrendingSubjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__TrendingSubjectClient<$Result.GetResult<Prisma.$TrendingSubjectPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TrendingSubjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendingSubjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TrendingSubjects
     * const trendingSubjects = await prisma.trendingSubject.findMany()
     * 
     * // Get first 10 TrendingSubjects
     * const trendingSubjects = await prisma.trendingSubject.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trendingSubjectWithIdOnly = await prisma.trendingSubject.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TrendingSubjectFindManyArgs>(args?: SelectSubset<T, TrendingSubjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrendingSubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TrendingSubject.
     * @param {TrendingSubjectCreateArgs} args - Arguments to create a TrendingSubject.
     * @example
     * // Create one TrendingSubject
     * const TrendingSubject = await prisma.trendingSubject.create({
     *   data: {
     *     // ... data to create a TrendingSubject
     *   }
     * })
     * 
     */
    create<T extends TrendingSubjectCreateArgs>(args: SelectSubset<T, TrendingSubjectCreateArgs<ExtArgs>>): Prisma__TrendingSubjectClient<$Result.GetResult<Prisma.$TrendingSubjectPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TrendingSubjects.
     * @param {TrendingSubjectCreateManyArgs} args - Arguments to create many TrendingSubjects.
     * @example
     * // Create many TrendingSubjects
     * const trendingSubject = await prisma.trendingSubject.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TrendingSubjectCreateManyArgs>(args?: SelectSubset<T, TrendingSubjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TrendingSubjects and returns the data saved in the database.
     * @param {TrendingSubjectCreateManyAndReturnArgs} args - Arguments to create many TrendingSubjects.
     * @example
     * // Create many TrendingSubjects
     * const trendingSubject = await prisma.trendingSubject.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TrendingSubjects and only return the `id`
     * const trendingSubjectWithIdOnly = await prisma.trendingSubject.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TrendingSubjectCreateManyAndReturnArgs>(args?: SelectSubset<T, TrendingSubjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrendingSubjectPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TrendingSubject.
     * @param {TrendingSubjectDeleteArgs} args - Arguments to delete one TrendingSubject.
     * @example
     * // Delete one TrendingSubject
     * const TrendingSubject = await prisma.trendingSubject.delete({
     *   where: {
     *     // ... filter to delete one TrendingSubject
     *   }
     * })
     * 
     */
    delete<T extends TrendingSubjectDeleteArgs>(args: SelectSubset<T, TrendingSubjectDeleteArgs<ExtArgs>>): Prisma__TrendingSubjectClient<$Result.GetResult<Prisma.$TrendingSubjectPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TrendingSubject.
     * @param {TrendingSubjectUpdateArgs} args - Arguments to update one TrendingSubject.
     * @example
     * // Update one TrendingSubject
     * const trendingSubject = await prisma.trendingSubject.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TrendingSubjectUpdateArgs>(args: SelectSubset<T, TrendingSubjectUpdateArgs<ExtArgs>>): Prisma__TrendingSubjectClient<$Result.GetResult<Prisma.$TrendingSubjectPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TrendingSubjects.
     * @param {TrendingSubjectDeleteManyArgs} args - Arguments to filter TrendingSubjects to delete.
     * @example
     * // Delete a few TrendingSubjects
     * const { count } = await prisma.trendingSubject.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TrendingSubjectDeleteManyArgs>(args?: SelectSubset<T, TrendingSubjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TrendingSubjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendingSubjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TrendingSubjects
     * const trendingSubject = await prisma.trendingSubject.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TrendingSubjectUpdateManyArgs>(args: SelectSubset<T, TrendingSubjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TrendingSubjects and returns the data updated in the database.
     * @param {TrendingSubjectUpdateManyAndReturnArgs} args - Arguments to update many TrendingSubjects.
     * @example
     * // Update many TrendingSubjects
     * const trendingSubject = await prisma.trendingSubject.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TrendingSubjects and only return the `id`
     * const trendingSubjectWithIdOnly = await prisma.trendingSubject.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TrendingSubjectUpdateManyAndReturnArgs>(args: SelectSubset<T, TrendingSubjectUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrendingSubjectPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TrendingSubject.
     * @param {TrendingSubjectUpsertArgs} args - Arguments to update or create a TrendingSubject.
     * @example
     * // Update or create a TrendingSubject
     * const trendingSubject = await prisma.trendingSubject.upsert({
     *   create: {
     *     // ... data to create a TrendingSubject
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TrendingSubject we want to update
     *   }
     * })
     */
    upsert<T extends TrendingSubjectUpsertArgs>(args: SelectSubset<T, TrendingSubjectUpsertArgs<ExtArgs>>): Prisma__TrendingSubjectClient<$Result.GetResult<Prisma.$TrendingSubjectPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TrendingSubjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendingSubjectCountArgs} args - Arguments to filter TrendingSubjects to count.
     * @example
     * // Count the number of TrendingSubjects
     * const count = await prisma.trendingSubject.count({
     *   where: {
     *     // ... the filter for the TrendingSubjects we want to count
     *   }
     * })
    **/
    count<T extends TrendingSubjectCountArgs>(
      args?: Subset<T, TrendingSubjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrendingSubjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TrendingSubject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendingSubjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrendingSubjectAggregateArgs>(args: Subset<T, TrendingSubjectAggregateArgs>): Prisma.PrismaPromise<GetTrendingSubjectAggregateType<T>>

    /**
     * Group by TrendingSubject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendingSubjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TrendingSubjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TrendingSubjectGroupByArgs['orderBy'] }
        : { orderBy?: TrendingSubjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TrendingSubjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrendingSubjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TrendingSubject model
   */
  readonly fields: TrendingSubjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TrendingSubject.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TrendingSubjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TrendingSubject model
   */
  interface TrendingSubjectFieldRefs {
    readonly id: FieldRef<"TrendingSubject", 'String'>
    readonly subject: FieldRef<"TrendingSubject", 'String'>
    readonly count: FieldRef<"TrendingSubject", 'Int'>
    readonly period: FieldRef<"TrendingSubject", 'TrendPeriod'>
    readonly calculationDate: FieldRef<"TrendingSubject", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TrendingSubject findUnique
   */
  export type TrendingSubjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingSubject
     */
    select?: TrendingSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingSubject
     */
    omit?: TrendingSubjectOmit<ExtArgs> | null
    /**
     * Filter, which TrendingSubject to fetch.
     */
    where: TrendingSubjectWhereUniqueInput
  }

  /**
   * TrendingSubject findUniqueOrThrow
   */
  export type TrendingSubjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingSubject
     */
    select?: TrendingSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingSubject
     */
    omit?: TrendingSubjectOmit<ExtArgs> | null
    /**
     * Filter, which TrendingSubject to fetch.
     */
    where: TrendingSubjectWhereUniqueInput
  }

  /**
   * TrendingSubject findFirst
   */
  export type TrendingSubjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingSubject
     */
    select?: TrendingSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingSubject
     */
    omit?: TrendingSubjectOmit<ExtArgs> | null
    /**
     * Filter, which TrendingSubject to fetch.
     */
    where?: TrendingSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrendingSubjects to fetch.
     */
    orderBy?: TrendingSubjectOrderByWithRelationInput | TrendingSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TrendingSubjects.
     */
    cursor?: TrendingSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrendingSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrendingSubjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TrendingSubjects.
     */
    distinct?: TrendingSubjectScalarFieldEnum | TrendingSubjectScalarFieldEnum[]
  }

  /**
   * TrendingSubject findFirstOrThrow
   */
  export type TrendingSubjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingSubject
     */
    select?: TrendingSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingSubject
     */
    omit?: TrendingSubjectOmit<ExtArgs> | null
    /**
     * Filter, which TrendingSubject to fetch.
     */
    where?: TrendingSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrendingSubjects to fetch.
     */
    orderBy?: TrendingSubjectOrderByWithRelationInput | TrendingSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TrendingSubjects.
     */
    cursor?: TrendingSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrendingSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrendingSubjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TrendingSubjects.
     */
    distinct?: TrendingSubjectScalarFieldEnum | TrendingSubjectScalarFieldEnum[]
  }

  /**
   * TrendingSubject findMany
   */
  export type TrendingSubjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingSubject
     */
    select?: TrendingSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingSubject
     */
    omit?: TrendingSubjectOmit<ExtArgs> | null
    /**
     * Filter, which TrendingSubjects to fetch.
     */
    where?: TrendingSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrendingSubjects to fetch.
     */
    orderBy?: TrendingSubjectOrderByWithRelationInput | TrendingSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TrendingSubjects.
     */
    cursor?: TrendingSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrendingSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrendingSubjects.
     */
    skip?: number
    distinct?: TrendingSubjectScalarFieldEnum | TrendingSubjectScalarFieldEnum[]
  }

  /**
   * TrendingSubject create
   */
  export type TrendingSubjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingSubject
     */
    select?: TrendingSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingSubject
     */
    omit?: TrendingSubjectOmit<ExtArgs> | null
    /**
     * The data needed to create a TrendingSubject.
     */
    data: XOR<TrendingSubjectCreateInput, TrendingSubjectUncheckedCreateInput>
  }

  /**
   * TrendingSubject createMany
   */
  export type TrendingSubjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TrendingSubjects.
     */
    data: TrendingSubjectCreateManyInput | TrendingSubjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TrendingSubject createManyAndReturn
   */
  export type TrendingSubjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingSubject
     */
    select?: TrendingSubjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingSubject
     */
    omit?: TrendingSubjectOmit<ExtArgs> | null
    /**
     * The data used to create many TrendingSubjects.
     */
    data: TrendingSubjectCreateManyInput | TrendingSubjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TrendingSubject update
   */
  export type TrendingSubjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingSubject
     */
    select?: TrendingSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingSubject
     */
    omit?: TrendingSubjectOmit<ExtArgs> | null
    /**
     * The data needed to update a TrendingSubject.
     */
    data: XOR<TrendingSubjectUpdateInput, TrendingSubjectUncheckedUpdateInput>
    /**
     * Choose, which TrendingSubject to update.
     */
    where: TrendingSubjectWhereUniqueInput
  }

  /**
   * TrendingSubject updateMany
   */
  export type TrendingSubjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TrendingSubjects.
     */
    data: XOR<TrendingSubjectUpdateManyMutationInput, TrendingSubjectUncheckedUpdateManyInput>
    /**
     * Filter which TrendingSubjects to update
     */
    where?: TrendingSubjectWhereInput
    /**
     * Limit how many TrendingSubjects to update.
     */
    limit?: number
  }

  /**
   * TrendingSubject updateManyAndReturn
   */
  export type TrendingSubjectUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingSubject
     */
    select?: TrendingSubjectSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingSubject
     */
    omit?: TrendingSubjectOmit<ExtArgs> | null
    /**
     * The data used to update TrendingSubjects.
     */
    data: XOR<TrendingSubjectUpdateManyMutationInput, TrendingSubjectUncheckedUpdateManyInput>
    /**
     * Filter which TrendingSubjects to update
     */
    where?: TrendingSubjectWhereInput
    /**
     * Limit how many TrendingSubjects to update.
     */
    limit?: number
  }

  /**
   * TrendingSubject upsert
   */
  export type TrendingSubjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingSubject
     */
    select?: TrendingSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingSubject
     */
    omit?: TrendingSubjectOmit<ExtArgs> | null
    /**
     * The filter to search for the TrendingSubject to update in case it exists.
     */
    where: TrendingSubjectWhereUniqueInput
    /**
     * In case the TrendingSubject found by the `where` argument doesn't exist, create a new TrendingSubject with this data.
     */
    create: XOR<TrendingSubjectCreateInput, TrendingSubjectUncheckedCreateInput>
    /**
     * In case the TrendingSubject was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TrendingSubjectUpdateInput, TrendingSubjectUncheckedUpdateInput>
  }

  /**
   * TrendingSubject delete
   */
  export type TrendingSubjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingSubject
     */
    select?: TrendingSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingSubject
     */
    omit?: TrendingSubjectOmit<ExtArgs> | null
    /**
     * Filter which TrendingSubject to delete.
     */
    where: TrendingSubjectWhereUniqueInput
  }

  /**
   * TrendingSubject deleteMany
   */
  export type TrendingSubjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TrendingSubjects to delete
     */
    where?: TrendingSubjectWhereInput
    /**
     * Limit how many TrendingSubjects to delete.
     */
    limit?: number
  }

  /**
   * TrendingSubject without action
   */
  export type TrendingSubjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingSubject
     */
    select?: TrendingSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingSubject
     */
    omit?: TrendingSubjectOmit<ExtArgs> | null
  }


  /**
   * Model TrendingTag
   */

  export type AggregateTrendingTag = {
    _count: TrendingTagCountAggregateOutputType | null
    _avg: TrendingTagAvgAggregateOutputType | null
    _sum: TrendingTagSumAggregateOutputType | null
    _min: TrendingTagMinAggregateOutputType | null
    _max: TrendingTagMaxAggregateOutputType | null
  }

  export type TrendingTagAvgAggregateOutputType = {
    count: number | null
  }

  export type TrendingTagSumAggregateOutputType = {
    count: number | null
  }

  export type TrendingTagMinAggregateOutputType = {
    id: string | null
    tagId: string | null
    tagName: string | null
    count: number | null
    period: $Enums.TrendPeriod | null
    calculationDate: Date | null
  }

  export type TrendingTagMaxAggregateOutputType = {
    id: string | null
    tagId: string | null
    tagName: string | null
    count: number | null
    period: $Enums.TrendPeriod | null
    calculationDate: Date | null
  }

  export type TrendingTagCountAggregateOutputType = {
    id: number
    tagId: number
    tagName: number
    count: number
    period: number
    calculationDate: number
    _all: number
  }


  export type TrendingTagAvgAggregateInputType = {
    count?: true
  }

  export type TrendingTagSumAggregateInputType = {
    count?: true
  }

  export type TrendingTagMinAggregateInputType = {
    id?: true
    tagId?: true
    tagName?: true
    count?: true
    period?: true
    calculationDate?: true
  }

  export type TrendingTagMaxAggregateInputType = {
    id?: true
    tagId?: true
    tagName?: true
    count?: true
    period?: true
    calculationDate?: true
  }

  export type TrendingTagCountAggregateInputType = {
    id?: true
    tagId?: true
    tagName?: true
    count?: true
    period?: true
    calculationDate?: true
    _all?: true
  }

  export type TrendingTagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TrendingTag to aggregate.
     */
    where?: TrendingTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrendingTags to fetch.
     */
    orderBy?: TrendingTagOrderByWithRelationInput | TrendingTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TrendingTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrendingTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrendingTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TrendingTags
    **/
    _count?: true | TrendingTagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TrendingTagAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TrendingTagSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrendingTagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrendingTagMaxAggregateInputType
  }

  export type GetTrendingTagAggregateType<T extends TrendingTagAggregateArgs> = {
        [P in keyof T & keyof AggregateTrendingTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrendingTag[P]>
      : GetScalarType<T[P], AggregateTrendingTag[P]>
  }




  export type TrendingTagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrendingTagWhereInput
    orderBy?: TrendingTagOrderByWithAggregationInput | TrendingTagOrderByWithAggregationInput[]
    by: TrendingTagScalarFieldEnum[] | TrendingTagScalarFieldEnum
    having?: TrendingTagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrendingTagCountAggregateInputType | true
    _avg?: TrendingTagAvgAggregateInputType
    _sum?: TrendingTagSumAggregateInputType
    _min?: TrendingTagMinAggregateInputType
    _max?: TrendingTagMaxAggregateInputType
  }

  export type TrendingTagGroupByOutputType = {
    id: string
    tagId: string
    tagName: string
    count: number
    period: $Enums.TrendPeriod
    calculationDate: Date
    _count: TrendingTagCountAggregateOutputType | null
    _avg: TrendingTagAvgAggregateOutputType | null
    _sum: TrendingTagSumAggregateOutputType | null
    _min: TrendingTagMinAggregateOutputType | null
    _max: TrendingTagMaxAggregateOutputType | null
  }

  type GetTrendingTagGroupByPayload<T extends TrendingTagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TrendingTagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrendingTagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrendingTagGroupByOutputType[P]>
            : GetScalarType<T[P], TrendingTagGroupByOutputType[P]>
        }
      >
    >


  export type TrendingTagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tagId?: boolean
    tagName?: boolean
    count?: boolean
    period?: boolean
    calculationDate?: boolean
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trendingTag"]>

  export type TrendingTagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tagId?: boolean
    tagName?: boolean
    count?: boolean
    period?: boolean
    calculationDate?: boolean
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trendingTag"]>

  export type TrendingTagSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tagId?: boolean
    tagName?: boolean
    count?: boolean
    period?: boolean
    calculationDate?: boolean
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trendingTag"]>

  export type TrendingTagSelectScalar = {
    id?: boolean
    tagId?: boolean
    tagName?: boolean
    count?: boolean
    period?: boolean
    calculationDate?: boolean
  }

  export type TrendingTagOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tagId" | "tagName" | "count" | "period" | "calculationDate", ExtArgs["result"]["trendingTag"]>
  export type TrendingTagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }
  export type TrendingTagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }
  export type TrendingTagIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }

  export type $TrendingTagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TrendingTag"
    objects: {
      tag: Prisma.$TagPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tagId: string
      tagName: string
      count: number
      period: $Enums.TrendPeriod
      calculationDate: Date
    }, ExtArgs["result"]["trendingTag"]>
    composites: {}
  }

  type TrendingTagGetPayload<S extends boolean | null | undefined | TrendingTagDefaultArgs> = $Result.GetResult<Prisma.$TrendingTagPayload, S>

  type TrendingTagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TrendingTagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TrendingTagCountAggregateInputType | true
    }

  export interface TrendingTagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TrendingTag'], meta: { name: 'TrendingTag' } }
    /**
     * Find zero or one TrendingTag that matches the filter.
     * @param {TrendingTagFindUniqueArgs} args - Arguments to find a TrendingTag
     * @example
     * // Get one TrendingTag
     * const trendingTag = await prisma.trendingTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TrendingTagFindUniqueArgs>(args: SelectSubset<T, TrendingTagFindUniqueArgs<ExtArgs>>): Prisma__TrendingTagClient<$Result.GetResult<Prisma.$TrendingTagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TrendingTag that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TrendingTagFindUniqueOrThrowArgs} args - Arguments to find a TrendingTag
     * @example
     * // Get one TrendingTag
     * const trendingTag = await prisma.trendingTag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TrendingTagFindUniqueOrThrowArgs>(args: SelectSubset<T, TrendingTagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TrendingTagClient<$Result.GetResult<Prisma.$TrendingTagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TrendingTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendingTagFindFirstArgs} args - Arguments to find a TrendingTag
     * @example
     * // Get one TrendingTag
     * const trendingTag = await prisma.trendingTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TrendingTagFindFirstArgs>(args?: SelectSubset<T, TrendingTagFindFirstArgs<ExtArgs>>): Prisma__TrendingTagClient<$Result.GetResult<Prisma.$TrendingTagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TrendingTag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendingTagFindFirstOrThrowArgs} args - Arguments to find a TrendingTag
     * @example
     * // Get one TrendingTag
     * const trendingTag = await prisma.trendingTag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TrendingTagFindFirstOrThrowArgs>(args?: SelectSubset<T, TrendingTagFindFirstOrThrowArgs<ExtArgs>>): Prisma__TrendingTagClient<$Result.GetResult<Prisma.$TrendingTagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TrendingTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendingTagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TrendingTags
     * const trendingTags = await prisma.trendingTag.findMany()
     * 
     * // Get first 10 TrendingTags
     * const trendingTags = await prisma.trendingTag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trendingTagWithIdOnly = await prisma.trendingTag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TrendingTagFindManyArgs>(args?: SelectSubset<T, TrendingTagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrendingTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TrendingTag.
     * @param {TrendingTagCreateArgs} args - Arguments to create a TrendingTag.
     * @example
     * // Create one TrendingTag
     * const TrendingTag = await prisma.trendingTag.create({
     *   data: {
     *     // ... data to create a TrendingTag
     *   }
     * })
     * 
     */
    create<T extends TrendingTagCreateArgs>(args: SelectSubset<T, TrendingTagCreateArgs<ExtArgs>>): Prisma__TrendingTagClient<$Result.GetResult<Prisma.$TrendingTagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TrendingTags.
     * @param {TrendingTagCreateManyArgs} args - Arguments to create many TrendingTags.
     * @example
     * // Create many TrendingTags
     * const trendingTag = await prisma.trendingTag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TrendingTagCreateManyArgs>(args?: SelectSubset<T, TrendingTagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TrendingTags and returns the data saved in the database.
     * @param {TrendingTagCreateManyAndReturnArgs} args - Arguments to create many TrendingTags.
     * @example
     * // Create many TrendingTags
     * const trendingTag = await prisma.trendingTag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TrendingTags and only return the `id`
     * const trendingTagWithIdOnly = await prisma.trendingTag.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TrendingTagCreateManyAndReturnArgs>(args?: SelectSubset<T, TrendingTagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrendingTagPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TrendingTag.
     * @param {TrendingTagDeleteArgs} args - Arguments to delete one TrendingTag.
     * @example
     * // Delete one TrendingTag
     * const TrendingTag = await prisma.trendingTag.delete({
     *   where: {
     *     // ... filter to delete one TrendingTag
     *   }
     * })
     * 
     */
    delete<T extends TrendingTagDeleteArgs>(args: SelectSubset<T, TrendingTagDeleteArgs<ExtArgs>>): Prisma__TrendingTagClient<$Result.GetResult<Prisma.$TrendingTagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TrendingTag.
     * @param {TrendingTagUpdateArgs} args - Arguments to update one TrendingTag.
     * @example
     * // Update one TrendingTag
     * const trendingTag = await prisma.trendingTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TrendingTagUpdateArgs>(args: SelectSubset<T, TrendingTagUpdateArgs<ExtArgs>>): Prisma__TrendingTagClient<$Result.GetResult<Prisma.$TrendingTagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TrendingTags.
     * @param {TrendingTagDeleteManyArgs} args - Arguments to filter TrendingTags to delete.
     * @example
     * // Delete a few TrendingTags
     * const { count } = await prisma.trendingTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TrendingTagDeleteManyArgs>(args?: SelectSubset<T, TrendingTagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TrendingTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendingTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TrendingTags
     * const trendingTag = await prisma.trendingTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TrendingTagUpdateManyArgs>(args: SelectSubset<T, TrendingTagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TrendingTags and returns the data updated in the database.
     * @param {TrendingTagUpdateManyAndReturnArgs} args - Arguments to update many TrendingTags.
     * @example
     * // Update many TrendingTags
     * const trendingTag = await prisma.trendingTag.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TrendingTags and only return the `id`
     * const trendingTagWithIdOnly = await prisma.trendingTag.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TrendingTagUpdateManyAndReturnArgs>(args: SelectSubset<T, TrendingTagUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrendingTagPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TrendingTag.
     * @param {TrendingTagUpsertArgs} args - Arguments to update or create a TrendingTag.
     * @example
     * // Update or create a TrendingTag
     * const trendingTag = await prisma.trendingTag.upsert({
     *   create: {
     *     // ... data to create a TrendingTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TrendingTag we want to update
     *   }
     * })
     */
    upsert<T extends TrendingTagUpsertArgs>(args: SelectSubset<T, TrendingTagUpsertArgs<ExtArgs>>): Prisma__TrendingTagClient<$Result.GetResult<Prisma.$TrendingTagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TrendingTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendingTagCountArgs} args - Arguments to filter TrendingTags to count.
     * @example
     * // Count the number of TrendingTags
     * const count = await prisma.trendingTag.count({
     *   where: {
     *     // ... the filter for the TrendingTags we want to count
     *   }
     * })
    **/
    count<T extends TrendingTagCountArgs>(
      args?: Subset<T, TrendingTagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrendingTagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TrendingTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendingTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrendingTagAggregateArgs>(args: Subset<T, TrendingTagAggregateArgs>): Prisma.PrismaPromise<GetTrendingTagAggregateType<T>>

    /**
     * Group by TrendingTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendingTagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TrendingTagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TrendingTagGroupByArgs['orderBy'] }
        : { orderBy?: TrendingTagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TrendingTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrendingTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TrendingTag model
   */
  readonly fields: TrendingTagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TrendingTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TrendingTagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tag<T extends TagDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TagDefaultArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TrendingTag model
   */
  interface TrendingTagFieldRefs {
    readonly id: FieldRef<"TrendingTag", 'String'>
    readonly tagId: FieldRef<"TrendingTag", 'String'>
    readonly tagName: FieldRef<"TrendingTag", 'String'>
    readonly count: FieldRef<"TrendingTag", 'Int'>
    readonly period: FieldRef<"TrendingTag", 'TrendPeriod'>
    readonly calculationDate: FieldRef<"TrendingTag", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TrendingTag findUnique
   */
  export type TrendingTagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingTag
     */
    select?: TrendingTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingTag
     */
    omit?: TrendingTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrendingTagInclude<ExtArgs> | null
    /**
     * Filter, which TrendingTag to fetch.
     */
    where: TrendingTagWhereUniqueInput
  }

  /**
   * TrendingTag findUniqueOrThrow
   */
  export type TrendingTagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingTag
     */
    select?: TrendingTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingTag
     */
    omit?: TrendingTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrendingTagInclude<ExtArgs> | null
    /**
     * Filter, which TrendingTag to fetch.
     */
    where: TrendingTagWhereUniqueInput
  }

  /**
   * TrendingTag findFirst
   */
  export type TrendingTagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingTag
     */
    select?: TrendingTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingTag
     */
    omit?: TrendingTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrendingTagInclude<ExtArgs> | null
    /**
     * Filter, which TrendingTag to fetch.
     */
    where?: TrendingTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrendingTags to fetch.
     */
    orderBy?: TrendingTagOrderByWithRelationInput | TrendingTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TrendingTags.
     */
    cursor?: TrendingTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrendingTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrendingTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TrendingTags.
     */
    distinct?: TrendingTagScalarFieldEnum | TrendingTagScalarFieldEnum[]
  }

  /**
   * TrendingTag findFirstOrThrow
   */
  export type TrendingTagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingTag
     */
    select?: TrendingTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingTag
     */
    omit?: TrendingTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrendingTagInclude<ExtArgs> | null
    /**
     * Filter, which TrendingTag to fetch.
     */
    where?: TrendingTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrendingTags to fetch.
     */
    orderBy?: TrendingTagOrderByWithRelationInput | TrendingTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TrendingTags.
     */
    cursor?: TrendingTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrendingTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrendingTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TrendingTags.
     */
    distinct?: TrendingTagScalarFieldEnum | TrendingTagScalarFieldEnum[]
  }

  /**
   * TrendingTag findMany
   */
  export type TrendingTagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingTag
     */
    select?: TrendingTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingTag
     */
    omit?: TrendingTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrendingTagInclude<ExtArgs> | null
    /**
     * Filter, which TrendingTags to fetch.
     */
    where?: TrendingTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrendingTags to fetch.
     */
    orderBy?: TrendingTagOrderByWithRelationInput | TrendingTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TrendingTags.
     */
    cursor?: TrendingTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrendingTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrendingTags.
     */
    skip?: number
    distinct?: TrendingTagScalarFieldEnum | TrendingTagScalarFieldEnum[]
  }

  /**
   * TrendingTag create
   */
  export type TrendingTagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingTag
     */
    select?: TrendingTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingTag
     */
    omit?: TrendingTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrendingTagInclude<ExtArgs> | null
    /**
     * The data needed to create a TrendingTag.
     */
    data: XOR<TrendingTagCreateInput, TrendingTagUncheckedCreateInput>
  }

  /**
   * TrendingTag createMany
   */
  export type TrendingTagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TrendingTags.
     */
    data: TrendingTagCreateManyInput | TrendingTagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TrendingTag createManyAndReturn
   */
  export type TrendingTagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingTag
     */
    select?: TrendingTagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingTag
     */
    omit?: TrendingTagOmit<ExtArgs> | null
    /**
     * The data used to create many TrendingTags.
     */
    data: TrendingTagCreateManyInput | TrendingTagCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrendingTagIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TrendingTag update
   */
  export type TrendingTagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingTag
     */
    select?: TrendingTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingTag
     */
    omit?: TrendingTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrendingTagInclude<ExtArgs> | null
    /**
     * The data needed to update a TrendingTag.
     */
    data: XOR<TrendingTagUpdateInput, TrendingTagUncheckedUpdateInput>
    /**
     * Choose, which TrendingTag to update.
     */
    where: TrendingTagWhereUniqueInput
  }

  /**
   * TrendingTag updateMany
   */
  export type TrendingTagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TrendingTags.
     */
    data: XOR<TrendingTagUpdateManyMutationInput, TrendingTagUncheckedUpdateManyInput>
    /**
     * Filter which TrendingTags to update
     */
    where?: TrendingTagWhereInput
    /**
     * Limit how many TrendingTags to update.
     */
    limit?: number
  }

  /**
   * TrendingTag updateManyAndReturn
   */
  export type TrendingTagUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingTag
     */
    select?: TrendingTagSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingTag
     */
    omit?: TrendingTagOmit<ExtArgs> | null
    /**
     * The data used to update TrendingTags.
     */
    data: XOR<TrendingTagUpdateManyMutationInput, TrendingTagUncheckedUpdateManyInput>
    /**
     * Filter which TrendingTags to update
     */
    where?: TrendingTagWhereInput
    /**
     * Limit how many TrendingTags to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrendingTagIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TrendingTag upsert
   */
  export type TrendingTagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingTag
     */
    select?: TrendingTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingTag
     */
    omit?: TrendingTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrendingTagInclude<ExtArgs> | null
    /**
     * The filter to search for the TrendingTag to update in case it exists.
     */
    where: TrendingTagWhereUniqueInput
    /**
     * In case the TrendingTag found by the `where` argument doesn't exist, create a new TrendingTag with this data.
     */
    create: XOR<TrendingTagCreateInput, TrendingTagUncheckedCreateInput>
    /**
     * In case the TrendingTag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TrendingTagUpdateInput, TrendingTagUncheckedUpdateInput>
  }

  /**
   * TrendingTag delete
   */
  export type TrendingTagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingTag
     */
    select?: TrendingTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingTag
     */
    omit?: TrendingTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrendingTagInclude<ExtArgs> | null
    /**
     * Filter which TrendingTag to delete.
     */
    where: TrendingTagWhereUniqueInput
  }

  /**
   * TrendingTag deleteMany
   */
  export type TrendingTagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TrendingTags to delete
     */
    where?: TrendingTagWhereInput
    /**
     * Limit how many TrendingTags to delete.
     */
    limit?: number
  }

  /**
   * TrendingTag without action
   */
  export type TrendingTagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingTag
     */
    select?: TrendingTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingTag
     */
    omit?: TrendingTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrendingTagInclude<ExtArgs> | null
  }


  /**
   * Model TrendingItem
   */

  export type AggregateTrendingItem = {
    _count: TrendingItemCountAggregateOutputType | null
    _avg: TrendingItemAvgAggregateOutputType | null
    _sum: TrendingItemSumAggregateOutputType | null
    _min: TrendingItemMinAggregateOutputType | null
    _max: TrendingItemMaxAggregateOutputType | null
  }

  export type TrendingItemAvgAggregateOutputType = {
    rankScore: number | null
  }

  export type TrendingItemSumAggregateOutputType = {
    rankScore: number | null
  }

  export type TrendingItemMinAggregateOutputType = {
    id: string | null
    itemName: string | null
    rankScore: number | null
    period: $Enums.TrendPeriod | null
    calculationDate: Date | null
  }

  export type TrendingItemMaxAggregateOutputType = {
    id: string | null
    itemName: string | null
    rankScore: number | null
    period: $Enums.TrendPeriod | null
    calculationDate: Date | null
  }

  export type TrendingItemCountAggregateOutputType = {
    id: number
    itemName: number
    rankScore: number
    period: number
    calculationDate: number
    _all: number
  }


  export type TrendingItemAvgAggregateInputType = {
    rankScore?: true
  }

  export type TrendingItemSumAggregateInputType = {
    rankScore?: true
  }

  export type TrendingItemMinAggregateInputType = {
    id?: true
    itemName?: true
    rankScore?: true
    period?: true
    calculationDate?: true
  }

  export type TrendingItemMaxAggregateInputType = {
    id?: true
    itemName?: true
    rankScore?: true
    period?: true
    calculationDate?: true
  }

  export type TrendingItemCountAggregateInputType = {
    id?: true
    itemName?: true
    rankScore?: true
    period?: true
    calculationDate?: true
    _all?: true
  }

  export type TrendingItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TrendingItem to aggregate.
     */
    where?: TrendingItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrendingItems to fetch.
     */
    orderBy?: TrendingItemOrderByWithRelationInput | TrendingItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TrendingItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrendingItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrendingItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TrendingItems
    **/
    _count?: true | TrendingItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TrendingItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TrendingItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrendingItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrendingItemMaxAggregateInputType
  }

  export type GetTrendingItemAggregateType<T extends TrendingItemAggregateArgs> = {
        [P in keyof T & keyof AggregateTrendingItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrendingItem[P]>
      : GetScalarType<T[P], AggregateTrendingItem[P]>
  }




  export type TrendingItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrendingItemWhereInput
    orderBy?: TrendingItemOrderByWithAggregationInput | TrendingItemOrderByWithAggregationInput[]
    by: TrendingItemScalarFieldEnum[] | TrendingItemScalarFieldEnum
    having?: TrendingItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrendingItemCountAggregateInputType | true
    _avg?: TrendingItemAvgAggregateInputType
    _sum?: TrendingItemSumAggregateInputType
    _min?: TrendingItemMinAggregateInputType
    _max?: TrendingItemMaxAggregateInputType
  }

  export type TrendingItemGroupByOutputType = {
    id: string
    itemName: string
    rankScore: number
    period: $Enums.TrendPeriod
    calculationDate: Date
    _count: TrendingItemCountAggregateOutputType | null
    _avg: TrendingItemAvgAggregateOutputType | null
    _sum: TrendingItemSumAggregateOutputType | null
    _min: TrendingItemMinAggregateOutputType | null
    _max: TrendingItemMaxAggregateOutputType | null
  }

  type GetTrendingItemGroupByPayload<T extends TrendingItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TrendingItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrendingItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrendingItemGroupByOutputType[P]>
            : GetScalarType<T[P], TrendingItemGroupByOutputType[P]>
        }
      >
    >


  export type TrendingItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemName?: boolean
    rankScore?: boolean
    period?: boolean
    calculationDate?: boolean
  }, ExtArgs["result"]["trendingItem"]>

  export type TrendingItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemName?: boolean
    rankScore?: boolean
    period?: boolean
    calculationDate?: boolean
  }, ExtArgs["result"]["trendingItem"]>

  export type TrendingItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemName?: boolean
    rankScore?: boolean
    period?: boolean
    calculationDate?: boolean
  }, ExtArgs["result"]["trendingItem"]>

  export type TrendingItemSelectScalar = {
    id?: boolean
    itemName?: boolean
    rankScore?: boolean
    period?: boolean
    calculationDate?: boolean
  }

  export type TrendingItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "itemName" | "rankScore" | "period" | "calculationDate", ExtArgs["result"]["trendingItem"]>

  export type $TrendingItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TrendingItem"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      itemName: string
      rankScore: number
      period: $Enums.TrendPeriod
      calculationDate: Date
    }, ExtArgs["result"]["trendingItem"]>
    composites: {}
  }

  type TrendingItemGetPayload<S extends boolean | null | undefined | TrendingItemDefaultArgs> = $Result.GetResult<Prisma.$TrendingItemPayload, S>

  type TrendingItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TrendingItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TrendingItemCountAggregateInputType | true
    }

  export interface TrendingItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TrendingItem'], meta: { name: 'TrendingItem' } }
    /**
     * Find zero or one TrendingItem that matches the filter.
     * @param {TrendingItemFindUniqueArgs} args - Arguments to find a TrendingItem
     * @example
     * // Get one TrendingItem
     * const trendingItem = await prisma.trendingItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TrendingItemFindUniqueArgs>(args: SelectSubset<T, TrendingItemFindUniqueArgs<ExtArgs>>): Prisma__TrendingItemClient<$Result.GetResult<Prisma.$TrendingItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TrendingItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TrendingItemFindUniqueOrThrowArgs} args - Arguments to find a TrendingItem
     * @example
     * // Get one TrendingItem
     * const trendingItem = await prisma.trendingItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TrendingItemFindUniqueOrThrowArgs>(args: SelectSubset<T, TrendingItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TrendingItemClient<$Result.GetResult<Prisma.$TrendingItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TrendingItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendingItemFindFirstArgs} args - Arguments to find a TrendingItem
     * @example
     * // Get one TrendingItem
     * const trendingItem = await prisma.trendingItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TrendingItemFindFirstArgs>(args?: SelectSubset<T, TrendingItemFindFirstArgs<ExtArgs>>): Prisma__TrendingItemClient<$Result.GetResult<Prisma.$TrendingItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TrendingItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendingItemFindFirstOrThrowArgs} args - Arguments to find a TrendingItem
     * @example
     * // Get one TrendingItem
     * const trendingItem = await prisma.trendingItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TrendingItemFindFirstOrThrowArgs>(args?: SelectSubset<T, TrendingItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__TrendingItemClient<$Result.GetResult<Prisma.$TrendingItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TrendingItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendingItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TrendingItems
     * const trendingItems = await prisma.trendingItem.findMany()
     * 
     * // Get first 10 TrendingItems
     * const trendingItems = await prisma.trendingItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trendingItemWithIdOnly = await prisma.trendingItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TrendingItemFindManyArgs>(args?: SelectSubset<T, TrendingItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrendingItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TrendingItem.
     * @param {TrendingItemCreateArgs} args - Arguments to create a TrendingItem.
     * @example
     * // Create one TrendingItem
     * const TrendingItem = await prisma.trendingItem.create({
     *   data: {
     *     // ... data to create a TrendingItem
     *   }
     * })
     * 
     */
    create<T extends TrendingItemCreateArgs>(args: SelectSubset<T, TrendingItemCreateArgs<ExtArgs>>): Prisma__TrendingItemClient<$Result.GetResult<Prisma.$TrendingItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TrendingItems.
     * @param {TrendingItemCreateManyArgs} args - Arguments to create many TrendingItems.
     * @example
     * // Create many TrendingItems
     * const trendingItem = await prisma.trendingItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TrendingItemCreateManyArgs>(args?: SelectSubset<T, TrendingItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TrendingItems and returns the data saved in the database.
     * @param {TrendingItemCreateManyAndReturnArgs} args - Arguments to create many TrendingItems.
     * @example
     * // Create many TrendingItems
     * const trendingItem = await prisma.trendingItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TrendingItems and only return the `id`
     * const trendingItemWithIdOnly = await prisma.trendingItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TrendingItemCreateManyAndReturnArgs>(args?: SelectSubset<T, TrendingItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrendingItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TrendingItem.
     * @param {TrendingItemDeleteArgs} args - Arguments to delete one TrendingItem.
     * @example
     * // Delete one TrendingItem
     * const TrendingItem = await prisma.trendingItem.delete({
     *   where: {
     *     // ... filter to delete one TrendingItem
     *   }
     * })
     * 
     */
    delete<T extends TrendingItemDeleteArgs>(args: SelectSubset<T, TrendingItemDeleteArgs<ExtArgs>>): Prisma__TrendingItemClient<$Result.GetResult<Prisma.$TrendingItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TrendingItem.
     * @param {TrendingItemUpdateArgs} args - Arguments to update one TrendingItem.
     * @example
     * // Update one TrendingItem
     * const trendingItem = await prisma.trendingItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TrendingItemUpdateArgs>(args: SelectSubset<T, TrendingItemUpdateArgs<ExtArgs>>): Prisma__TrendingItemClient<$Result.GetResult<Prisma.$TrendingItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TrendingItems.
     * @param {TrendingItemDeleteManyArgs} args - Arguments to filter TrendingItems to delete.
     * @example
     * // Delete a few TrendingItems
     * const { count } = await prisma.trendingItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TrendingItemDeleteManyArgs>(args?: SelectSubset<T, TrendingItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TrendingItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendingItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TrendingItems
     * const trendingItem = await prisma.trendingItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TrendingItemUpdateManyArgs>(args: SelectSubset<T, TrendingItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TrendingItems and returns the data updated in the database.
     * @param {TrendingItemUpdateManyAndReturnArgs} args - Arguments to update many TrendingItems.
     * @example
     * // Update many TrendingItems
     * const trendingItem = await prisma.trendingItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TrendingItems and only return the `id`
     * const trendingItemWithIdOnly = await prisma.trendingItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TrendingItemUpdateManyAndReturnArgs>(args: SelectSubset<T, TrendingItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrendingItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TrendingItem.
     * @param {TrendingItemUpsertArgs} args - Arguments to update or create a TrendingItem.
     * @example
     * // Update or create a TrendingItem
     * const trendingItem = await prisma.trendingItem.upsert({
     *   create: {
     *     // ... data to create a TrendingItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TrendingItem we want to update
     *   }
     * })
     */
    upsert<T extends TrendingItemUpsertArgs>(args: SelectSubset<T, TrendingItemUpsertArgs<ExtArgs>>): Prisma__TrendingItemClient<$Result.GetResult<Prisma.$TrendingItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TrendingItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendingItemCountArgs} args - Arguments to filter TrendingItems to count.
     * @example
     * // Count the number of TrendingItems
     * const count = await prisma.trendingItem.count({
     *   where: {
     *     // ... the filter for the TrendingItems we want to count
     *   }
     * })
    **/
    count<T extends TrendingItemCountArgs>(
      args?: Subset<T, TrendingItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrendingItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TrendingItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendingItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrendingItemAggregateArgs>(args: Subset<T, TrendingItemAggregateArgs>): Prisma.PrismaPromise<GetTrendingItemAggregateType<T>>

    /**
     * Group by TrendingItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendingItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TrendingItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TrendingItemGroupByArgs['orderBy'] }
        : { orderBy?: TrendingItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TrendingItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrendingItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TrendingItem model
   */
  readonly fields: TrendingItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TrendingItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TrendingItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TrendingItem model
   */
  interface TrendingItemFieldRefs {
    readonly id: FieldRef<"TrendingItem", 'String'>
    readonly itemName: FieldRef<"TrendingItem", 'String'>
    readonly rankScore: FieldRef<"TrendingItem", 'Float'>
    readonly period: FieldRef<"TrendingItem", 'TrendPeriod'>
    readonly calculationDate: FieldRef<"TrendingItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TrendingItem findUnique
   */
  export type TrendingItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingItem
     */
    select?: TrendingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingItem
     */
    omit?: TrendingItemOmit<ExtArgs> | null
    /**
     * Filter, which TrendingItem to fetch.
     */
    where: TrendingItemWhereUniqueInput
  }

  /**
   * TrendingItem findUniqueOrThrow
   */
  export type TrendingItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingItem
     */
    select?: TrendingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingItem
     */
    omit?: TrendingItemOmit<ExtArgs> | null
    /**
     * Filter, which TrendingItem to fetch.
     */
    where: TrendingItemWhereUniqueInput
  }

  /**
   * TrendingItem findFirst
   */
  export type TrendingItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingItem
     */
    select?: TrendingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingItem
     */
    omit?: TrendingItemOmit<ExtArgs> | null
    /**
     * Filter, which TrendingItem to fetch.
     */
    where?: TrendingItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrendingItems to fetch.
     */
    orderBy?: TrendingItemOrderByWithRelationInput | TrendingItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TrendingItems.
     */
    cursor?: TrendingItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrendingItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrendingItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TrendingItems.
     */
    distinct?: TrendingItemScalarFieldEnum | TrendingItemScalarFieldEnum[]
  }

  /**
   * TrendingItem findFirstOrThrow
   */
  export type TrendingItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingItem
     */
    select?: TrendingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingItem
     */
    omit?: TrendingItemOmit<ExtArgs> | null
    /**
     * Filter, which TrendingItem to fetch.
     */
    where?: TrendingItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrendingItems to fetch.
     */
    orderBy?: TrendingItemOrderByWithRelationInput | TrendingItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TrendingItems.
     */
    cursor?: TrendingItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrendingItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrendingItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TrendingItems.
     */
    distinct?: TrendingItemScalarFieldEnum | TrendingItemScalarFieldEnum[]
  }

  /**
   * TrendingItem findMany
   */
  export type TrendingItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingItem
     */
    select?: TrendingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingItem
     */
    omit?: TrendingItemOmit<ExtArgs> | null
    /**
     * Filter, which TrendingItems to fetch.
     */
    where?: TrendingItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrendingItems to fetch.
     */
    orderBy?: TrendingItemOrderByWithRelationInput | TrendingItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TrendingItems.
     */
    cursor?: TrendingItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrendingItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrendingItems.
     */
    skip?: number
    distinct?: TrendingItemScalarFieldEnum | TrendingItemScalarFieldEnum[]
  }

  /**
   * TrendingItem create
   */
  export type TrendingItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingItem
     */
    select?: TrendingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingItem
     */
    omit?: TrendingItemOmit<ExtArgs> | null
    /**
     * The data needed to create a TrendingItem.
     */
    data: XOR<TrendingItemCreateInput, TrendingItemUncheckedCreateInput>
  }

  /**
   * TrendingItem createMany
   */
  export type TrendingItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TrendingItems.
     */
    data: TrendingItemCreateManyInput | TrendingItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TrendingItem createManyAndReturn
   */
  export type TrendingItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingItem
     */
    select?: TrendingItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingItem
     */
    omit?: TrendingItemOmit<ExtArgs> | null
    /**
     * The data used to create many TrendingItems.
     */
    data: TrendingItemCreateManyInput | TrendingItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TrendingItem update
   */
  export type TrendingItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingItem
     */
    select?: TrendingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingItem
     */
    omit?: TrendingItemOmit<ExtArgs> | null
    /**
     * The data needed to update a TrendingItem.
     */
    data: XOR<TrendingItemUpdateInput, TrendingItemUncheckedUpdateInput>
    /**
     * Choose, which TrendingItem to update.
     */
    where: TrendingItemWhereUniqueInput
  }

  /**
   * TrendingItem updateMany
   */
  export type TrendingItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TrendingItems.
     */
    data: XOR<TrendingItemUpdateManyMutationInput, TrendingItemUncheckedUpdateManyInput>
    /**
     * Filter which TrendingItems to update
     */
    where?: TrendingItemWhereInput
    /**
     * Limit how many TrendingItems to update.
     */
    limit?: number
  }

  /**
   * TrendingItem updateManyAndReturn
   */
  export type TrendingItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingItem
     */
    select?: TrendingItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingItem
     */
    omit?: TrendingItemOmit<ExtArgs> | null
    /**
     * The data used to update TrendingItems.
     */
    data: XOR<TrendingItemUpdateManyMutationInput, TrendingItemUncheckedUpdateManyInput>
    /**
     * Filter which TrendingItems to update
     */
    where?: TrendingItemWhereInput
    /**
     * Limit how many TrendingItems to update.
     */
    limit?: number
  }

  /**
   * TrendingItem upsert
   */
  export type TrendingItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingItem
     */
    select?: TrendingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingItem
     */
    omit?: TrendingItemOmit<ExtArgs> | null
    /**
     * The filter to search for the TrendingItem to update in case it exists.
     */
    where: TrendingItemWhereUniqueInput
    /**
     * In case the TrendingItem found by the `where` argument doesn't exist, create a new TrendingItem with this data.
     */
    create: XOR<TrendingItemCreateInput, TrendingItemUncheckedCreateInput>
    /**
     * In case the TrendingItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TrendingItemUpdateInput, TrendingItemUncheckedUpdateInput>
  }

  /**
   * TrendingItem delete
   */
  export type TrendingItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingItem
     */
    select?: TrendingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingItem
     */
    omit?: TrendingItemOmit<ExtArgs> | null
    /**
     * Filter which TrendingItem to delete.
     */
    where: TrendingItemWhereUniqueInput
  }

  /**
   * TrendingItem deleteMany
   */
  export type TrendingItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TrendingItems to delete
     */
    where?: TrendingItemWhereInput
    /**
     * Limit how many TrendingItems to delete.
     */
    limit?: number
  }

  /**
   * TrendingItem without action
   */
  export type TrendingItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingItem
     */
    select?: TrendingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingItem
     */
    omit?: TrendingItemOmit<ExtArgs> | null
  }


  /**
   * Model AverageItemRank
   */

  export type AggregateAverageItemRank = {
    _count: AverageItemRankCountAggregateOutputType | null
    _avg: AverageItemRankAvgAggregateOutputType | null
    _sum: AverageItemRankSumAggregateOutputType | null
    _min: AverageItemRankMinAggregateOutputType | null
    _max: AverageItemRankMaxAggregateOutputType | null
  }

  export type AverageItemRankAvgAggregateOutputType = {
    avgRank: number | null
    count: number | null
  }

  export type AverageItemRankSumAggregateOutputType = {
    avgRank: number | null
    count: number | null
  }

  export type AverageItemRankMinAggregateOutputType = {
    id: string | null
    subject: string | null
    itemName: string | null
    avgRank: number | null
    calculationDate: Date | null
    count: number | null
  }

  export type AverageItemRankMaxAggregateOutputType = {
    id: string | null
    subject: string | null
    itemName: string | null
    avgRank: number | null
    calculationDate: Date | null
    count: number | null
  }

  export type AverageItemRankCountAggregateOutputType = {
    id: number
    subject: number
    itemName: number
    avgRank: number
    calculationDate: number
    count: number
    _all: number
  }


  export type AverageItemRankAvgAggregateInputType = {
    avgRank?: true
    count?: true
  }

  export type AverageItemRankSumAggregateInputType = {
    avgRank?: true
    count?: true
  }

  export type AverageItemRankMinAggregateInputType = {
    id?: true
    subject?: true
    itemName?: true
    avgRank?: true
    calculationDate?: true
    count?: true
  }

  export type AverageItemRankMaxAggregateInputType = {
    id?: true
    subject?: true
    itemName?: true
    avgRank?: true
    calculationDate?: true
    count?: true
  }

  export type AverageItemRankCountAggregateInputType = {
    id?: true
    subject?: true
    itemName?: true
    avgRank?: true
    calculationDate?: true
    count?: true
    _all?: true
  }

  export type AverageItemRankAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AverageItemRank to aggregate.
     */
    where?: AverageItemRankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AverageItemRanks to fetch.
     */
    orderBy?: AverageItemRankOrderByWithRelationInput | AverageItemRankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AverageItemRankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AverageItemRanks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AverageItemRanks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AverageItemRanks
    **/
    _count?: true | AverageItemRankCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AverageItemRankAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AverageItemRankSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AverageItemRankMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AverageItemRankMaxAggregateInputType
  }

  export type GetAverageItemRankAggregateType<T extends AverageItemRankAggregateArgs> = {
        [P in keyof T & keyof AggregateAverageItemRank]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAverageItemRank[P]>
      : GetScalarType<T[P], AggregateAverageItemRank[P]>
  }




  export type AverageItemRankGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AverageItemRankWhereInput
    orderBy?: AverageItemRankOrderByWithAggregationInput | AverageItemRankOrderByWithAggregationInput[]
    by: AverageItemRankScalarFieldEnum[] | AverageItemRankScalarFieldEnum
    having?: AverageItemRankScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AverageItemRankCountAggregateInputType | true
    _avg?: AverageItemRankAvgAggregateInputType
    _sum?: AverageItemRankSumAggregateInputType
    _min?: AverageItemRankMinAggregateInputType
    _max?: AverageItemRankMaxAggregateInputType
  }

  export type AverageItemRankGroupByOutputType = {
    id: string
    subject: string
    itemName: string
    avgRank: number
    calculationDate: Date
    count: number
    _count: AverageItemRankCountAggregateOutputType | null
    _avg: AverageItemRankAvgAggregateOutputType | null
    _sum: AverageItemRankSumAggregateOutputType | null
    _min: AverageItemRankMinAggregateOutputType | null
    _max: AverageItemRankMaxAggregateOutputType | null
  }

  type GetAverageItemRankGroupByPayload<T extends AverageItemRankGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AverageItemRankGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AverageItemRankGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AverageItemRankGroupByOutputType[P]>
            : GetScalarType<T[P], AverageItemRankGroupByOutputType[P]>
        }
      >
    >


  export type AverageItemRankSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subject?: boolean
    itemName?: boolean
    avgRank?: boolean
    calculationDate?: boolean
    count?: boolean
  }, ExtArgs["result"]["averageItemRank"]>

  export type AverageItemRankSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subject?: boolean
    itemName?: boolean
    avgRank?: boolean
    calculationDate?: boolean
    count?: boolean
  }, ExtArgs["result"]["averageItemRank"]>

  export type AverageItemRankSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subject?: boolean
    itemName?: boolean
    avgRank?: boolean
    calculationDate?: boolean
    count?: boolean
  }, ExtArgs["result"]["averageItemRank"]>

  export type AverageItemRankSelectScalar = {
    id?: boolean
    subject?: boolean
    itemName?: boolean
    avgRank?: boolean
    calculationDate?: boolean
    count?: boolean
  }

  export type AverageItemRankOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "subject" | "itemName" | "avgRank" | "calculationDate" | "count", ExtArgs["result"]["averageItemRank"]>

  export type $AverageItemRankPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AverageItemRank"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      subject: string
      itemName: string
      avgRank: number
      calculationDate: Date
      count: number
    }, ExtArgs["result"]["averageItemRank"]>
    composites: {}
  }

  type AverageItemRankGetPayload<S extends boolean | null | undefined | AverageItemRankDefaultArgs> = $Result.GetResult<Prisma.$AverageItemRankPayload, S>

  type AverageItemRankCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AverageItemRankFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AverageItemRankCountAggregateInputType | true
    }

  export interface AverageItemRankDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AverageItemRank'], meta: { name: 'AverageItemRank' } }
    /**
     * Find zero or one AverageItemRank that matches the filter.
     * @param {AverageItemRankFindUniqueArgs} args - Arguments to find a AverageItemRank
     * @example
     * // Get one AverageItemRank
     * const averageItemRank = await prisma.averageItemRank.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AverageItemRankFindUniqueArgs>(args: SelectSubset<T, AverageItemRankFindUniqueArgs<ExtArgs>>): Prisma__AverageItemRankClient<$Result.GetResult<Prisma.$AverageItemRankPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AverageItemRank that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AverageItemRankFindUniqueOrThrowArgs} args - Arguments to find a AverageItemRank
     * @example
     * // Get one AverageItemRank
     * const averageItemRank = await prisma.averageItemRank.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AverageItemRankFindUniqueOrThrowArgs>(args: SelectSubset<T, AverageItemRankFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AverageItemRankClient<$Result.GetResult<Prisma.$AverageItemRankPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AverageItemRank that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AverageItemRankFindFirstArgs} args - Arguments to find a AverageItemRank
     * @example
     * // Get one AverageItemRank
     * const averageItemRank = await prisma.averageItemRank.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AverageItemRankFindFirstArgs>(args?: SelectSubset<T, AverageItemRankFindFirstArgs<ExtArgs>>): Prisma__AverageItemRankClient<$Result.GetResult<Prisma.$AverageItemRankPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AverageItemRank that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AverageItemRankFindFirstOrThrowArgs} args - Arguments to find a AverageItemRank
     * @example
     * // Get one AverageItemRank
     * const averageItemRank = await prisma.averageItemRank.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AverageItemRankFindFirstOrThrowArgs>(args?: SelectSubset<T, AverageItemRankFindFirstOrThrowArgs<ExtArgs>>): Prisma__AverageItemRankClient<$Result.GetResult<Prisma.$AverageItemRankPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AverageItemRanks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AverageItemRankFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AverageItemRanks
     * const averageItemRanks = await prisma.averageItemRank.findMany()
     * 
     * // Get first 10 AverageItemRanks
     * const averageItemRanks = await prisma.averageItemRank.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const averageItemRankWithIdOnly = await prisma.averageItemRank.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AverageItemRankFindManyArgs>(args?: SelectSubset<T, AverageItemRankFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AverageItemRankPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AverageItemRank.
     * @param {AverageItemRankCreateArgs} args - Arguments to create a AverageItemRank.
     * @example
     * // Create one AverageItemRank
     * const AverageItemRank = await prisma.averageItemRank.create({
     *   data: {
     *     // ... data to create a AverageItemRank
     *   }
     * })
     * 
     */
    create<T extends AverageItemRankCreateArgs>(args: SelectSubset<T, AverageItemRankCreateArgs<ExtArgs>>): Prisma__AverageItemRankClient<$Result.GetResult<Prisma.$AverageItemRankPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AverageItemRanks.
     * @param {AverageItemRankCreateManyArgs} args - Arguments to create many AverageItemRanks.
     * @example
     * // Create many AverageItemRanks
     * const averageItemRank = await prisma.averageItemRank.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AverageItemRankCreateManyArgs>(args?: SelectSubset<T, AverageItemRankCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AverageItemRanks and returns the data saved in the database.
     * @param {AverageItemRankCreateManyAndReturnArgs} args - Arguments to create many AverageItemRanks.
     * @example
     * // Create many AverageItemRanks
     * const averageItemRank = await prisma.averageItemRank.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AverageItemRanks and only return the `id`
     * const averageItemRankWithIdOnly = await prisma.averageItemRank.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AverageItemRankCreateManyAndReturnArgs>(args?: SelectSubset<T, AverageItemRankCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AverageItemRankPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AverageItemRank.
     * @param {AverageItemRankDeleteArgs} args - Arguments to delete one AverageItemRank.
     * @example
     * // Delete one AverageItemRank
     * const AverageItemRank = await prisma.averageItemRank.delete({
     *   where: {
     *     // ... filter to delete one AverageItemRank
     *   }
     * })
     * 
     */
    delete<T extends AverageItemRankDeleteArgs>(args: SelectSubset<T, AverageItemRankDeleteArgs<ExtArgs>>): Prisma__AverageItemRankClient<$Result.GetResult<Prisma.$AverageItemRankPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AverageItemRank.
     * @param {AverageItemRankUpdateArgs} args - Arguments to update one AverageItemRank.
     * @example
     * // Update one AverageItemRank
     * const averageItemRank = await prisma.averageItemRank.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AverageItemRankUpdateArgs>(args: SelectSubset<T, AverageItemRankUpdateArgs<ExtArgs>>): Prisma__AverageItemRankClient<$Result.GetResult<Prisma.$AverageItemRankPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AverageItemRanks.
     * @param {AverageItemRankDeleteManyArgs} args - Arguments to filter AverageItemRanks to delete.
     * @example
     * // Delete a few AverageItemRanks
     * const { count } = await prisma.averageItemRank.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AverageItemRankDeleteManyArgs>(args?: SelectSubset<T, AverageItemRankDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AverageItemRanks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AverageItemRankUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AverageItemRanks
     * const averageItemRank = await prisma.averageItemRank.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AverageItemRankUpdateManyArgs>(args: SelectSubset<T, AverageItemRankUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AverageItemRanks and returns the data updated in the database.
     * @param {AverageItemRankUpdateManyAndReturnArgs} args - Arguments to update many AverageItemRanks.
     * @example
     * // Update many AverageItemRanks
     * const averageItemRank = await prisma.averageItemRank.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AverageItemRanks and only return the `id`
     * const averageItemRankWithIdOnly = await prisma.averageItemRank.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AverageItemRankUpdateManyAndReturnArgs>(args: SelectSubset<T, AverageItemRankUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AverageItemRankPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AverageItemRank.
     * @param {AverageItemRankUpsertArgs} args - Arguments to update or create a AverageItemRank.
     * @example
     * // Update or create a AverageItemRank
     * const averageItemRank = await prisma.averageItemRank.upsert({
     *   create: {
     *     // ... data to create a AverageItemRank
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AverageItemRank we want to update
     *   }
     * })
     */
    upsert<T extends AverageItemRankUpsertArgs>(args: SelectSubset<T, AverageItemRankUpsertArgs<ExtArgs>>): Prisma__AverageItemRankClient<$Result.GetResult<Prisma.$AverageItemRankPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AverageItemRanks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AverageItemRankCountArgs} args - Arguments to filter AverageItemRanks to count.
     * @example
     * // Count the number of AverageItemRanks
     * const count = await prisma.averageItemRank.count({
     *   where: {
     *     // ... the filter for the AverageItemRanks we want to count
     *   }
     * })
    **/
    count<T extends AverageItemRankCountArgs>(
      args?: Subset<T, AverageItemRankCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AverageItemRankCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AverageItemRank.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AverageItemRankAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AverageItemRankAggregateArgs>(args: Subset<T, AverageItemRankAggregateArgs>): Prisma.PrismaPromise<GetAverageItemRankAggregateType<T>>

    /**
     * Group by AverageItemRank.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AverageItemRankGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AverageItemRankGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AverageItemRankGroupByArgs['orderBy'] }
        : { orderBy?: AverageItemRankGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AverageItemRankGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAverageItemRankGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AverageItemRank model
   */
  readonly fields: AverageItemRankFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AverageItemRank.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AverageItemRankClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AverageItemRank model
   */
  interface AverageItemRankFieldRefs {
    readonly id: FieldRef<"AverageItemRank", 'String'>
    readonly subject: FieldRef<"AverageItemRank", 'String'>
    readonly itemName: FieldRef<"AverageItemRank", 'String'>
    readonly avgRank: FieldRef<"AverageItemRank", 'Float'>
    readonly calculationDate: FieldRef<"AverageItemRank", 'DateTime'>
    readonly count: FieldRef<"AverageItemRank", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * AverageItemRank findUnique
   */
  export type AverageItemRankFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AverageItemRank
     */
    select?: AverageItemRankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AverageItemRank
     */
    omit?: AverageItemRankOmit<ExtArgs> | null
    /**
     * Filter, which AverageItemRank to fetch.
     */
    where: AverageItemRankWhereUniqueInput
  }

  /**
   * AverageItemRank findUniqueOrThrow
   */
  export type AverageItemRankFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AverageItemRank
     */
    select?: AverageItemRankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AverageItemRank
     */
    omit?: AverageItemRankOmit<ExtArgs> | null
    /**
     * Filter, which AverageItemRank to fetch.
     */
    where: AverageItemRankWhereUniqueInput
  }

  /**
   * AverageItemRank findFirst
   */
  export type AverageItemRankFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AverageItemRank
     */
    select?: AverageItemRankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AverageItemRank
     */
    omit?: AverageItemRankOmit<ExtArgs> | null
    /**
     * Filter, which AverageItemRank to fetch.
     */
    where?: AverageItemRankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AverageItemRanks to fetch.
     */
    orderBy?: AverageItemRankOrderByWithRelationInput | AverageItemRankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AverageItemRanks.
     */
    cursor?: AverageItemRankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AverageItemRanks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AverageItemRanks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AverageItemRanks.
     */
    distinct?: AverageItemRankScalarFieldEnum | AverageItemRankScalarFieldEnum[]
  }

  /**
   * AverageItemRank findFirstOrThrow
   */
  export type AverageItemRankFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AverageItemRank
     */
    select?: AverageItemRankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AverageItemRank
     */
    omit?: AverageItemRankOmit<ExtArgs> | null
    /**
     * Filter, which AverageItemRank to fetch.
     */
    where?: AverageItemRankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AverageItemRanks to fetch.
     */
    orderBy?: AverageItemRankOrderByWithRelationInput | AverageItemRankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AverageItemRanks.
     */
    cursor?: AverageItemRankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AverageItemRanks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AverageItemRanks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AverageItemRanks.
     */
    distinct?: AverageItemRankScalarFieldEnum | AverageItemRankScalarFieldEnum[]
  }

  /**
   * AverageItemRank findMany
   */
  export type AverageItemRankFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AverageItemRank
     */
    select?: AverageItemRankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AverageItemRank
     */
    omit?: AverageItemRankOmit<ExtArgs> | null
    /**
     * Filter, which AverageItemRanks to fetch.
     */
    where?: AverageItemRankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AverageItemRanks to fetch.
     */
    orderBy?: AverageItemRankOrderByWithRelationInput | AverageItemRankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AverageItemRanks.
     */
    cursor?: AverageItemRankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AverageItemRanks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AverageItemRanks.
     */
    skip?: number
    distinct?: AverageItemRankScalarFieldEnum | AverageItemRankScalarFieldEnum[]
  }

  /**
   * AverageItemRank create
   */
  export type AverageItemRankCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AverageItemRank
     */
    select?: AverageItemRankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AverageItemRank
     */
    omit?: AverageItemRankOmit<ExtArgs> | null
    /**
     * The data needed to create a AverageItemRank.
     */
    data: XOR<AverageItemRankCreateInput, AverageItemRankUncheckedCreateInput>
  }

  /**
   * AverageItemRank createMany
   */
  export type AverageItemRankCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AverageItemRanks.
     */
    data: AverageItemRankCreateManyInput | AverageItemRankCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AverageItemRank createManyAndReturn
   */
  export type AverageItemRankCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AverageItemRank
     */
    select?: AverageItemRankSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AverageItemRank
     */
    omit?: AverageItemRankOmit<ExtArgs> | null
    /**
     * The data used to create many AverageItemRanks.
     */
    data: AverageItemRankCreateManyInput | AverageItemRankCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AverageItemRank update
   */
  export type AverageItemRankUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AverageItemRank
     */
    select?: AverageItemRankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AverageItemRank
     */
    omit?: AverageItemRankOmit<ExtArgs> | null
    /**
     * The data needed to update a AverageItemRank.
     */
    data: XOR<AverageItemRankUpdateInput, AverageItemRankUncheckedUpdateInput>
    /**
     * Choose, which AverageItemRank to update.
     */
    where: AverageItemRankWhereUniqueInput
  }

  /**
   * AverageItemRank updateMany
   */
  export type AverageItemRankUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AverageItemRanks.
     */
    data: XOR<AverageItemRankUpdateManyMutationInput, AverageItemRankUncheckedUpdateManyInput>
    /**
     * Filter which AverageItemRanks to update
     */
    where?: AverageItemRankWhereInput
    /**
     * Limit how many AverageItemRanks to update.
     */
    limit?: number
  }

  /**
   * AverageItemRank updateManyAndReturn
   */
  export type AverageItemRankUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AverageItemRank
     */
    select?: AverageItemRankSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AverageItemRank
     */
    omit?: AverageItemRankOmit<ExtArgs> | null
    /**
     * The data used to update AverageItemRanks.
     */
    data: XOR<AverageItemRankUpdateManyMutationInput, AverageItemRankUncheckedUpdateManyInput>
    /**
     * Filter which AverageItemRanks to update
     */
    where?: AverageItemRankWhereInput
    /**
     * Limit how many AverageItemRanks to update.
     */
    limit?: number
  }

  /**
   * AverageItemRank upsert
   */
  export type AverageItemRankUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AverageItemRank
     */
    select?: AverageItemRankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AverageItemRank
     */
    omit?: AverageItemRankOmit<ExtArgs> | null
    /**
     * The filter to search for the AverageItemRank to update in case it exists.
     */
    where: AverageItemRankWhereUniqueInput
    /**
     * In case the AverageItemRank found by the `where` argument doesn't exist, create a new AverageItemRank with this data.
     */
    create: XOR<AverageItemRankCreateInput, AverageItemRankUncheckedCreateInput>
    /**
     * In case the AverageItemRank was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AverageItemRankUpdateInput, AverageItemRankUncheckedUpdateInput>
  }

  /**
   * AverageItemRank delete
   */
  export type AverageItemRankDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AverageItemRank
     */
    select?: AverageItemRankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AverageItemRank
     */
    omit?: AverageItemRankOmit<ExtArgs> | null
    /**
     * Filter which AverageItemRank to delete.
     */
    where: AverageItemRankWhereUniqueInput
  }

  /**
   * AverageItemRank deleteMany
   */
  export type AverageItemRankDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AverageItemRanks to delete
     */
    where?: AverageItemRankWhereInput
    /**
     * Limit how many AverageItemRanks to delete.
     */
    limit?: number
  }

  /**
   * AverageItemRank without action
   */
  export type AverageItemRankDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AverageItemRank
     */
    select?: AverageItemRankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AverageItemRank
     */
    omit?: AverageItemRankOmit<ExtArgs> | null
  }


  /**
   * Model AverageItemComment
   */

  export type AggregateAverageItemComment = {
    _count: AverageItemCommentCountAggregateOutputType | null
    _min: AverageItemCommentMinAggregateOutputType | null
    _max: AverageItemCommentMaxAggregateOutputType | null
  }

  export type AverageItemCommentMinAggregateOutputType = {
    id: string | null
    subject: string | null
    userId: string | null
    content: string | null
    createdAt: Date | null
  }

  export type AverageItemCommentMaxAggregateOutputType = {
    id: string | null
    subject: string | null
    userId: string | null
    content: string | null
    createdAt: Date | null
  }

  export type AverageItemCommentCountAggregateOutputType = {
    id: number
    subject: number
    userId: number
    content: number
    createdAt: number
    _all: number
  }


  export type AverageItemCommentMinAggregateInputType = {
    id?: true
    subject?: true
    userId?: true
    content?: true
    createdAt?: true
  }

  export type AverageItemCommentMaxAggregateInputType = {
    id?: true
    subject?: true
    userId?: true
    content?: true
    createdAt?: true
  }

  export type AverageItemCommentCountAggregateInputType = {
    id?: true
    subject?: true
    userId?: true
    content?: true
    createdAt?: true
    _all?: true
  }

  export type AverageItemCommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AverageItemComment to aggregate.
     */
    where?: AverageItemCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AverageItemComments to fetch.
     */
    orderBy?: AverageItemCommentOrderByWithRelationInput | AverageItemCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AverageItemCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AverageItemComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AverageItemComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AverageItemComments
    **/
    _count?: true | AverageItemCommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AverageItemCommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AverageItemCommentMaxAggregateInputType
  }

  export type GetAverageItemCommentAggregateType<T extends AverageItemCommentAggregateArgs> = {
        [P in keyof T & keyof AggregateAverageItemComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAverageItemComment[P]>
      : GetScalarType<T[P], AggregateAverageItemComment[P]>
  }




  export type AverageItemCommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AverageItemCommentWhereInput
    orderBy?: AverageItemCommentOrderByWithAggregationInput | AverageItemCommentOrderByWithAggregationInput[]
    by: AverageItemCommentScalarFieldEnum[] | AverageItemCommentScalarFieldEnum
    having?: AverageItemCommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AverageItemCommentCountAggregateInputType | true
    _min?: AverageItemCommentMinAggregateInputType
    _max?: AverageItemCommentMaxAggregateInputType
  }

  export type AverageItemCommentGroupByOutputType = {
    id: string
    subject: string
    userId: string
    content: string
    createdAt: Date
    _count: AverageItemCommentCountAggregateOutputType | null
    _min: AverageItemCommentMinAggregateOutputType | null
    _max: AverageItemCommentMaxAggregateOutputType | null
  }

  type GetAverageItemCommentGroupByPayload<T extends AverageItemCommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AverageItemCommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AverageItemCommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AverageItemCommentGroupByOutputType[P]>
            : GetScalarType<T[P], AverageItemCommentGroupByOutputType[P]>
        }
      >
    >


  export type AverageItemCommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subject?: boolean
    userId?: boolean
    content?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["averageItemComment"]>

  export type AverageItemCommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subject?: boolean
    userId?: boolean
    content?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["averageItemComment"]>

  export type AverageItemCommentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subject?: boolean
    userId?: boolean
    content?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["averageItemComment"]>

  export type AverageItemCommentSelectScalar = {
    id?: boolean
    subject?: boolean
    userId?: boolean
    content?: boolean
    createdAt?: boolean
  }

  export type AverageItemCommentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "subject" | "userId" | "content" | "createdAt", ExtArgs["result"]["averageItemComment"]>
  export type AverageItemCommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AverageItemCommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AverageItemCommentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AverageItemCommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AverageItemComment"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      subject: string
      userId: string
      content: string
      createdAt: Date
    }, ExtArgs["result"]["averageItemComment"]>
    composites: {}
  }

  type AverageItemCommentGetPayload<S extends boolean | null | undefined | AverageItemCommentDefaultArgs> = $Result.GetResult<Prisma.$AverageItemCommentPayload, S>

  type AverageItemCommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AverageItemCommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AverageItemCommentCountAggregateInputType | true
    }

  export interface AverageItemCommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AverageItemComment'], meta: { name: 'AverageItemComment' } }
    /**
     * Find zero or one AverageItemComment that matches the filter.
     * @param {AverageItemCommentFindUniqueArgs} args - Arguments to find a AverageItemComment
     * @example
     * // Get one AverageItemComment
     * const averageItemComment = await prisma.averageItemComment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AverageItemCommentFindUniqueArgs>(args: SelectSubset<T, AverageItemCommentFindUniqueArgs<ExtArgs>>): Prisma__AverageItemCommentClient<$Result.GetResult<Prisma.$AverageItemCommentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AverageItemComment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AverageItemCommentFindUniqueOrThrowArgs} args - Arguments to find a AverageItemComment
     * @example
     * // Get one AverageItemComment
     * const averageItemComment = await prisma.averageItemComment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AverageItemCommentFindUniqueOrThrowArgs>(args: SelectSubset<T, AverageItemCommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AverageItemCommentClient<$Result.GetResult<Prisma.$AverageItemCommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AverageItemComment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AverageItemCommentFindFirstArgs} args - Arguments to find a AverageItemComment
     * @example
     * // Get one AverageItemComment
     * const averageItemComment = await prisma.averageItemComment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AverageItemCommentFindFirstArgs>(args?: SelectSubset<T, AverageItemCommentFindFirstArgs<ExtArgs>>): Prisma__AverageItemCommentClient<$Result.GetResult<Prisma.$AverageItemCommentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AverageItemComment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AverageItemCommentFindFirstOrThrowArgs} args - Arguments to find a AverageItemComment
     * @example
     * // Get one AverageItemComment
     * const averageItemComment = await prisma.averageItemComment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AverageItemCommentFindFirstOrThrowArgs>(args?: SelectSubset<T, AverageItemCommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AverageItemCommentClient<$Result.GetResult<Prisma.$AverageItemCommentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AverageItemComments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AverageItemCommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AverageItemComments
     * const averageItemComments = await prisma.averageItemComment.findMany()
     * 
     * // Get first 10 AverageItemComments
     * const averageItemComments = await prisma.averageItemComment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const averageItemCommentWithIdOnly = await prisma.averageItemComment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AverageItemCommentFindManyArgs>(args?: SelectSubset<T, AverageItemCommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AverageItemCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AverageItemComment.
     * @param {AverageItemCommentCreateArgs} args - Arguments to create a AverageItemComment.
     * @example
     * // Create one AverageItemComment
     * const AverageItemComment = await prisma.averageItemComment.create({
     *   data: {
     *     // ... data to create a AverageItemComment
     *   }
     * })
     * 
     */
    create<T extends AverageItemCommentCreateArgs>(args: SelectSubset<T, AverageItemCommentCreateArgs<ExtArgs>>): Prisma__AverageItemCommentClient<$Result.GetResult<Prisma.$AverageItemCommentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AverageItemComments.
     * @param {AverageItemCommentCreateManyArgs} args - Arguments to create many AverageItemComments.
     * @example
     * // Create many AverageItemComments
     * const averageItemComment = await prisma.averageItemComment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AverageItemCommentCreateManyArgs>(args?: SelectSubset<T, AverageItemCommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AverageItemComments and returns the data saved in the database.
     * @param {AverageItemCommentCreateManyAndReturnArgs} args - Arguments to create many AverageItemComments.
     * @example
     * // Create many AverageItemComments
     * const averageItemComment = await prisma.averageItemComment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AverageItemComments and only return the `id`
     * const averageItemCommentWithIdOnly = await prisma.averageItemComment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AverageItemCommentCreateManyAndReturnArgs>(args?: SelectSubset<T, AverageItemCommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AverageItemCommentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AverageItemComment.
     * @param {AverageItemCommentDeleteArgs} args - Arguments to delete one AverageItemComment.
     * @example
     * // Delete one AverageItemComment
     * const AverageItemComment = await prisma.averageItemComment.delete({
     *   where: {
     *     // ... filter to delete one AverageItemComment
     *   }
     * })
     * 
     */
    delete<T extends AverageItemCommentDeleteArgs>(args: SelectSubset<T, AverageItemCommentDeleteArgs<ExtArgs>>): Prisma__AverageItemCommentClient<$Result.GetResult<Prisma.$AverageItemCommentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AverageItemComment.
     * @param {AverageItemCommentUpdateArgs} args - Arguments to update one AverageItemComment.
     * @example
     * // Update one AverageItemComment
     * const averageItemComment = await prisma.averageItemComment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AverageItemCommentUpdateArgs>(args: SelectSubset<T, AverageItemCommentUpdateArgs<ExtArgs>>): Prisma__AverageItemCommentClient<$Result.GetResult<Prisma.$AverageItemCommentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AverageItemComments.
     * @param {AverageItemCommentDeleteManyArgs} args - Arguments to filter AverageItemComments to delete.
     * @example
     * // Delete a few AverageItemComments
     * const { count } = await prisma.averageItemComment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AverageItemCommentDeleteManyArgs>(args?: SelectSubset<T, AverageItemCommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AverageItemComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AverageItemCommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AverageItemComments
     * const averageItemComment = await prisma.averageItemComment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AverageItemCommentUpdateManyArgs>(args: SelectSubset<T, AverageItemCommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AverageItemComments and returns the data updated in the database.
     * @param {AverageItemCommentUpdateManyAndReturnArgs} args - Arguments to update many AverageItemComments.
     * @example
     * // Update many AverageItemComments
     * const averageItemComment = await prisma.averageItemComment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AverageItemComments and only return the `id`
     * const averageItemCommentWithIdOnly = await prisma.averageItemComment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AverageItemCommentUpdateManyAndReturnArgs>(args: SelectSubset<T, AverageItemCommentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AverageItemCommentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AverageItemComment.
     * @param {AverageItemCommentUpsertArgs} args - Arguments to update or create a AverageItemComment.
     * @example
     * // Update or create a AverageItemComment
     * const averageItemComment = await prisma.averageItemComment.upsert({
     *   create: {
     *     // ... data to create a AverageItemComment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AverageItemComment we want to update
     *   }
     * })
     */
    upsert<T extends AverageItemCommentUpsertArgs>(args: SelectSubset<T, AverageItemCommentUpsertArgs<ExtArgs>>): Prisma__AverageItemCommentClient<$Result.GetResult<Prisma.$AverageItemCommentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AverageItemComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AverageItemCommentCountArgs} args - Arguments to filter AverageItemComments to count.
     * @example
     * // Count the number of AverageItemComments
     * const count = await prisma.averageItemComment.count({
     *   where: {
     *     // ... the filter for the AverageItemComments we want to count
     *   }
     * })
    **/
    count<T extends AverageItemCommentCountArgs>(
      args?: Subset<T, AverageItemCommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AverageItemCommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AverageItemComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AverageItemCommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AverageItemCommentAggregateArgs>(args: Subset<T, AverageItemCommentAggregateArgs>): Prisma.PrismaPromise<GetAverageItemCommentAggregateType<T>>

    /**
     * Group by AverageItemComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AverageItemCommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AverageItemCommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AverageItemCommentGroupByArgs['orderBy'] }
        : { orderBy?: AverageItemCommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AverageItemCommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAverageItemCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AverageItemComment model
   */
  readonly fields: AverageItemCommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AverageItemComment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AverageItemCommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AverageItemComment model
   */
  interface AverageItemCommentFieldRefs {
    readonly id: FieldRef<"AverageItemComment", 'String'>
    readonly subject: FieldRef<"AverageItemComment", 'String'>
    readonly userId: FieldRef<"AverageItemComment", 'String'>
    readonly content: FieldRef<"AverageItemComment", 'String'>
    readonly createdAt: FieldRef<"AverageItemComment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AverageItemComment findUnique
   */
  export type AverageItemCommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AverageItemComment
     */
    select?: AverageItemCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AverageItemComment
     */
    omit?: AverageItemCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AverageItemCommentInclude<ExtArgs> | null
    /**
     * Filter, which AverageItemComment to fetch.
     */
    where: AverageItemCommentWhereUniqueInput
  }

  /**
   * AverageItemComment findUniqueOrThrow
   */
  export type AverageItemCommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AverageItemComment
     */
    select?: AverageItemCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AverageItemComment
     */
    omit?: AverageItemCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AverageItemCommentInclude<ExtArgs> | null
    /**
     * Filter, which AverageItemComment to fetch.
     */
    where: AverageItemCommentWhereUniqueInput
  }

  /**
   * AverageItemComment findFirst
   */
  export type AverageItemCommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AverageItemComment
     */
    select?: AverageItemCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AverageItemComment
     */
    omit?: AverageItemCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AverageItemCommentInclude<ExtArgs> | null
    /**
     * Filter, which AverageItemComment to fetch.
     */
    where?: AverageItemCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AverageItemComments to fetch.
     */
    orderBy?: AverageItemCommentOrderByWithRelationInput | AverageItemCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AverageItemComments.
     */
    cursor?: AverageItemCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AverageItemComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AverageItemComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AverageItemComments.
     */
    distinct?: AverageItemCommentScalarFieldEnum | AverageItemCommentScalarFieldEnum[]
  }

  /**
   * AverageItemComment findFirstOrThrow
   */
  export type AverageItemCommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AverageItemComment
     */
    select?: AverageItemCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AverageItemComment
     */
    omit?: AverageItemCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AverageItemCommentInclude<ExtArgs> | null
    /**
     * Filter, which AverageItemComment to fetch.
     */
    where?: AverageItemCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AverageItemComments to fetch.
     */
    orderBy?: AverageItemCommentOrderByWithRelationInput | AverageItemCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AverageItemComments.
     */
    cursor?: AverageItemCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AverageItemComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AverageItemComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AverageItemComments.
     */
    distinct?: AverageItemCommentScalarFieldEnum | AverageItemCommentScalarFieldEnum[]
  }

  /**
   * AverageItemComment findMany
   */
  export type AverageItemCommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AverageItemComment
     */
    select?: AverageItemCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AverageItemComment
     */
    omit?: AverageItemCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AverageItemCommentInclude<ExtArgs> | null
    /**
     * Filter, which AverageItemComments to fetch.
     */
    where?: AverageItemCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AverageItemComments to fetch.
     */
    orderBy?: AverageItemCommentOrderByWithRelationInput | AverageItemCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AverageItemComments.
     */
    cursor?: AverageItemCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AverageItemComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AverageItemComments.
     */
    skip?: number
    distinct?: AverageItemCommentScalarFieldEnum | AverageItemCommentScalarFieldEnum[]
  }

  /**
   * AverageItemComment create
   */
  export type AverageItemCommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AverageItemComment
     */
    select?: AverageItemCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AverageItemComment
     */
    omit?: AverageItemCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AverageItemCommentInclude<ExtArgs> | null
    /**
     * The data needed to create a AverageItemComment.
     */
    data: XOR<AverageItemCommentCreateInput, AverageItemCommentUncheckedCreateInput>
  }

  /**
   * AverageItemComment createMany
   */
  export type AverageItemCommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AverageItemComments.
     */
    data: AverageItemCommentCreateManyInput | AverageItemCommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AverageItemComment createManyAndReturn
   */
  export type AverageItemCommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AverageItemComment
     */
    select?: AverageItemCommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AverageItemComment
     */
    omit?: AverageItemCommentOmit<ExtArgs> | null
    /**
     * The data used to create many AverageItemComments.
     */
    data: AverageItemCommentCreateManyInput | AverageItemCommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AverageItemCommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AverageItemComment update
   */
  export type AverageItemCommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AverageItemComment
     */
    select?: AverageItemCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AverageItemComment
     */
    omit?: AverageItemCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AverageItemCommentInclude<ExtArgs> | null
    /**
     * The data needed to update a AverageItemComment.
     */
    data: XOR<AverageItemCommentUpdateInput, AverageItemCommentUncheckedUpdateInput>
    /**
     * Choose, which AverageItemComment to update.
     */
    where: AverageItemCommentWhereUniqueInput
  }

  /**
   * AverageItemComment updateMany
   */
  export type AverageItemCommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AverageItemComments.
     */
    data: XOR<AverageItemCommentUpdateManyMutationInput, AverageItemCommentUncheckedUpdateManyInput>
    /**
     * Filter which AverageItemComments to update
     */
    where?: AverageItemCommentWhereInput
    /**
     * Limit how many AverageItemComments to update.
     */
    limit?: number
  }

  /**
   * AverageItemComment updateManyAndReturn
   */
  export type AverageItemCommentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AverageItemComment
     */
    select?: AverageItemCommentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AverageItemComment
     */
    omit?: AverageItemCommentOmit<ExtArgs> | null
    /**
     * The data used to update AverageItemComments.
     */
    data: XOR<AverageItemCommentUpdateManyMutationInput, AverageItemCommentUncheckedUpdateManyInput>
    /**
     * Filter which AverageItemComments to update
     */
    where?: AverageItemCommentWhereInput
    /**
     * Limit how many AverageItemComments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AverageItemCommentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AverageItemComment upsert
   */
  export type AverageItemCommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AverageItemComment
     */
    select?: AverageItemCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AverageItemComment
     */
    omit?: AverageItemCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AverageItemCommentInclude<ExtArgs> | null
    /**
     * The filter to search for the AverageItemComment to update in case it exists.
     */
    where: AverageItemCommentWhereUniqueInput
    /**
     * In case the AverageItemComment found by the `where` argument doesn't exist, create a new AverageItemComment with this data.
     */
    create: XOR<AverageItemCommentCreateInput, AverageItemCommentUncheckedCreateInput>
    /**
     * In case the AverageItemComment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AverageItemCommentUpdateInput, AverageItemCommentUncheckedUpdateInput>
  }

  /**
   * AverageItemComment delete
   */
  export type AverageItemCommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AverageItemComment
     */
    select?: AverageItemCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AverageItemComment
     */
    omit?: AverageItemCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AverageItemCommentInclude<ExtArgs> | null
    /**
     * Filter which AverageItemComment to delete.
     */
    where: AverageItemCommentWhereUniqueInput
  }

  /**
   * AverageItemComment deleteMany
   */
  export type AverageItemCommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AverageItemComments to delete
     */
    where?: AverageItemCommentWhereInput
    /**
     * Limit how many AverageItemComments to delete.
     */
    limit?: number
  }

  /**
   * AverageItemComment without action
   */
  export type AverageItemCommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AverageItemComment
     */
    select?: AverageItemCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AverageItemComment
     */
    omit?: AverageItemCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AverageItemCommentInclude<ExtArgs> | null
  }


  /**
   * Model Post
   */

  export type AggregatePost = {
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  export type PostAvgAggregateOutputType = {
    likeCount: number | null
  }

  export type PostSumAggregateOutputType = {
    likeCount: number | null
  }

  export type PostMinAggregateOutputType = {
    id: string | null
    content: string | null
    authorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    likeCount: number | null
    imageUrl: string | null
  }

  export type PostMaxAggregateOutputType = {
    id: string | null
    content: string | null
    authorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    likeCount: number | null
    imageUrl: string | null
  }

  export type PostCountAggregateOutputType = {
    id: number
    content: number
    authorId: number
    createdAt: number
    updatedAt: number
    likeCount: number
    imageUrl: number
    _all: number
  }


  export type PostAvgAggregateInputType = {
    likeCount?: true
  }

  export type PostSumAggregateInputType = {
    likeCount?: true
  }

  export type PostMinAggregateInputType = {
    id?: true
    content?: true
    authorId?: true
    createdAt?: true
    updatedAt?: true
    likeCount?: true
    imageUrl?: true
  }

  export type PostMaxAggregateInputType = {
    id?: true
    content?: true
    authorId?: true
    createdAt?: true
    updatedAt?: true
    likeCount?: true
    imageUrl?: true
  }

  export type PostCountAggregateInputType = {
    id?: true
    content?: true
    authorId?: true
    createdAt?: true
    updatedAt?: true
    likeCount?: true
    imageUrl?: true
    _all?: true
  }

  export type PostAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Post to aggregate.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Posts
    **/
    _count?: true | PostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostMaxAggregateInputType
  }

  export type GetPostAggregateType<T extends PostAggregateArgs> = {
        [P in keyof T & keyof AggregatePost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost[P]>
      : GetScalarType<T[P], AggregatePost[P]>
  }




  export type PostGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
    orderBy?: PostOrderByWithAggregationInput | PostOrderByWithAggregationInput[]
    by: PostScalarFieldEnum[] | PostScalarFieldEnum
    having?: PostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostCountAggregateInputType | true
    _avg?: PostAvgAggregateInputType
    _sum?: PostSumAggregateInputType
    _min?: PostMinAggregateInputType
    _max?: PostMaxAggregateInputType
  }

  export type PostGroupByOutputType = {
    id: string
    content: string
    authorId: string
    createdAt: Date
    updatedAt: Date
    likeCount: number
    imageUrl: string | null
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  type GetPostGroupByPayload<T extends PostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostGroupByOutputType[P]>
            : GetScalarType<T[P], PostGroupByOutputType[P]>
        }
      >
    >


  export type PostSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    authorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    likeCount?: boolean
    imageUrl?: boolean
    feedItems?: boolean | Post$feedItemsArgs<ExtArgs>
    likes?: boolean | Post$likesArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
    replies?: boolean | Post$repliesArgs<ExtArgs>
    _count?: boolean | PostCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type PostSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    authorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    likeCount?: boolean
    imageUrl?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type PostSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    authorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    likeCount?: boolean
    imageUrl?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type PostSelectScalar = {
    id?: boolean
    content?: boolean
    authorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    likeCount?: boolean
    imageUrl?: boolean
  }

  export type PostOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "content" | "authorId" | "createdAt" | "updatedAt" | "likeCount" | "imageUrl", ExtArgs["result"]["post"]>
  export type PostInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feedItems?: boolean | Post$feedItemsArgs<ExtArgs>
    likes?: boolean | Post$likesArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
    replies?: boolean | Post$repliesArgs<ExtArgs>
    _count?: boolean | PostCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PostIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PostIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PostPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Post"
    objects: {
      feedItems: Prisma.$FeedItemPayload<ExtArgs>[]
      likes: Prisma.$LikePayload<ExtArgs>[]
      author: Prisma.$UserPayload<ExtArgs>
      replies: Prisma.$ReplyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string
      authorId: string
      createdAt: Date
      updatedAt: Date
      likeCount: number
      imageUrl: string | null
    }, ExtArgs["result"]["post"]>
    composites: {}
  }

  type PostGetPayload<S extends boolean | null | undefined | PostDefaultArgs> = $Result.GetResult<Prisma.$PostPayload, S>

  type PostCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PostFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PostCountAggregateInputType | true
    }

  export interface PostDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Post'], meta: { name: 'Post' } }
    /**
     * Find zero or one Post that matches the filter.
     * @param {PostFindUniqueArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PostFindUniqueArgs>(args: SelectSubset<T, PostFindUniqueArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Post that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PostFindUniqueOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PostFindUniqueOrThrowArgs>(args: SelectSubset<T, PostFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Post that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PostFindFirstArgs>(args?: SelectSubset<T, PostFindFirstArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Post that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PostFindFirstOrThrowArgs>(args?: SelectSubset<T, PostFindFirstOrThrowArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.post.findMany()
     * 
     * // Get first 10 Posts
     * const posts = await prisma.post.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postWithIdOnly = await prisma.post.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PostFindManyArgs>(args?: SelectSubset<T, PostFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Post.
     * @param {PostCreateArgs} args - Arguments to create a Post.
     * @example
     * // Create one Post
     * const Post = await prisma.post.create({
     *   data: {
     *     // ... data to create a Post
     *   }
     * })
     * 
     */
    create<T extends PostCreateArgs>(args: SelectSubset<T, PostCreateArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Posts.
     * @param {PostCreateManyArgs} args - Arguments to create many Posts.
     * @example
     * // Create many Posts
     * const post = await prisma.post.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PostCreateManyArgs>(args?: SelectSubset<T, PostCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Posts and returns the data saved in the database.
     * @param {PostCreateManyAndReturnArgs} args - Arguments to create many Posts.
     * @example
     * // Create many Posts
     * const post = await prisma.post.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Posts and only return the `id`
     * const postWithIdOnly = await prisma.post.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PostCreateManyAndReturnArgs>(args?: SelectSubset<T, PostCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Post.
     * @param {PostDeleteArgs} args - Arguments to delete one Post.
     * @example
     * // Delete one Post
     * const Post = await prisma.post.delete({
     *   where: {
     *     // ... filter to delete one Post
     *   }
     * })
     * 
     */
    delete<T extends PostDeleteArgs>(args: SelectSubset<T, PostDeleteArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Post.
     * @param {PostUpdateArgs} args - Arguments to update one Post.
     * @example
     * // Update one Post
     * const post = await prisma.post.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PostUpdateArgs>(args: SelectSubset<T, PostUpdateArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Posts.
     * @param {PostDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.post.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PostDeleteManyArgs>(args?: SelectSubset<T, PostDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PostUpdateManyArgs>(args: SelectSubset<T, PostUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts and returns the data updated in the database.
     * @param {PostUpdateManyAndReturnArgs} args - Arguments to update many Posts.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Posts and only return the `id`
     * const postWithIdOnly = await prisma.post.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PostUpdateManyAndReturnArgs>(args: SelectSubset<T, PostUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Post.
     * @param {PostUpsertArgs} args - Arguments to update or create a Post.
     * @example
     * // Update or create a Post
     * const post = await prisma.post.upsert({
     *   create: {
     *     // ... data to create a Post
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post we want to update
     *   }
     * })
     */
    upsert<T extends PostUpsertArgs>(args: SelectSubset<T, PostUpsertArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostCountArgs} args - Arguments to filter Posts to count.
     * @example
     * // Count the number of Posts
     * const count = await prisma.post.count({
     *   where: {
     *     // ... the filter for the Posts we want to count
     *   }
     * })
    **/
    count<T extends PostCountArgs>(
      args?: Subset<T, PostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostAggregateArgs>(args: Subset<T, PostAggregateArgs>): Prisma.PrismaPromise<GetPostAggregateType<T>>

    /**
     * Group by Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostGroupByArgs['orderBy'] }
        : { orderBy?: PostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Post model
   */
  readonly fields: PostFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Post.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    feedItems<T extends Post$feedItemsArgs<ExtArgs> = {}>(args?: Subset<T, Post$feedItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    likes<T extends Post$likesArgs<ExtArgs> = {}>(args?: Subset<T, Post$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    replies<T extends Post$repliesArgs<ExtArgs> = {}>(args?: Subset<T, Post$repliesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReplyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Post model
   */
  interface PostFieldRefs {
    readonly id: FieldRef<"Post", 'String'>
    readonly content: FieldRef<"Post", 'String'>
    readonly authorId: FieldRef<"Post", 'String'>
    readonly createdAt: FieldRef<"Post", 'DateTime'>
    readonly updatedAt: FieldRef<"Post", 'DateTime'>
    readonly likeCount: FieldRef<"Post", 'Int'>
    readonly imageUrl: FieldRef<"Post", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Post findUnique
   */
  export type PostFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findUniqueOrThrow
   */
  export type PostFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findFirst
   */
  export type PostFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post findFirstOrThrow
   */
  export type PostFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post findMany
   */
  export type PostFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Posts to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post create
   */
  export type PostCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The data needed to create a Post.
     */
    data: XOR<PostCreateInput, PostUncheckedCreateInput>
  }

  /**
   * Post createMany
   */
  export type PostCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Posts.
     */
    data: PostCreateManyInput | PostCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Post createManyAndReturn
   */
  export type PostCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * The data used to create many Posts.
     */
    data: PostCreateManyInput | PostCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Post update
   */
  export type PostUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The data needed to update a Post.
     */
    data: XOR<PostUpdateInput, PostUncheckedUpdateInput>
    /**
     * Choose, which Post to update.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post updateMany
   */
  export type PostUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Posts.
     */
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     */
    where?: PostWhereInput
    /**
     * Limit how many Posts to update.
     */
    limit?: number
  }

  /**
   * Post updateManyAndReturn
   */
  export type PostUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * The data used to update Posts.
     */
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     */
    where?: PostWhereInput
    /**
     * Limit how many Posts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Post upsert
   */
  export type PostUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The filter to search for the Post to update in case it exists.
     */
    where: PostWhereUniqueInput
    /**
     * In case the Post found by the `where` argument doesn't exist, create a new Post with this data.
     */
    create: XOR<PostCreateInput, PostUncheckedCreateInput>
    /**
     * In case the Post was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostUpdateInput, PostUncheckedUpdateInput>
  }

  /**
   * Post delete
   */
  export type PostDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter which Post to delete.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post deleteMany
   */
  export type PostDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Posts to delete
     */
    where?: PostWhereInput
    /**
     * Limit how many Posts to delete.
     */
    limit?: number
  }

  /**
   * Post.feedItems
   */
  export type Post$feedItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedItem
     */
    select?: FeedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedItem
     */
    omit?: FeedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedItemInclude<ExtArgs> | null
    where?: FeedItemWhereInput
    orderBy?: FeedItemOrderByWithRelationInput | FeedItemOrderByWithRelationInput[]
    cursor?: FeedItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedItemScalarFieldEnum | FeedItemScalarFieldEnum[]
  }

  /**
   * Post.likes
   */
  export type Post$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    where?: LikeWhereInput
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    cursor?: LikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * Post.replies
   */
  export type Post$repliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reply
     */
    omit?: ReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReplyInclude<ExtArgs> | null
    where?: ReplyWhereInput
    orderBy?: ReplyOrderByWithRelationInput | ReplyOrderByWithRelationInput[]
    cursor?: ReplyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReplyScalarFieldEnum | ReplyScalarFieldEnum[]
  }

  /**
   * Post without action
   */
  export type PostDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
  }


  /**
   * Model Retweet
   */

  export type AggregateRetweet = {
    _count: RetweetCountAggregateOutputType | null
    _min: RetweetMinAggregateOutputType | null
    _max: RetweetMaxAggregateOutputType | null
  }

  export type RetweetMinAggregateOutputType = {
    id: string | null
    userId: string | null
    feedItemId: string | null
    createdAt: Date | null
  }

  export type RetweetMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    feedItemId: string | null
    createdAt: Date | null
  }

  export type RetweetCountAggregateOutputType = {
    id: number
    userId: number
    feedItemId: number
    createdAt: number
    _all: number
  }


  export type RetweetMinAggregateInputType = {
    id?: true
    userId?: true
    feedItemId?: true
    createdAt?: true
  }

  export type RetweetMaxAggregateInputType = {
    id?: true
    userId?: true
    feedItemId?: true
    createdAt?: true
  }

  export type RetweetCountAggregateInputType = {
    id?: true
    userId?: true
    feedItemId?: true
    createdAt?: true
    _all?: true
  }

  export type RetweetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Retweet to aggregate.
     */
    where?: RetweetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Retweets to fetch.
     */
    orderBy?: RetweetOrderByWithRelationInput | RetweetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RetweetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Retweets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Retweets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Retweets
    **/
    _count?: true | RetweetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RetweetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RetweetMaxAggregateInputType
  }

  export type GetRetweetAggregateType<T extends RetweetAggregateArgs> = {
        [P in keyof T & keyof AggregateRetweet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRetweet[P]>
      : GetScalarType<T[P], AggregateRetweet[P]>
  }




  export type RetweetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RetweetWhereInput
    orderBy?: RetweetOrderByWithAggregationInput | RetweetOrderByWithAggregationInput[]
    by: RetweetScalarFieldEnum[] | RetweetScalarFieldEnum
    having?: RetweetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RetweetCountAggregateInputType | true
    _min?: RetweetMinAggregateInputType
    _max?: RetweetMaxAggregateInputType
  }

  export type RetweetGroupByOutputType = {
    id: string
    userId: string
    feedItemId: string
    createdAt: Date
    _count: RetweetCountAggregateOutputType | null
    _min: RetweetMinAggregateOutputType | null
    _max: RetweetMaxAggregateOutputType | null
  }

  type GetRetweetGroupByPayload<T extends RetweetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RetweetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RetweetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RetweetGroupByOutputType[P]>
            : GetScalarType<T[P], RetweetGroupByOutputType[P]>
        }
      >
    >


  export type RetweetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    feedItemId?: boolean
    createdAt?: boolean
    feedItem?: boolean | FeedItemDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["retweet"]>

  export type RetweetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    feedItemId?: boolean
    createdAt?: boolean
    feedItem?: boolean | FeedItemDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["retweet"]>

  export type RetweetSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    feedItemId?: boolean
    createdAt?: boolean
    feedItem?: boolean | FeedItemDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["retweet"]>

  export type RetweetSelectScalar = {
    id?: boolean
    userId?: boolean
    feedItemId?: boolean
    createdAt?: boolean
  }

  export type RetweetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "feedItemId" | "createdAt", ExtArgs["result"]["retweet"]>
  export type RetweetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feedItem?: boolean | FeedItemDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RetweetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feedItem?: boolean | FeedItemDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RetweetIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feedItem?: boolean | FeedItemDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $RetweetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Retweet"
    objects: {
      feedItem: Prisma.$FeedItemPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      feedItemId: string
      createdAt: Date
    }, ExtArgs["result"]["retweet"]>
    composites: {}
  }

  type RetweetGetPayload<S extends boolean | null | undefined | RetweetDefaultArgs> = $Result.GetResult<Prisma.$RetweetPayload, S>

  type RetweetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RetweetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RetweetCountAggregateInputType | true
    }

  export interface RetweetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Retweet'], meta: { name: 'Retweet' } }
    /**
     * Find zero or one Retweet that matches the filter.
     * @param {RetweetFindUniqueArgs} args - Arguments to find a Retweet
     * @example
     * // Get one Retweet
     * const retweet = await prisma.retweet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RetweetFindUniqueArgs>(args: SelectSubset<T, RetweetFindUniqueArgs<ExtArgs>>): Prisma__RetweetClient<$Result.GetResult<Prisma.$RetweetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Retweet that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RetweetFindUniqueOrThrowArgs} args - Arguments to find a Retweet
     * @example
     * // Get one Retweet
     * const retweet = await prisma.retweet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RetweetFindUniqueOrThrowArgs>(args: SelectSubset<T, RetweetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RetweetClient<$Result.GetResult<Prisma.$RetweetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Retweet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RetweetFindFirstArgs} args - Arguments to find a Retweet
     * @example
     * // Get one Retweet
     * const retweet = await prisma.retweet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RetweetFindFirstArgs>(args?: SelectSubset<T, RetweetFindFirstArgs<ExtArgs>>): Prisma__RetweetClient<$Result.GetResult<Prisma.$RetweetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Retweet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RetweetFindFirstOrThrowArgs} args - Arguments to find a Retweet
     * @example
     * // Get one Retweet
     * const retweet = await prisma.retweet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RetweetFindFirstOrThrowArgs>(args?: SelectSubset<T, RetweetFindFirstOrThrowArgs<ExtArgs>>): Prisma__RetweetClient<$Result.GetResult<Prisma.$RetweetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Retweets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RetweetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Retweets
     * const retweets = await prisma.retweet.findMany()
     * 
     * // Get first 10 Retweets
     * const retweets = await prisma.retweet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const retweetWithIdOnly = await prisma.retweet.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RetweetFindManyArgs>(args?: SelectSubset<T, RetweetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RetweetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Retweet.
     * @param {RetweetCreateArgs} args - Arguments to create a Retweet.
     * @example
     * // Create one Retweet
     * const Retweet = await prisma.retweet.create({
     *   data: {
     *     // ... data to create a Retweet
     *   }
     * })
     * 
     */
    create<T extends RetweetCreateArgs>(args: SelectSubset<T, RetweetCreateArgs<ExtArgs>>): Prisma__RetweetClient<$Result.GetResult<Prisma.$RetweetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Retweets.
     * @param {RetweetCreateManyArgs} args - Arguments to create many Retweets.
     * @example
     * // Create many Retweets
     * const retweet = await prisma.retweet.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RetweetCreateManyArgs>(args?: SelectSubset<T, RetweetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Retweets and returns the data saved in the database.
     * @param {RetweetCreateManyAndReturnArgs} args - Arguments to create many Retweets.
     * @example
     * // Create many Retweets
     * const retweet = await prisma.retweet.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Retweets and only return the `id`
     * const retweetWithIdOnly = await prisma.retweet.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RetweetCreateManyAndReturnArgs>(args?: SelectSubset<T, RetweetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RetweetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Retweet.
     * @param {RetweetDeleteArgs} args - Arguments to delete one Retweet.
     * @example
     * // Delete one Retweet
     * const Retweet = await prisma.retweet.delete({
     *   where: {
     *     // ... filter to delete one Retweet
     *   }
     * })
     * 
     */
    delete<T extends RetweetDeleteArgs>(args: SelectSubset<T, RetweetDeleteArgs<ExtArgs>>): Prisma__RetweetClient<$Result.GetResult<Prisma.$RetweetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Retweet.
     * @param {RetweetUpdateArgs} args - Arguments to update one Retweet.
     * @example
     * // Update one Retweet
     * const retweet = await prisma.retweet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RetweetUpdateArgs>(args: SelectSubset<T, RetweetUpdateArgs<ExtArgs>>): Prisma__RetweetClient<$Result.GetResult<Prisma.$RetweetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Retweets.
     * @param {RetweetDeleteManyArgs} args - Arguments to filter Retweets to delete.
     * @example
     * // Delete a few Retweets
     * const { count } = await prisma.retweet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RetweetDeleteManyArgs>(args?: SelectSubset<T, RetweetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Retweets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RetweetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Retweets
     * const retweet = await prisma.retweet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RetweetUpdateManyArgs>(args: SelectSubset<T, RetweetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Retweets and returns the data updated in the database.
     * @param {RetweetUpdateManyAndReturnArgs} args - Arguments to update many Retweets.
     * @example
     * // Update many Retweets
     * const retweet = await prisma.retweet.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Retweets and only return the `id`
     * const retweetWithIdOnly = await prisma.retweet.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RetweetUpdateManyAndReturnArgs>(args: SelectSubset<T, RetweetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RetweetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Retweet.
     * @param {RetweetUpsertArgs} args - Arguments to update or create a Retweet.
     * @example
     * // Update or create a Retweet
     * const retweet = await prisma.retweet.upsert({
     *   create: {
     *     // ... data to create a Retweet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Retweet we want to update
     *   }
     * })
     */
    upsert<T extends RetweetUpsertArgs>(args: SelectSubset<T, RetweetUpsertArgs<ExtArgs>>): Prisma__RetweetClient<$Result.GetResult<Prisma.$RetweetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Retweets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RetweetCountArgs} args - Arguments to filter Retweets to count.
     * @example
     * // Count the number of Retweets
     * const count = await prisma.retweet.count({
     *   where: {
     *     // ... the filter for the Retweets we want to count
     *   }
     * })
    **/
    count<T extends RetweetCountArgs>(
      args?: Subset<T, RetweetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RetweetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Retweet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RetweetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RetweetAggregateArgs>(args: Subset<T, RetweetAggregateArgs>): Prisma.PrismaPromise<GetRetweetAggregateType<T>>

    /**
     * Group by Retweet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RetweetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RetweetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RetweetGroupByArgs['orderBy'] }
        : { orderBy?: RetweetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RetweetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRetweetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Retweet model
   */
  readonly fields: RetweetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Retweet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RetweetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    feedItem<T extends FeedItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FeedItemDefaultArgs<ExtArgs>>): Prisma__FeedItemClient<$Result.GetResult<Prisma.$FeedItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Retweet model
   */
  interface RetweetFieldRefs {
    readonly id: FieldRef<"Retweet", 'String'>
    readonly userId: FieldRef<"Retweet", 'String'>
    readonly feedItemId: FieldRef<"Retweet", 'String'>
    readonly createdAt: FieldRef<"Retweet", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Retweet findUnique
   */
  export type RetweetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Retweet
     */
    select?: RetweetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Retweet
     */
    omit?: RetweetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RetweetInclude<ExtArgs> | null
    /**
     * Filter, which Retweet to fetch.
     */
    where: RetweetWhereUniqueInput
  }

  /**
   * Retweet findUniqueOrThrow
   */
  export type RetweetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Retweet
     */
    select?: RetweetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Retweet
     */
    omit?: RetweetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RetweetInclude<ExtArgs> | null
    /**
     * Filter, which Retweet to fetch.
     */
    where: RetweetWhereUniqueInput
  }

  /**
   * Retweet findFirst
   */
  export type RetweetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Retweet
     */
    select?: RetweetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Retweet
     */
    omit?: RetweetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RetweetInclude<ExtArgs> | null
    /**
     * Filter, which Retweet to fetch.
     */
    where?: RetweetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Retweets to fetch.
     */
    orderBy?: RetweetOrderByWithRelationInput | RetweetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Retweets.
     */
    cursor?: RetweetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Retweets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Retweets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Retweets.
     */
    distinct?: RetweetScalarFieldEnum | RetweetScalarFieldEnum[]
  }

  /**
   * Retweet findFirstOrThrow
   */
  export type RetweetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Retweet
     */
    select?: RetweetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Retweet
     */
    omit?: RetweetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RetweetInclude<ExtArgs> | null
    /**
     * Filter, which Retweet to fetch.
     */
    where?: RetweetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Retweets to fetch.
     */
    orderBy?: RetweetOrderByWithRelationInput | RetweetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Retweets.
     */
    cursor?: RetweetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Retweets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Retweets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Retweets.
     */
    distinct?: RetweetScalarFieldEnum | RetweetScalarFieldEnum[]
  }

  /**
   * Retweet findMany
   */
  export type RetweetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Retweet
     */
    select?: RetweetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Retweet
     */
    omit?: RetweetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RetweetInclude<ExtArgs> | null
    /**
     * Filter, which Retweets to fetch.
     */
    where?: RetweetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Retweets to fetch.
     */
    orderBy?: RetweetOrderByWithRelationInput | RetweetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Retweets.
     */
    cursor?: RetweetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Retweets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Retweets.
     */
    skip?: number
    distinct?: RetweetScalarFieldEnum | RetweetScalarFieldEnum[]
  }

  /**
   * Retweet create
   */
  export type RetweetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Retweet
     */
    select?: RetweetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Retweet
     */
    omit?: RetweetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RetweetInclude<ExtArgs> | null
    /**
     * The data needed to create a Retweet.
     */
    data: XOR<RetweetCreateInput, RetweetUncheckedCreateInput>
  }

  /**
   * Retweet createMany
   */
  export type RetweetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Retweets.
     */
    data: RetweetCreateManyInput | RetweetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Retweet createManyAndReturn
   */
  export type RetweetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Retweet
     */
    select?: RetweetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Retweet
     */
    omit?: RetweetOmit<ExtArgs> | null
    /**
     * The data used to create many Retweets.
     */
    data: RetweetCreateManyInput | RetweetCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RetweetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Retweet update
   */
  export type RetweetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Retweet
     */
    select?: RetweetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Retweet
     */
    omit?: RetweetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RetweetInclude<ExtArgs> | null
    /**
     * The data needed to update a Retweet.
     */
    data: XOR<RetweetUpdateInput, RetweetUncheckedUpdateInput>
    /**
     * Choose, which Retweet to update.
     */
    where: RetweetWhereUniqueInput
  }

  /**
   * Retweet updateMany
   */
  export type RetweetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Retweets.
     */
    data: XOR<RetweetUpdateManyMutationInput, RetweetUncheckedUpdateManyInput>
    /**
     * Filter which Retweets to update
     */
    where?: RetweetWhereInput
    /**
     * Limit how many Retweets to update.
     */
    limit?: number
  }

  /**
   * Retweet updateManyAndReturn
   */
  export type RetweetUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Retweet
     */
    select?: RetweetSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Retweet
     */
    omit?: RetweetOmit<ExtArgs> | null
    /**
     * The data used to update Retweets.
     */
    data: XOR<RetweetUpdateManyMutationInput, RetweetUncheckedUpdateManyInput>
    /**
     * Filter which Retweets to update
     */
    where?: RetweetWhereInput
    /**
     * Limit how many Retweets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RetweetIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Retweet upsert
   */
  export type RetweetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Retweet
     */
    select?: RetweetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Retweet
     */
    omit?: RetweetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RetweetInclude<ExtArgs> | null
    /**
     * The filter to search for the Retweet to update in case it exists.
     */
    where: RetweetWhereUniqueInput
    /**
     * In case the Retweet found by the `where` argument doesn't exist, create a new Retweet with this data.
     */
    create: XOR<RetweetCreateInput, RetweetUncheckedCreateInput>
    /**
     * In case the Retweet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RetweetUpdateInput, RetweetUncheckedUpdateInput>
  }

  /**
   * Retweet delete
   */
  export type RetweetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Retweet
     */
    select?: RetweetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Retweet
     */
    omit?: RetweetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RetweetInclude<ExtArgs> | null
    /**
     * Filter which Retweet to delete.
     */
    where: RetweetWhereUniqueInput
  }

  /**
   * Retweet deleteMany
   */
  export type RetweetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Retweets to delete
     */
    where?: RetweetWhereInput
    /**
     * Limit how many Retweets to delete.
     */
    limit?: number
  }

  /**
   * Retweet without action
   */
  export type RetweetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Retweet
     */
    select?: RetweetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Retweet
     */
    omit?: RetweetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RetweetInclude<ExtArgs> | null
  }


  /**
   * Model FeedItem
   */

  export type AggregateFeedItem = {
    _count: FeedItemCountAggregateOutputType | null
    _avg: FeedItemAvgAggregateOutputType | null
    _sum: FeedItemSumAggregateOutputType | null
    _min: FeedItemMinAggregateOutputType | null
    _max: FeedItemMaxAggregateOutputType | null
  }

  export type FeedItemAvgAggregateOutputType = {
    quoteRetweetCount: number | null
  }

  export type FeedItemSumAggregateOutputType = {
    quoteRetweetCount: number | null
  }

  export type FeedItemMinAggregateOutputType = {
    id: string | null
    type: $Enums.FeedType | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    postId: string | null
    rankingListId: string | null
    retweetOfFeedItemId: string | null
    quotedFeedItemId: string | null
    quoteRetweetCount: number | null
  }

  export type FeedItemMaxAggregateOutputType = {
    id: string | null
    type: $Enums.FeedType | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    postId: string | null
    rankingListId: string | null
    retweetOfFeedItemId: string | null
    quotedFeedItemId: string | null
    quoteRetweetCount: number | null
  }

  export type FeedItemCountAggregateOutputType = {
    id: number
    type: number
    createdAt: number
    updatedAt: number
    userId: number
    postId: number
    rankingListId: number
    retweetOfFeedItemId: number
    quotedFeedItemId: number
    quoteRetweetCount: number
    _all: number
  }


  export type FeedItemAvgAggregateInputType = {
    quoteRetweetCount?: true
  }

  export type FeedItemSumAggregateInputType = {
    quoteRetweetCount?: true
  }

  export type FeedItemMinAggregateInputType = {
    id?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    postId?: true
    rankingListId?: true
    retweetOfFeedItemId?: true
    quotedFeedItemId?: true
    quoteRetweetCount?: true
  }

  export type FeedItemMaxAggregateInputType = {
    id?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    postId?: true
    rankingListId?: true
    retweetOfFeedItemId?: true
    quotedFeedItemId?: true
    quoteRetweetCount?: true
  }

  export type FeedItemCountAggregateInputType = {
    id?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    postId?: true
    rankingListId?: true
    retweetOfFeedItemId?: true
    quotedFeedItemId?: true
    quoteRetweetCount?: true
    _all?: true
  }

  export type FeedItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeedItem to aggregate.
     */
    where?: FeedItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedItems to fetch.
     */
    orderBy?: FeedItemOrderByWithRelationInput | FeedItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeedItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FeedItems
    **/
    _count?: true | FeedItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeedItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeedItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedItemMaxAggregateInputType
  }

  export type GetFeedItemAggregateType<T extends FeedItemAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedItem[P]>
      : GetScalarType<T[P], AggregateFeedItem[P]>
  }




  export type FeedItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedItemWhereInput
    orderBy?: FeedItemOrderByWithAggregationInput | FeedItemOrderByWithAggregationInput[]
    by: FeedItemScalarFieldEnum[] | FeedItemScalarFieldEnum
    having?: FeedItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedItemCountAggregateInputType | true
    _avg?: FeedItemAvgAggregateInputType
    _sum?: FeedItemSumAggregateInputType
    _min?: FeedItemMinAggregateInputType
    _max?: FeedItemMaxAggregateInputType
  }

  export type FeedItemGroupByOutputType = {
    id: string
    type: $Enums.FeedType
    createdAt: Date
    updatedAt: Date
    userId: string
    postId: string | null
    rankingListId: string | null
    retweetOfFeedItemId: string | null
    quotedFeedItemId: string | null
    quoteRetweetCount: number
    _count: FeedItemCountAggregateOutputType | null
    _avg: FeedItemAvgAggregateOutputType | null
    _sum: FeedItemSumAggregateOutputType | null
    _min: FeedItemMinAggregateOutputType | null
    _max: FeedItemMaxAggregateOutputType | null
  }

  type GetFeedItemGroupByPayload<T extends FeedItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedItemGroupByOutputType[P]>
            : GetScalarType<T[P], FeedItemGroupByOutputType[P]>
        }
      >
    >


  export type FeedItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    postId?: boolean
    rankingListId?: boolean
    retweetOfFeedItemId?: boolean
    quotedFeedItemId?: boolean
    quoteRetweetCount?: boolean
    post?: boolean | FeedItem$postArgs<ExtArgs>
    rankingList?: boolean | FeedItem$rankingListArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    quotedFeedItem?: boolean | FeedItem$quotedFeedItemArgs<ExtArgs>
    quotedByItems?: boolean | FeedItem$quotedByItemsArgs<ExtArgs>
    retweetOfFeedItem?: boolean | FeedItem$retweetOfFeedItemArgs<ExtArgs>
    retweetedByItems?: boolean | FeedItem$retweetedByItemsArgs<ExtArgs>
    retweets?: boolean | FeedItem$retweetsArgs<ExtArgs>
    _count?: boolean | FeedItemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedItem"]>

  export type FeedItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    postId?: boolean
    rankingListId?: boolean
    retweetOfFeedItemId?: boolean
    quotedFeedItemId?: boolean
    quoteRetweetCount?: boolean
    post?: boolean | FeedItem$postArgs<ExtArgs>
    rankingList?: boolean | FeedItem$rankingListArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    quotedFeedItem?: boolean | FeedItem$quotedFeedItemArgs<ExtArgs>
    retweetOfFeedItem?: boolean | FeedItem$retweetOfFeedItemArgs<ExtArgs>
  }, ExtArgs["result"]["feedItem"]>

  export type FeedItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    postId?: boolean
    rankingListId?: boolean
    retweetOfFeedItemId?: boolean
    quotedFeedItemId?: boolean
    quoteRetweetCount?: boolean
    post?: boolean | FeedItem$postArgs<ExtArgs>
    rankingList?: boolean | FeedItem$rankingListArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    quotedFeedItem?: boolean | FeedItem$quotedFeedItemArgs<ExtArgs>
    retweetOfFeedItem?: boolean | FeedItem$retweetOfFeedItemArgs<ExtArgs>
  }, ExtArgs["result"]["feedItem"]>

  export type FeedItemSelectScalar = {
    id?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    postId?: boolean
    rankingListId?: boolean
    retweetOfFeedItemId?: boolean
    quotedFeedItemId?: boolean
    quoteRetweetCount?: boolean
  }

  export type FeedItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "createdAt" | "updatedAt" | "userId" | "postId" | "rankingListId" | "retweetOfFeedItemId" | "quotedFeedItemId" | "quoteRetweetCount", ExtArgs["result"]["feedItem"]>
  export type FeedItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | FeedItem$postArgs<ExtArgs>
    rankingList?: boolean | FeedItem$rankingListArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    quotedFeedItem?: boolean | FeedItem$quotedFeedItemArgs<ExtArgs>
    quotedByItems?: boolean | FeedItem$quotedByItemsArgs<ExtArgs>
    retweetOfFeedItem?: boolean | FeedItem$retweetOfFeedItemArgs<ExtArgs>
    retweetedByItems?: boolean | FeedItem$retweetedByItemsArgs<ExtArgs>
    retweets?: boolean | FeedItem$retweetsArgs<ExtArgs>
    _count?: boolean | FeedItemCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FeedItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | FeedItem$postArgs<ExtArgs>
    rankingList?: boolean | FeedItem$rankingListArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    quotedFeedItem?: boolean | FeedItem$quotedFeedItemArgs<ExtArgs>
    retweetOfFeedItem?: boolean | FeedItem$retweetOfFeedItemArgs<ExtArgs>
  }
  export type FeedItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | FeedItem$postArgs<ExtArgs>
    rankingList?: boolean | FeedItem$rankingListArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    quotedFeedItem?: boolean | FeedItem$quotedFeedItemArgs<ExtArgs>
    retweetOfFeedItem?: boolean | FeedItem$retweetOfFeedItemArgs<ExtArgs>
  }

  export type $FeedItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FeedItem"
    objects: {
      post: Prisma.$PostPayload<ExtArgs> | null
      rankingList: Prisma.$RankingListPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs>
      quotedFeedItem: Prisma.$FeedItemPayload<ExtArgs> | null
      quotedByItems: Prisma.$FeedItemPayload<ExtArgs>[]
      retweetOfFeedItem: Prisma.$FeedItemPayload<ExtArgs> | null
      retweetedByItems: Prisma.$FeedItemPayload<ExtArgs>[]
      retweets: Prisma.$RetweetPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: $Enums.FeedType
      createdAt: Date
      updatedAt: Date
      userId: string
      postId: string | null
      rankingListId: string | null
      retweetOfFeedItemId: string | null
      quotedFeedItemId: string | null
      quoteRetweetCount: number
    }, ExtArgs["result"]["feedItem"]>
    composites: {}
  }

  type FeedItemGetPayload<S extends boolean | null | undefined | FeedItemDefaultArgs> = $Result.GetResult<Prisma.$FeedItemPayload, S>

  type FeedItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FeedItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FeedItemCountAggregateInputType | true
    }

  export interface FeedItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FeedItem'], meta: { name: 'FeedItem' } }
    /**
     * Find zero or one FeedItem that matches the filter.
     * @param {FeedItemFindUniqueArgs} args - Arguments to find a FeedItem
     * @example
     * // Get one FeedItem
     * const feedItem = await prisma.feedItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeedItemFindUniqueArgs>(args: SelectSubset<T, FeedItemFindUniqueArgs<ExtArgs>>): Prisma__FeedItemClient<$Result.GetResult<Prisma.$FeedItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FeedItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FeedItemFindUniqueOrThrowArgs} args - Arguments to find a FeedItem
     * @example
     * // Get one FeedItem
     * const feedItem = await prisma.feedItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeedItemFindUniqueOrThrowArgs>(args: SelectSubset<T, FeedItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeedItemClient<$Result.GetResult<Prisma.$FeedItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FeedItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedItemFindFirstArgs} args - Arguments to find a FeedItem
     * @example
     * // Get one FeedItem
     * const feedItem = await prisma.feedItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeedItemFindFirstArgs>(args?: SelectSubset<T, FeedItemFindFirstArgs<ExtArgs>>): Prisma__FeedItemClient<$Result.GetResult<Prisma.$FeedItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FeedItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedItemFindFirstOrThrowArgs} args - Arguments to find a FeedItem
     * @example
     * // Get one FeedItem
     * const feedItem = await prisma.feedItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeedItemFindFirstOrThrowArgs>(args?: SelectSubset<T, FeedItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeedItemClient<$Result.GetResult<Prisma.$FeedItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FeedItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FeedItems
     * const feedItems = await prisma.feedItem.findMany()
     * 
     * // Get first 10 FeedItems
     * const feedItems = await prisma.feedItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feedItemWithIdOnly = await prisma.feedItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FeedItemFindManyArgs>(args?: SelectSubset<T, FeedItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FeedItem.
     * @param {FeedItemCreateArgs} args - Arguments to create a FeedItem.
     * @example
     * // Create one FeedItem
     * const FeedItem = await prisma.feedItem.create({
     *   data: {
     *     // ... data to create a FeedItem
     *   }
     * })
     * 
     */
    create<T extends FeedItemCreateArgs>(args: SelectSubset<T, FeedItemCreateArgs<ExtArgs>>): Prisma__FeedItemClient<$Result.GetResult<Prisma.$FeedItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FeedItems.
     * @param {FeedItemCreateManyArgs} args - Arguments to create many FeedItems.
     * @example
     * // Create many FeedItems
     * const feedItem = await prisma.feedItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeedItemCreateManyArgs>(args?: SelectSubset<T, FeedItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FeedItems and returns the data saved in the database.
     * @param {FeedItemCreateManyAndReturnArgs} args - Arguments to create many FeedItems.
     * @example
     * // Create many FeedItems
     * const feedItem = await prisma.feedItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FeedItems and only return the `id`
     * const feedItemWithIdOnly = await prisma.feedItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FeedItemCreateManyAndReturnArgs>(args?: SelectSubset<T, FeedItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FeedItem.
     * @param {FeedItemDeleteArgs} args - Arguments to delete one FeedItem.
     * @example
     * // Delete one FeedItem
     * const FeedItem = await prisma.feedItem.delete({
     *   where: {
     *     // ... filter to delete one FeedItem
     *   }
     * })
     * 
     */
    delete<T extends FeedItemDeleteArgs>(args: SelectSubset<T, FeedItemDeleteArgs<ExtArgs>>): Prisma__FeedItemClient<$Result.GetResult<Prisma.$FeedItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FeedItem.
     * @param {FeedItemUpdateArgs} args - Arguments to update one FeedItem.
     * @example
     * // Update one FeedItem
     * const feedItem = await prisma.feedItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeedItemUpdateArgs>(args: SelectSubset<T, FeedItemUpdateArgs<ExtArgs>>): Prisma__FeedItemClient<$Result.GetResult<Prisma.$FeedItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FeedItems.
     * @param {FeedItemDeleteManyArgs} args - Arguments to filter FeedItems to delete.
     * @example
     * // Delete a few FeedItems
     * const { count } = await prisma.feedItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeedItemDeleteManyArgs>(args?: SelectSubset<T, FeedItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeedItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FeedItems
     * const feedItem = await prisma.feedItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeedItemUpdateManyArgs>(args: SelectSubset<T, FeedItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeedItems and returns the data updated in the database.
     * @param {FeedItemUpdateManyAndReturnArgs} args - Arguments to update many FeedItems.
     * @example
     * // Update many FeedItems
     * const feedItem = await prisma.feedItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FeedItems and only return the `id`
     * const feedItemWithIdOnly = await prisma.feedItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FeedItemUpdateManyAndReturnArgs>(args: SelectSubset<T, FeedItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FeedItem.
     * @param {FeedItemUpsertArgs} args - Arguments to update or create a FeedItem.
     * @example
     * // Update or create a FeedItem
     * const feedItem = await prisma.feedItem.upsert({
     *   create: {
     *     // ... data to create a FeedItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FeedItem we want to update
     *   }
     * })
     */
    upsert<T extends FeedItemUpsertArgs>(args: SelectSubset<T, FeedItemUpsertArgs<ExtArgs>>): Prisma__FeedItemClient<$Result.GetResult<Prisma.$FeedItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FeedItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedItemCountArgs} args - Arguments to filter FeedItems to count.
     * @example
     * // Count the number of FeedItems
     * const count = await prisma.feedItem.count({
     *   where: {
     *     // ... the filter for the FeedItems we want to count
     *   }
     * })
    **/
    count<T extends FeedItemCountArgs>(
      args?: Subset<T, FeedItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FeedItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedItemAggregateArgs>(args: Subset<T, FeedItemAggregateArgs>): Prisma.PrismaPromise<GetFeedItemAggregateType<T>>

    /**
     * Group by FeedItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeedItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedItemGroupByArgs['orderBy'] }
        : { orderBy?: FeedItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeedItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FeedItem model
   */
  readonly fields: FeedItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FeedItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeedItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    post<T extends FeedItem$postArgs<ExtArgs> = {}>(args?: Subset<T, FeedItem$postArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    rankingList<T extends FeedItem$rankingListArgs<ExtArgs> = {}>(args?: Subset<T, FeedItem$rankingListArgs<ExtArgs>>): Prisma__RankingListClient<$Result.GetResult<Prisma.$RankingListPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    quotedFeedItem<T extends FeedItem$quotedFeedItemArgs<ExtArgs> = {}>(args?: Subset<T, FeedItem$quotedFeedItemArgs<ExtArgs>>): Prisma__FeedItemClient<$Result.GetResult<Prisma.$FeedItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    quotedByItems<T extends FeedItem$quotedByItemsArgs<ExtArgs> = {}>(args?: Subset<T, FeedItem$quotedByItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    retweetOfFeedItem<T extends FeedItem$retweetOfFeedItemArgs<ExtArgs> = {}>(args?: Subset<T, FeedItem$retweetOfFeedItemArgs<ExtArgs>>): Prisma__FeedItemClient<$Result.GetResult<Prisma.$FeedItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    retweetedByItems<T extends FeedItem$retweetedByItemsArgs<ExtArgs> = {}>(args?: Subset<T, FeedItem$retweetedByItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    retweets<T extends FeedItem$retweetsArgs<ExtArgs> = {}>(args?: Subset<T, FeedItem$retweetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RetweetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FeedItem model
   */
  interface FeedItemFieldRefs {
    readonly id: FieldRef<"FeedItem", 'String'>
    readonly type: FieldRef<"FeedItem", 'FeedType'>
    readonly createdAt: FieldRef<"FeedItem", 'DateTime'>
    readonly updatedAt: FieldRef<"FeedItem", 'DateTime'>
    readonly userId: FieldRef<"FeedItem", 'String'>
    readonly postId: FieldRef<"FeedItem", 'String'>
    readonly rankingListId: FieldRef<"FeedItem", 'String'>
    readonly retweetOfFeedItemId: FieldRef<"FeedItem", 'String'>
    readonly quotedFeedItemId: FieldRef<"FeedItem", 'String'>
    readonly quoteRetweetCount: FieldRef<"FeedItem", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * FeedItem findUnique
   */
  export type FeedItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedItem
     */
    select?: FeedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedItem
     */
    omit?: FeedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedItemInclude<ExtArgs> | null
    /**
     * Filter, which FeedItem to fetch.
     */
    where: FeedItemWhereUniqueInput
  }

  /**
   * FeedItem findUniqueOrThrow
   */
  export type FeedItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedItem
     */
    select?: FeedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedItem
     */
    omit?: FeedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedItemInclude<ExtArgs> | null
    /**
     * Filter, which FeedItem to fetch.
     */
    where: FeedItemWhereUniqueInput
  }

  /**
   * FeedItem findFirst
   */
  export type FeedItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedItem
     */
    select?: FeedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedItem
     */
    omit?: FeedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedItemInclude<ExtArgs> | null
    /**
     * Filter, which FeedItem to fetch.
     */
    where?: FeedItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedItems to fetch.
     */
    orderBy?: FeedItemOrderByWithRelationInput | FeedItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeedItems.
     */
    cursor?: FeedItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeedItems.
     */
    distinct?: FeedItemScalarFieldEnum | FeedItemScalarFieldEnum[]
  }

  /**
   * FeedItem findFirstOrThrow
   */
  export type FeedItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedItem
     */
    select?: FeedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedItem
     */
    omit?: FeedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedItemInclude<ExtArgs> | null
    /**
     * Filter, which FeedItem to fetch.
     */
    where?: FeedItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedItems to fetch.
     */
    orderBy?: FeedItemOrderByWithRelationInput | FeedItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeedItems.
     */
    cursor?: FeedItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeedItems.
     */
    distinct?: FeedItemScalarFieldEnum | FeedItemScalarFieldEnum[]
  }

  /**
   * FeedItem findMany
   */
  export type FeedItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedItem
     */
    select?: FeedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedItem
     */
    omit?: FeedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedItemInclude<ExtArgs> | null
    /**
     * Filter, which FeedItems to fetch.
     */
    where?: FeedItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedItems to fetch.
     */
    orderBy?: FeedItemOrderByWithRelationInput | FeedItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FeedItems.
     */
    cursor?: FeedItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedItems.
     */
    skip?: number
    distinct?: FeedItemScalarFieldEnum | FeedItemScalarFieldEnum[]
  }

  /**
   * FeedItem create
   */
  export type FeedItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedItem
     */
    select?: FeedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedItem
     */
    omit?: FeedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedItemInclude<ExtArgs> | null
    /**
     * The data needed to create a FeedItem.
     */
    data: XOR<FeedItemCreateInput, FeedItemUncheckedCreateInput>
  }

  /**
   * FeedItem createMany
   */
  export type FeedItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FeedItems.
     */
    data: FeedItemCreateManyInput | FeedItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FeedItem createManyAndReturn
   */
  export type FeedItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedItem
     */
    select?: FeedItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FeedItem
     */
    omit?: FeedItemOmit<ExtArgs> | null
    /**
     * The data used to create many FeedItems.
     */
    data: FeedItemCreateManyInput | FeedItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FeedItem update
   */
  export type FeedItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedItem
     */
    select?: FeedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedItem
     */
    omit?: FeedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedItemInclude<ExtArgs> | null
    /**
     * The data needed to update a FeedItem.
     */
    data: XOR<FeedItemUpdateInput, FeedItemUncheckedUpdateInput>
    /**
     * Choose, which FeedItem to update.
     */
    where: FeedItemWhereUniqueInput
  }

  /**
   * FeedItem updateMany
   */
  export type FeedItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FeedItems.
     */
    data: XOR<FeedItemUpdateManyMutationInput, FeedItemUncheckedUpdateManyInput>
    /**
     * Filter which FeedItems to update
     */
    where?: FeedItemWhereInput
    /**
     * Limit how many FeedItems to update.
     */
    limit?: number
  }

  /**
   * FeedItem updateManyAndReturn
   */
  export type FeedItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedItem
     */
    select?: FeedItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FeedItem
     */
    omit?: FeedItemOmit<ExtArgs> | null
    /**
     * The data used to update FeedItems.
     */
    data: XOR<FeedItemUpdateManyMutationInput, FeedItemUncheckedUpdateManyInput>
    /**
     * Filter which FeedItems to update
     */
    where?: FeedItemWhereInput
    /**
     * Limit how many FeedItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FeedItem upsert
   */
  export type FeedItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedItem
     */
    select?: FeedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedItem
     */
    omit?: FeedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedItemInclude<ExtArgs> | null
    /**
     * The filter to search for the FeedItem to update in case it exists.
     */
    where: FeedItemWhereUniqueInput
    /**
     * In case the FeedItem found by the `where` argument doesn't exist, create a new FeedItem with this data.
     */
    create: XOR<FeedItemCreateInput, FeedItemUncheckedCreateInput>
    /**
     * In case the FeedItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeedItemUpdateInput, FeedItemUncheckedUpdateInput>
  }

  /**
   * FeedItem delete
   */
  export type FeedItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedItem
     */
    select?: FeedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedItem
     */
    omit?: FeedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedItemInclude<ExtArgs> | null
    /**
     * Filter which FeedItem to delete.
     */
    where: FeedItemWhereUniqueInput
  }

  /**
   * FeedItem deleteMany
   */
  export type FeedItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeedItems to delete
     */
    where?: FeedItemWhereInput
    /**
     * Limit how many FeedItems to delete.
     */
    limit?: number
  }

  /**
   * FeedItem.post
   */
  export type FeedItem$postArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    where?: PostWhereInput
  }

  /**
   * FeedItem.rankingList
   */
  export type FeedItem$rankingListArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingList
     */
    select?: RankingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankingList
     */
    omit?: RankingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListInclude<ExtArgs> | null
    where?: RankingListWhereInput
  }

  /**
   * FeedItem.quotedFeedItem
   */
  export type FeedItem$quotedFeedItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedItem
     */
    select?: FeedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedItem
     */
    omit?: FeedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedItemInclude<ExtArgs> | null
    where?: FeedItemWhereInput
  }

  /**
   * FeedItem.quotedByItems
   */
  export type FeedItem$quotedByItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedItem
     */
    select?: FeedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedItem
     */
    omit?: FeedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedItemInclude<ExtArgs> | null
    where?: FeedItemWhereInput
    orderBy?: FeedItemOrderByWithRelationInput | FeedItemOrderByWithRelationInput[]
    cursor?: FeedItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedItemScalarFieldEnum | FeedItemScalarFieldEnum[]
  }

  /**
   * FeedItem.retweetOfFeedItem
   */
  export type FeedItem$retweetOfFeedItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedItem
     */
    select?: FeedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedItem
     */
    omit?: FeedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedItemInclude<ExtArgs> | null
    where?: FeedItemWhereInput
  }

  /**
   * FeedItem.retweetedByItems
   */
  export type FeedItem$retweetedByItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedItem
     */
    select?: FeedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedItem
     */
    omit?: FeedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedItemInclude<ExtArgs> | null
    where?: FeedItemWhereInput
    orderBy?: FeedItemOrderByWithRelationInput | FeedItemOrderByWithRelationInput[]
    cursor?: FeedItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedItemScalarFieldEnum | FeedItemScalarFieldEnum[]
  }

  /**
   * FeedItem.retweets
   */
  export type FeedItem$retweetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Retweet
     */
    select?: RetweetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Retweet
     */
    omit?: RetweetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RetweetInclude<ExtArgs> | null
    where?: RetweetWhereInput
    orderBy?: RetweetOrderByWithRelationInput | RetweetOrderByWithRelationInput[]
    cursor?: RetweetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RetweetScalarFieldEnum | RetweetScalarFieldEnum[]
  }

  /**
   * FeedItem without action
   */
  export type FeedItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedItem
     */
    select?: FeedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedItem
     */
    omit?: FeedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedItemInclude<ExtArgs> | null
  }


  /**
   * Model Like
   */

  export type AggregateLike = {
    _count: LikeCountAggregateOutputType | null
    _min: LikeMinAggregateOutputType | null
    _max: LikeMaxAggregateOutputType | null
  }

  export type LikeMinAggregateOutputType = {
    id: string | null
    userId: string | null
    createdAt: Date | null
    postId: string | null
    rankingListId: string | null
  }

  export type LikeMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    createdAt: Date | null
    postId: string | null
    rankingListId: string | null
  }

  export type LikeCountAggregateOutputType = {
    id: number
    userId: number
    createdAt: number
    postId: number
    rankingListId: number
    _all: number
  }


  export type LikeMinAggregateInputType = {
    id?: true
    userId?: true
    createdAt?: true
    postId?: true
    rankingListId?: true
  }

  export type LikeMaxAggregateInputType = {
    id?: true
    userId?: true
    createdAt?: true
    postId?: true
    rankingListId?: true
  }

  export type LikeCountAggregateInputType = {
    id?: true
    userId?: true
    createdAt?: true
    postId?: true
    rankingListId?: true
    _all?: true
  }

  export type LikeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Like to aggregate.
     */
    where?: LikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Likes
    **/
    _count?: true | LikeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LikeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LikeMaxAggregateInputType
  }

  export type GetLikeAggregateType<T extends LikeAggregateArgs> = {
        [P in keyof T & keyof AggregateLike]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLike[P]>
      : GetScalarType<T[P], AggregateLike[P]>
  }




  export type LikeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeWhereInput
    orderBy?: LikeOrderByWithAggregationInput | LikeOrderByWithAggregationInput[]
    by: LikeScalarFieldEnum[] | LikeScalarFieldEnum
    having?: LikeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LikeCountAggregateInputType | true
    _min?: LikeMinAggregateInputType
    _max?: LikeMaxAggregateInputType
  }

  export type LikeGroupByOutputType = {
    id: string
    userId: string
    createdAt: Date
    postId: string | null
    rankingListId: string | null
    _count: LikeCountAggregateOutputType | null
    _min: LikeMinAggregateOutputType | null
    _max: LikeMaxAggregateOutputType | null
  }

  type GetLikeGroupByPayload<T extends LikeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LikeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LikeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LikeGroupByOutputType[P]>
            : GetScalarType<T[P], LikeGroupByOutputType[P]>
        }
      >
    >


  export type LikeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    createdAt?: boolean
    postId?: boolean
    rankingListId?: boolean
    post?: boolean | Like$postArgs<ExtArgs>
    rankingList?: boolean | Like$rankingListArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["like"]>

  export type LikeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    createdAt?: boolean
    postId?: boolean
    rankingListId?: boolean
    post?: boolean | Like$postArgs<ExtArgs>
    rankingList?: boolean | Like$rankingListArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["like"]>

  export type LikeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    createdAt?: boolean
    postId?: boolean
    rankingListId?: boolean
    post?: boolean | Like$postArgs<ExtArgs>
    rankingList?: boolean | Like$rankingListArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["like"]>

  export type LikeSelectScalar = {
    id?: boolean
    userId?: boolean
    createdAt?: boolean
    postId?: boolean
    rankingListId?: boolean
  }

  export type LikeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "createdAt" | "postId" | "rankingListId", ExtArgs["result"]["like"]>
  export type LikeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | Like$postArgs<ExtArgs>
    rankingList?: boolean | Like$rankingListArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type LikeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | Like$postArgs<ExtArgs>
    rankingList?: boolean | Like$rankingListArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type LikeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | Like$postArgs<ExtArgs>
    rankingList?: boolean | Like$rankingListArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $LikePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Like"
    objects: {
      post: Prisma.$PostPayload<ExtArgs> | null
      rankingList: Prisma.$RankingListPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      createdAt: Date
      postId: string | null
      rankingListId: string | null
    }, ExtArgs["result"]["like"]>
    composites: {}
  }

  type LikeGetPayload<S extends boolean | null | undefined | LikeDefaultArgs> = $Result.GetResult<Prisma.$LikePayload, S>

  type LikeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LikeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LikeCountAggregateInputType | true
    }

  export interface LikeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Like'], meta: { name: 'Like' } }
    /**
     * Find zero or one Like that matches the filter.
     * @param {LikeFindUniqueArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LikeFindUniqueArgs>(args: SelectSubset<T, LikeFindUniqueArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Like that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LikeFindUniqueOrThrowArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LikeFindUniqueOrThrowArgs>(args: SelectSubset<T, LikeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Like that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeFindFirstArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LikeFindFirstArgs>(args?: SelectSubset<T, LikeFindFirstArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Like that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeFindFirstOrThrowArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LikeFindFirstOrThrowArgs>(args?: SelectSubset<T, LikeFindFirstOrThrowArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Likes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Likes
     * const likes = await prisma.like.findMany()
     * 
     * // Get first 10 Likes
     * const likes = await prisma.like.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const likeWithIdOnly = await prisma.like.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LikeFindManyArgs>(args?: SelectSubset<T, LikeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Like.
     * @param {LikeCreateArgs} args - Arguments to create a Like.
     * @example
     * // Create one Like
     * const Like = await prisma.like.create({
     *   data: {
     *     // ... data to create a Like
     *   }
     * })
     * 
     */
    create<T extends LikeCreateArgs>(args: SelectSubset<T, LikeCreateArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Likes.
     * @param {LikeCreateManyArgs} args - Arguments to create many Likes.
     * @example
     * // Create many Likes
     * const like = await prisma.like.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LikeCreateManyArgs>(args?: SelectSubset<T, LikeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Likes and returns the data saved in the database.
     * @param {LikeCreateManyAndReturnArgs} args - Arguments to create many Likes.
     * @example
     * // Create many Likes
     * const like = await prisma.like.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Likes and only return the `id`
     * const likeWithIdOnly = await prisma.like.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LikeCreateManyAndReturnArgs>(args?: SelectSubset<T, LikeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Like.
     * @param {LikeDeleteArgs} args - Arguments to delete one Like.
     * @example
     * // Delete one Like
     * const Like = await prisma.like.delete({
     *   where: {
     *     // ... filter to delete one Like
     *   }
     * })
     * 
     */
    delete<T extends LikeDeleteArgs>(args: SelectSubset<T, LikeDeleteArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Like.
     * @param {LikeUpdateArgs} args - Arguments to update one Like.
     * @example
     * // Update one Like
     * const like = await prisma.like.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LikeUpdateArgs>(args: SelectSubset<T, LikeUpdateArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Likes.
     * @param {LikeDeleteManyArgs} args - Arguments to filter Likes to delete.
     * @example
     * // Delete a few Likes
     * const { count } = await prisma.like.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LikeDeleteManyArgs>(args?: SelectSubset<T, LikeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Likes
     * const like = await prisma.like.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LikeUpdateManyArgs>(args: SelectSubset<T, LikeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Likes and returns the data updated in the database.
     * @param {LikeUpdateManyAndReturnArgs} args - Arguments to update many Likes.
     * @example
     * // Update many Likes
     * const like = await prisma.like.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Likes and only return the `id`
     * const likeWithIdOnly = await prisma.like.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LikeUpdateManyAndReturnArgs>(args: SelectSubset<T, LikeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Like.
     * @param {LikeUpsertArgs} args - Arguments to update or create a Like.
     * @example
     * // Update or create a Like
     * const like = await prisma.like.upsert({
     *   create: {
     *     // ... data to create a Like
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Like we want to update
     *   }
     * })
     */
    upsert<T extends LikeUpsertArgs>(args: SelectSubset<T, LikeUpsertArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeCountArgs} args - Arguments to filter Likes to count.
     * @example
     * // Count the number of Likes
     * const count = await prisma.like.count({
     *   where: {
     *     // ... the filter for the Likes we want to count
     *   }
     * })
    **/
    count<T extends LikeCountArgs>(
      args?: Subset<T, LikeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LikeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Like.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LikeAggregateArgs>(args: Subset<T, LikeAggregateArgs>): Prisma.PrismaPromise<GetLikeAggregateType<T>>

    /**
     * Group by Like.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LikeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LikeGroupByArgs['orderBy'] }
        : { orderBy?: LikeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Like model
   */
  readonly fields: LikeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Like.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LikeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    post<T extends Like$postArgs<ExtArgs> = {}>(args?: Subset<T, Like$postArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    rankingList<T extends Like$rankingListArgs<ExtArgs> = {}>(args?: Subset<T, Like$rankingListArgs<ExtArgs>>): Prisma__RankingListClient<$Result.GetResult<Prisma.$RankingListPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Like model
   */
  interface LikeFieldRefs {
    readonly id: FieldRef<"Like", 'String'>
    readonly userId: FieldRef<"Like", 'String'>
    readonly createdAt: FieldRef<"Like", 'DateTime'>
    readonly postId: FieldRef<"Like", 'String'>
    readonly rankingListId: FieldRef<"Like", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Like findUnique
   */
  export type LikeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter, which Like to fetch.
     */
    where: LikeWhereUniqueInput
  }

  /**
   * Like findUniqueOrThrow
   */
  export type LikeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter, which Like to fetch.
     */
    where: LikeWhereUniqueInput
  }

  /**
   * Like findFirst
   */
  export type LikeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter, which Like to fetch.
     */
    where?: LikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Likes.
     */
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Likes.
     */
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * Like findFirstOrThrow
   */
  export type LikeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter, which Like to fetch.
     */
    where?: LikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Likes.
     */
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Likes.
     */
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * Like findMany
   */
  export type LikeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter, which Likes to fetch.
     */
    where?: LikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Likes.
     */
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * Like create
   */
  export type LikeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * The data needed to create a Like.
     */
    data: XOR<LikeCreateInput, LikeUncheckedCreateInput>
  }

  /**
   * Like createMany
   */
  export type LikeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Likes.
     */
    data: LikeCreateManyInput | LikeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Like createManyAndReturn
   */
  export type LikeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null
    /**
     * The data used to create many Likes.
     */
    data: LikeCreateManyInput | LikeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Like update
   */
  export type LikeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * The data needed to update a Like.
     */
    data: XOR<LikeUpdateInput, LikeUncheckedUpdateInput>
    /**
     * Choose, which Like to update.
     */
    where: LikeWhereUniqueInput
  }

  /**
   * Like updateMany
   */
  export type LikeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Likes.
     */
    data: XOR<LikeUpdateManyMutationInput, LikeUncheckedUpdateManyInput>
    /**
     * Filter which Likes to update
     */
    where?: LikeWhereInput
    /**
     * Limit how many Likes to update.
     */
    limit?: number
  }

  /**
   * Like updateManyAndReturn
   */
  export type LikeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null
    /**
     * The data used to update Likes.
     */
    data: XOR<LikeUpdateManyMutationInput, LikeUncheckedUpdateManyInput>
    /**
     * Filter which Likes to update
     */
    where?: LikeWhereInput
    /**
     * Limit how many Likes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Like upsert
   */
  export type LikeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * The filter to search for the Like to update in case it exists.
     */
    where: LikeWhereUniqueInput
    /**
     * In case the Like found by the `where` argument doesn't exist, create a new Like with this data.
     */
    create: XOR<LikeCreateInput, LikeUncheckedCreateInput>
    /**
     * In case the Like was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LikeUpdateInput, LikeUncheckedUpdateInput>
  }

  /**
   * Like delete
   */
  export type LikeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter which Like to delete.
     */
    where: LikeWhereUniqueInput
  }

  /**
   * Like deleteMany
   */
  export type LikeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Likes to delete
     */
    where?: LikeWhereInput
    /**
     * Limit how many Likes to delete.
     */
    limit?: number
  }

  /**
   * Like.post
   */
  export type Like$postArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    where?: PostWhereInput
  }

  /**
   * Like.rankingList
   */
  export type Like$rankingListArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingList
     */
    select?: RankingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RankingList
     */
    omit?: RankingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingListInclude<ExtArgs> | null
    where?: RankingListWhereInput
  }

  /**
   * Like without action
   */
  export type LikeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
  }


  /**
   * Model Reply
   */

  export type AggregateReply = {
    _count: ReplyCountAggregateOutputType | null
    _min: ReplyMinAggregateOutputType | null
    _max: ReplyMaxAggregateOutputType | null
  }

  export type ReplyMinAggregateOutputType = {
    id: string | null
    content: string | null
    userId: string | null
    postId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReplyMaxAggregateOutputType = {
    id: string | null
    content: string | null
    userId: string | null
    postId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReplyCountAggregateOutputType = {
    id: number
    content: number
    userId: number
    postId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ReplyMinAggregateInputType = {
    id?: true
    content?: true
    userId?: true
    postId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReplyMaxAggregateInputType = {
    id?: true
    content?: true
    userId?: true
    postId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReplyCountAggregateInputType = {
    id?: true
    content?: true
    userId?: true
    postId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ReplyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reply to aggregate.
     */
    where?: ReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Replies to fetch.
     */
    orderBy?: ReplyOrderByWithRelationInput | ReplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Replies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Replies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Replies
    **/
    _count?: true | ReplyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReplyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReplyMaxAggregateInputType
  }

  export type GetReplyAggregateType<T extends ReplyAggregateArgs> = {
        [P in keyof T & keyof AggregateReply]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReply[P]>
      : GetScalarType<T[P], AggregateReply[P]>
  }




  export type ReplyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReplyWhereInput
    orderBy?: ReplyOrderByWithAggregationInput | ReplyOrderByWithAggregationInput[]
    by: ReplyScalarFieldEnum[] | ReplyScalarFieldEnum
    having?: ReplyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReplyCountAggregateInputType | true
    _min?: ReplyMinAggregateInputType
    _max?: ReplyMaxAggregateInputType
  }

  export type ReplyGroupByOutputType = {
    id: string
    content: string
    userId: string
    postId: string
    createdAt: Date
    updatedAt: Date
    _count: ReplyCountAggregateOutputType | null
    _min: ReplyMinAggregateOutputType | null
    _max: ReplyMaxAggregateOutputType | null
  }

  type GetReplyGroupByPayload<T extends ReplyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReplyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReplyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReplyGroupByOutputType[P]>
            : GetScalarType<T[P], ReplyGroupByOutputType[P]>
        }
      >
    >


  export type ReplySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    userId?: boolean
    postId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reply"]>

  export type ReplySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    userId?: boolean
    postId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reply"]>

  export type ReplySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    userId?: boolean
    postId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reply"]>

  export type ReplySelectScalar = {
    id?: boolean
    content?: boolean
    userId?: boolean
    postId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ReplyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "content" | "userId" | "postId" | "createdAt" | "updatedAt", ExtArgs["result"]["reply"]>
  export type ReplyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ReplyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ReplyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ReplyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Reply"
    objects: {
      post: Prisma.$PostPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string
      userId: string
      postId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["reply"]>
    composites: {}
  }

  type ReplyGetPayload<S extends boolean | null | undefined | ReplyDefaultArgs> = $Result.GetResult<Prisma.$ReplyPayload, S>

  type ReplyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReplyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReplyCountAggregateInputType | true
    }

  export interface ReplyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Reply'], meta: { name: 'Reply' } }
    /**
     * Find zero or one Reply that matches the filter.
     * @param {ReplyFindUniqueArgs} args - Arguments to find a Reply
     * @example
     * // Get one Reply
     * const reply = await prisma.reply.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReplyFindUniqueArgs>(args: SelectSubset<T, ReplyFindUniqueArgs<ExtArgs>>): Prisma__ReplyClient<$Result.GetResult<Prisma.$ReplyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Reply that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReplyFindUniqueOrThrowArgs} args - Arguments to find a Reply
     * @example
     * // Get one Reply
     * const reply = await prisma.reply.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReplyFindUniqueOrThrowArgs>(args: SelectSubset<T, ReplyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReplyClient<$Result.GetResult<Prisma.$ReplyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Reply that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReplyFindFirstArgs} args - Arguments to find a Reply
     * @example
     * // Get one Reply
     * const reply = await prisma.reply.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReplyFindFirstArgs>(args?: SelectSubset<T, ReplyFindFirstArgs<ExtArgs>>): Prisma__ReplyClient<$Result.GetResult<Prisma.$ReplyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Reply that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReplyFindFirstOrThrowArgs} args - Arguments to find a Reply
     * @example
     * // Get one Reply
     * const reply = await prisma.reply.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReplyFindFirstOrThrowArgs>(args?: SelectSubset<T, ReplyFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReplyClient<$Result.GetResult<Prisma.$ReplyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Replies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReplyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Replies
     * const replies = await prisma.reply.findMany()
     * 
     * // Get first 10 Replies
     * const replies = await prisma.reply.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const replyWithIdOnly = await prisma.reply.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReplyFindManyArgs>(args?: SelectSubset<T, ReplyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReplyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Reply.
     * @param {ReplyCreateArgs} args - Arguments to create a Reply.
     * @example
     * // Create one Reply
     * const Reply = await prisma.reply.create({
     *   data: {
     *     // ... data to create a Reply
     *   }
     * })
     * 
     */
    create<T extends ReplyCreateArgs>(args: SelectSubset<T, ReplyCreateArgs<ExtArgs>>): Prisma__ReplyClient<$Result.GetResult<Prisma.$ReplyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Replies.
     * @param {ReplyCreateManyArgs} args - Arguments to create many Replies.
     * @example
     * // Create many Replies
     * const reply = await prisma.reply.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReplyCreateManyArgs>(args?: SelectSubset<T, ReplyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Replies and returns the data saved in the database.
     * @param {ReplyCreateManyAndReturnArgs} args - Arguments to create many Replies.
     * @example
     * // Create many Replies
     * const reply = await prisma.reply.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Replies and only return the `id`
     * const replyWithIdOnly = await prisma.reply.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReplyCreateManyAndReturnArgs>(args?: SelectSubset<T, ReplyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReplyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Reply.
     * @param {ReplyDeleteArgs} args - Arguments to delete one Reply.
     * @example
     * // Delete one Reply
     * const Reply = await prisma.reply.delete({
     *   where: {
     *     // ... filter to delete one Reply
     *   }
     * })
     * 
     */
    delete<T extends ReplyDeleteArgs>(args: SelectSubset<T, ReplyDeleteArgs<ExtArgs>>): Prisma__ReplyClient<$Result.GetResult<Prisma.$ReplyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Reply.
     * @param {ReplyUpdateArgs} args - Arguments to update one Reply.
     * @example
     * // Update one Reply
     * const reply = await prisma.reply.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReplyUpdateArgs>(args: SelectSubset<T, ReplyUpdateArgs<ExtArgs>>): Prisma__ReplyClient<$Result.GetResult<Prisma.$ReplyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Replies.
     * @param {ReplyDeleteManyArgs} args - Arguments to filter Replies to delete.
     * @example
     * // Delete a few Replies
     * const { count } = await prisma.reply.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReplyDeleteManyArgs>(args?: SelectSubset<T, ReplyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Replies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReplyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Replies
     * const reply = await prisma.reply.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReplyUpdateManyArgs>(args: SelectSubset<T, ReplyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Replies and returns the data updated in the database.
     * @param {ReplyUpdateManyAndReturnArgs} args - Arguments to update many Replies.
     * @example
     * // Update many Replies
     * const reply = await prisma.reply.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Replies and only return the `id`
     * const replyWithIdOnly = await prisma.reply.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReplyUpdateManyAndReturnArgs>(args: SelectSubset<T, ReplyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReplyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Reply.
     * @param {ReplyUpsertArgs} args - Arguments to update or create a Reply.
     * @example
     * // Update or create a Reply
     * const reply = await prisma.reply.upsert({
     *   create: {
     *     // ... data to create a Reply
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reply we want to update
     *   }
     * })
     */
    upsert<T extends ReplyUpsertArgs>(args: SelectSubset<T, ReplyUpsertArgs<ExtArgs>>): Prisma__ReplyClient<$Result.GetResult<Prisma.$ReplyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Replies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReplyCountArgs} args - Arguments to filter Replies to count.
     * @example
     * // Count the number of Replies
     * const count = await prisma.reply.count({
     *   where: {
     *     // ... the filter for the Replies we want to count
     *   }
     * })
    **/
    count<T extends ReplyCountArgs>(
      args?: Subset<T, ReplyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReplyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reply.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReplyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReplyAggregateArgs>(args: Subset<T, ReplyAggregateArgs>): Prisma.PrismaPromise<GetReplyAggregateType<T>>

    /**
     * Group by Reply.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReplyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReplyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReplyGroupByArgs['orderBy'] }
        : { orderBy?: ReplyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReplyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReplyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Reply model
   */
  readonly fields: ReplyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Reply.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReplyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    post<T extends PostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDefaultArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Reply model
   */
  interface ReplyFieldRefs {
    readonly id: FieldRef<"Reply", 'String'>
    readonly content: FieldRef<"Reply", 'String'>
    readonly userId: FieldRef<"Reply", 'String'>
    readonly postId: FieldRef<"Reply", 'String'>
    readonly createdAt: FieldRef<"Reply", 'DateTime'>
    readonly updatedAt: FieldRef<"Reply", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Reply findUnique
   */
  export type ReplyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reply
     */
    omit?: ReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReplyInclude<ExtArgs> | null
    /**
     * Filter, which Reply to fetch.
     */
    where: ReplyWhereUniqueInput
  }

  /**
   * Reply findUniqueOrThrow
   */
  export type ReplyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reply
     */
    omit?: ReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReplyInclude<ExtArgs> | null
    /**
     * Filter, which Reply to fetch.
     */
    where: ReplyWhereUniqueInput
  }

  /**
   * Reply findFirst
   */
  export type ReplyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reply
     */
    omit?: ReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReplyInclude<ExtArgs> | null
    /**
     * Filter, which Reply to fetch.
     */
    where?: ReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Replies to fetch.
     */
    orderBy?: ReplyOrderByWithRelationInput | ReplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Replies.
     */
    cursor?: ReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Replies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Replies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Replies.
     */
    distinct?: ReplyScalarFieldEnum | ReplyScalarFieldEnum[]
  }

  /**
   * Reply findFirstOrThrow
   */
  export type ReplyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reply
     */
    omit?: ReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReplyInclude<ExtArgs> | null
    /**
     * Filter, which Reply to fetch.
     */
    where?: ReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Replies to fetch.
     */
    orderBy?: ReplyOrderByWithRelationInput | ReplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Replies.
     */
    cursor?: ReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Replies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Replies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Replies.
     */
    distinct?: ReplyScalarFieldEnum | ReplyScalarFieldEnum[]
  }

  /**
   * Reply findMany
   */
  export type ReplyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reply
     */
    omit?: ReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReplyInclude<ExtArgs> | null
    /**
     * Filter, which Replies to fetch.
     */
    where?: ReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Replies to fetch.
     */
    orderBy?: ReplyOrderByWithRelationInput | ReplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Replies.
     */
    cursor?: ReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Replies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Replies.
     */
    skip?: number
    distinct?: ReplyScalarFieldEnum | ReplyScalarFieldEnum[]
  }

  /**
   * Reply create
   */
  export type ReplyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reply
     */
    omit?: ReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReplyInclude<ExtArgs> | null
    /**
     * The data needed to create a Reply.
     */
    data: XOR<ReplyCreateInput, ReplyUncheckedCreateInput>
  }

  /**
   * Reply createMany
   */
  export type ReplyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Replies.
     */
    data: ReplyCreateManyInput | ReplyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Reply createManyAndReturn
   */
  export type ReplyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Reply
     */
    omit?: ReplyOmit<ExtArgs> | null
    /**
     * The data used to create many Replies.
     */
    data: ReplyCreateManyInput | ReplyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReplyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Reply update
   */
  export type ReplyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reply
     */
    omit?: ReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReplyInclude<ExtArgs> | null
    /**
     * The data needed to update a Reply.
     */
    data: XOR<ReplyUpdateInput, ReplyUncheckedUpdateInput>
    /**
     * Choose, which Reply to update.
     */
    where: ReplyWhereUniqueInput
  }

  /**
   * Reply updateMany
   */
  export type ReplyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Replies.
     */
    data: XOR<ReplyUpdateManyMutationInput, ReplyUncheckedUpdateManyInput>
    /**
     * Filter which Replies to update
     */
    where?: ReplyWhereInput
    /**
     * Limit how many Replies to update.
     */
    limit?: number
  }

  /**
   * Reply updateManyAndReturn
   */
  export type ReplyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Reply
     */
    omit?: ReplyOmit<ExtArgs> | null
    /**
     * The data used to update Replies.
     */
    data: XOR<ReplyUpdateManyMutationInput, ReplyUncheckedUpdateManyInput>
    /**
     * Filter which Replies to update
     */
    where?: ReplyWhereInput
    /**
     * Limit how many Replies to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReplyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Reply upsert
   */
  export type ReplyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reply
     */
    omit?: ReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReplyInclude<ExtArgs> | null
    /**
     * The filter to search for the Reply to update in case it exists.
     */
    where: ReplyWhereUniqueInput
    /**
     * In case the Reply found by the `where` argument doesn't exist, create a new Reply with this data.
     */
    create: XOR<ReplyCreateInput, ReplyUncheckedCreateInput>
    /**
     * In case the Reply was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReplyUpdateInput, ReplyUncheckedUpdateInput>
  }

  /**
   * Reply delete
   */
  export type ReplyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reply
     */
    omit?: ReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReplyInclude<ExtArgs> | null
    /**
     * Filter which Reply to delete.
     */
    where: ReplyWhereUniqueInput
  }

  /**
   * Reply deleteMany
   */
  export type ReplyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Replies to delete
     */
    where?: ReplyWhereInput
    /**
     * Limit how many Replies to delete.
     */
    limit?: number
  }

  /**
   * Reply without action
   */
  export type ReplyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reply
     */
    omit?: ReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReplyInclude<ExtArgs> | null
  }


  /**
   * Model FollowRequest
   */

  export type AggregateFollowRequest = {
    _count: FollowRequestCountAggregateOutputType | null
    _min: FollowRequestMinAggregateOutputType | null
    _max: FollowRequestMaxAggregateOutputType | null
  }

  export type FollowRequestMinAggregateOutputType = {
    id: string | null
    status: $Enums.FollowRequestStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    requesterId: string | null
    requestedId: string | null
  }

  export type FollowRequestMaxAggregateOutputType = {
    id: string | null
    status: $Enums.FollowRequestStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    requesterId: string | null
    requestedId: string | null
  }

  export type FollowRequestCountAggregateOutputType = {
    id: number
    status: number
    createdAt: number
    updatedAt: number
    requesterId: number
    requestedId: number
    _all: number
  }


  export type FollowRequestMinAggregateInputType = {
    id?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    requesterId?: true
    requestedId?: true
  }

  export type FollowRequestMaxAggregateInputType = {
    id?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    requesterId?: true
    requestedId?: true
  }

  export type FollowRequestCountAggregateInputType = {
    id?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    requesterId?: true
    requestedId?: true
    _all?: true
  }

  export type FollowRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FollowRequest to aggregate.
     */
    where?: FollowRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FollowRequests to fetch.
     */
    orderBy?: FollowRequestOrderByWithRelationInput | FollowRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FollowRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FollowRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FollowRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FollowRequests
    **/
    _count?: true | FollowRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FollowRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FollowRequestMaxAggregateInputType
  }

  export type GetFollowRequestAggregateType<T extends FollowRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateFollowRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFollowRequest[P]>
      : GetScalarType<T[P], AggregateFollowRequest[P]>
  }




  export type FollowRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FollowRequestWhereInput
    orderBy?: FollowRequestOrderByWithAggregationInput | FollowRequestOrderByWithAggregationInput[]
    by: FollowRequestScalarFieldEnum[] | FollowRequestScalarFieldEnum
    having?: FollowRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FollowRequestCountAggregateInputType | true
    _min?: FollowRequestMinAggregateInputType
    _max?: FollowRequestMaxAggregateInputType
  }

  export type FollowRequestGroupByOutputType = {
    id: string
    status: $Enums.FollowRequestStatus
    createdAt: Date
    updatedAt: Date
    requesterId: string
    requestedId: string
    _count: FollowRequestCountAggregateOutputType | null
    _min: FollowRequestMinAggregateOutputType | null
    _max: FollowRequestMaxAggregateOutputType | null
  }

  type GetFollowRequestGroupByPayload<T extends FollowRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FollowRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FollowRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FollowRequestGroupByOutputType[P]>
            : GetScalarType<T[P], FollowRequestGroupByOutputType[P]>
        }
      >
    >


  export type FollowRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    requesterId?: boolean
    requestedId?: boolean
    requested?: boolean | UserDefaultArgs<ExtArgs>
    requester?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["followRequest"]>

  export type FollowRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    requesterId?: boolean
    requestedId?: boolean
    requested?: boolean | UserDefaultArgs<ExtArgs>
    requester?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["followRequest"]>

  export type FollowRequestSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    requesterId?: boolean
    requestedId?: boolean
    requested?: boolean | UserDefaultArgs<ExtArgs>
    requester?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["followRequest"]>

  export type FollowRequestSelectScalar = {
    id?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    requesterId?: boolean
    requestedId?: boolean
  }

  export type FollowRequestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "status" | "createdAt" | "updatedAt" | "requesterId" | "requestedId", ExtArgs["result"]["followRequest"]>
  export type FollowRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    requested?: boolean | UserDefaultArgs<ExtArgs>
    requester?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FollowRequestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    requested?: boolean | UserDefaultArgs<ExtArgs>
    requester?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FollowRequestIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    requested?: boolean | UserDefaultArgs<ExtArgs>
    requester?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FollowRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FollowRequest"
    objects: {
      requested: Prisma.$UserPayload<ExtArgs>
      requester: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      status: $Enums.FollowRequestStatus
      createdAt: Date
      updatedAt: Date
      requesterId: string
      requestedId: string
    }, ExtArgs["result"]["followRequest"]>
    composites: {}
  }

  type FollowRequestGetPayload<S extends boolean | null | undefined | FollowRequestDefaultArgs> = $Result.GetResult<Prisma.$FollowRequestPayload, S>

  type FollowRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FollowRequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FollowRequestCountAggregateInputType | true
    }

  export interface FollowRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FollowRequest'], meta: { name: 'FollowRequest' } }
    /**
     * Find zero or one FollowRequest that matches the filter.
     * @param {FollowRequestFindUniqueArgs} args - Arguments to find a FollowRequest
     * @example
     * // Get one FollowRequest
     * const followRequest = await prisma.followRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FollowRequestFindUniqueArgs>(args: SelectSubset<T, FollowRequestFindUniqueArgs<ExtArgs>>): Prisma__FollowRequestClient<$Result.GetResult<Prisma.$FollowRequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FollowRequest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FollowRequestFindUniqueOrThrowArgs} args - Arguments to find a FollowRequest
     * @example
     * // Get one FollowRequest
     * const followRequest = await prisma.followRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FollowRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, FollowRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FollowRequestClient<$Result.GetResult<Prisma.$FollowRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FollowRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowRequestFindFirstArgs} args - Arguments to find a FollowRequest
     * @example
     * // Get one FollowRequest
     * const followRequest = await prisma.followRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FollowRequestFindFirstArgs>(args?: SelectSubset<T, FollowRequestFindFirstArgs<ExtArgs>>): Prisma__FollowRequestClient<$Result.GetResult<Prisma.$FollowRequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FollowRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowRequestFindFirstOrThrowArgs} args - Arguments to find a FollowRequest
     * @example
     * // Get one FollowRequest
     * const followRequest = await prisma.followRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FollowRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, FollowRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__FollowRequestClient<$Result.GetResult<Prisma.$FollowRequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FollowRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FollowRequests
     * const followRequests = await prisma.followRequest.findMany()
     * 
     * // Get first 10 FollowRequests
     * const followRequests = await prisma.followRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const followRequestWithIdOnly = await prisma.followRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FollowRequestFindManyArgs>(args?: SelectSubset<T, FollowRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FollowRequest.
     * @param {FollowRequestCreateArgs} args - Arguments to create a FollowRequest.
     * @example
     * // Create one FollowRequest
     * const FollowRequest = await prisma.followRequest.create({
     *   data: {
     *     // ... data to create a FollowRequest
     *   }
     * })
     * 
     */
    create<T extends FollowRequestCreateArgs>(args: SelectSubset<T, FollowRequestCreateArgs<ExtArgs>>): Prisma__FollowRequestClient<$Result.GetResult<Prisma.$FollowRequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FollowRequests.
     * @param {FollowRequestCreateManyArgs} args - Arguments to create many FollowRequests.
     * @example
     * // Create many FollowRequests
     * const followRequest = await prisma.followRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FollowRequestCreateManyArgs>(args?: SelectSubset<T, FollowRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FollowRequests and returns the data saved in the database.
     * @param {FollowRequestCreateManyAndReturnArgs} args - Arguments to create many FollowRequests.
     * @example
     * // Create many FollowRequests
     * const followRequest = await prisma.followRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FollowRequests and only return the `id`
     * const followRequestWithIdOnly = await prisma.followRequest.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FollowRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, FollowRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowRequestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FollowRequest.
     * @param {FollowRequestDeleteArgs} args - Arguments to delete one FollowRequest.
     * @example
     * // Delete one FollowRequest
     * const FollowRequest = await prisma.followRequest.delete({
     *   where: {
     *     // ... filter to delete one FollowRequest
     *   }
     * })
     * 
     */
    delete<T extends FollowRequestDeleteArgs>(args: SelectSubset<T, FollowRequestDeleteArgs<ExtArgs>>): Prisma__FollowRequestClient<$Result.GetResult<Prisma.$FollowRequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FollowRequest.
     * @param {FollowRequestUpdateArgs} args - Arguments to update one FollowRequest.
     * @example
     * // Update one FollowRequest
     * const followRequest = await prisma.followRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FollowRequestUpdateArgs>(args: SelectSubset<T, FollowRequestUpdateArgs<ExtArgs>>): Prisma__FollowRequestClient<$Result.GetResult<Prisma.$FollowRequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FollowRequests.
     * @param {FollowRequestDeleteManyArgs} args - Arguments to filter FollowRequests to delete.
     * @example
     * // Delete a few FollowRequests
     * const { count } = await prisma.followRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FollowRequestDeleteManyArgs>(args?: SelectSubset<T, FollowRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FollowRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FollowRequests
     * const followRequest = await prisma.followRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FollowRequestUpdateManyArgs>(args: SelectSubset<T, FollowRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FollowRequests and returns the data updated in the database.
     * @param {FollowRequestUpdateManyAndReturnArgs} args - Arguments to update many FollowRequests.
     * @example
     * // Update many FollowRequests
     * const followRequest = await prisma.followRequest.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FollowRequests and only return the `id`
     * const followRequestWithIdOnly = await prisma.followRequest.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FollowRequestUpdateManyAndReturnArgs>(args: SelectSubset<T, FollowRequestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowRequestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FollowRequest.
     * @param {FollowRequestUpsertArgs} args - Arguments to update or create a FollowRequest.
     * @example
     * // Update or create a FollowRequest
     * const followRequest = await prisma.followRequest.upsert({
     *   create: {
     *     // ... data to create a FollowRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FollowRequest we want to update
     *   }
     * })
     */
    upsert<T extends FollowRequestUpsertArgs>(args: SelectSubset<T, FollowRequestUpsertArgs<ExtArgs>>): Prisma__FollowRequestClient<$Result.GetResult<Prisma.$FollowRequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FollowRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowRequestCountArgs} args - Arguments to filter FollowRequests to count.
     * @example
     * // Count the number of FollowRequests
     * const count = await prisma.followRequest.count({
     *   where: {
     *     // ... the filter for the FollowRequests we want to count
     *   }
     * })
    **/
    count<T extends FollowRequestCountArgs>(
      args?: Subset<T, FollowRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FollowRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FollowRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FollowRequestAggregateArgs>(args: Subset<T, FollowRequestAggregateArgs>): Prisma.PrismaPromise<GetFollowRequestAggregateType<T>>

    /**
     * Group by FollowRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FollowRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FollowRequestGroupByArgs['orderBy'] }
        : { orderBy?: FollowRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FollowRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFollowRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FollowRequest model
   */
  readonly fields: FollowRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FollowRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FollowRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    requested<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    requester<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FollowRequest model
   */
  interface FollowRequestFieldRefs {
    readonly id: FieldRef<"FollowRequest", 'String'>
    readonly status: FieldRef<"FollowRequest", 'FollowRequestStatus'>
    readonly createdAt: FieldRef<"FollowRequest", 'DateTime'>
    readonly updatedAt: FieldRef<"FollowRequest", 'DateTime'>
    readonly requesterId: FieldRef<"FollowRequest", 'String'>
    readonly requestedId: FieldRef<"FollowRequest", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FollowRequest findUnique
   */
  export type FollowRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FollowRequest
     */
    select?: FollowRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FollowRequest
     */
    omit?: FollowRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowRequestInclude<ExtArgs> | null
    /**
     * Filter, which FollowRequest to fetch.
     */
    where: FollowRequestWhereUniqueInput
  }

  /**
   * FollowRequest findUniqueOrThrow
   */
  export type FollowRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FollowRequest
     */
    select?: FollowRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FollowRequest
     */
    omit?: FollowRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowRequestInclude<ExtArgs> | null
    /**
     * Filter, which FollowRequest to fetch.
     */
    where: FollowRequestWhereUniqueInput
  }

  /**
   * FollowRequest findFirst
   */
  export type FollowRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FollowRequest
     */
    select?: FollowRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FollowRequest
     */
    omit?: FollowRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowRequestInclude<ExtArgs> | null
    /**
     * Filter, which FollowRequest to fetch.
     */
    where?: FollowRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FollowRequests to fetch.
     */
    orderBy?: FollowRequestOrderByWithRelationInput | FollowRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FollowRequests.
     */
    cursor?: FollowRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FollowRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FollowRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FollowRequests.
     */
    distinct?: FollowRequestScalarFieldEnum | FollowRequestScalarFieldEnum[]
  }

  /**
   * FollowRequest findFirstOrThrow
   */
  export type FollowRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FollowRequest
     */
    select?: FollowRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FollowRequest
     */
    omit?: FollowRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowRequestInclude<ExtArgs> | null
    /**
     * Filter, which FollowRequest to fetch.
     */
    where?: FollowRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FollowRequests to fetch.
     */
    orderBy?: FollowRequestOrderByWithRelationInput | FollowRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FollowRequests.
     */
    cursor?: FollowRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FollowRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FollowRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FollowRequests.
     */
    distinct?: FollowRequestScalarFieldEnum | FollowRequestScalarFieldEnum[]
  }

  /**
   * FollowRequest findMany
   */
  export type FollowRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FollowRequest
     */
    select?: FollowRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FollowRequest
     */
    omit?: FollowRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowRequestInclude<ExtArgs> | null
    /**
     * Filter, which FollowRequests to fetch.
     */
    where?: FollowRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FollowRequests to fetch.
     */
    orderBy?: FollowRequestOrderByWithRelationInput | FollowRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FollowRequests.
     */
    cursor?: FollowRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FollowRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FollowRequests.
     */
    skip?: number
    distinct?: FollowRequestScalarFieldEnum | FollowRequestScalarFieldEnum[]
  }

  /**
   * FollowRequest create
   */
  export type FollowRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FollowRequest
     */
    select?: FollowRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FollowRequest
     */
    omit?: FollowRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a FollowRequest.
     */
    data: XOR<FollowRequestCreateInput, FollowRequestUncheckedCreateInput>
  }

  /**
   * FollowRequest createMany
   */
  export type FollowRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FollowRequests.
     */
    data: FollowRequestCreateManyInput | FollowRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FollowRequest createManyAndReturn
   */
  export type FollowRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FollowRequest
     */
    select?: FollowRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FollowRequest
     */
    omit?: FollowRequestOmit<ExtArgs> | null
    /**
     * The data used to create many FollowRequests.
     */
    data: FollowRequestCreateManyInput | FollowRequestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowRequestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FollowRequest update
   */
  export type FollowRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FollowRequest
     */
    select?: FollowRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FollowRequest
     */
    omit?: FollowRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a FollowRequest.
     */
    data: XOR<FollowRequestUpdateInput, FollowRequestUncheckedUpdateInput>
    /**
     * Choose, which FollowRequest to update.
     */
    where: FollowRequestWhereUniqueInput
  }

  /**
   * FollowRequest updateMany
   */
  export type FollowRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FollowRequests.
     */
    data: XOR<FollowRequestUpdateManyMutationInput, FollowRequestUncheckedUpdateManyInput>
    /**
     * Filter which FollowRequests to update
     */
    where?: FollowRequestWhereInput
    /**
     * Limit how many FollowRequests to update.
     */
    limit?: number
  }

  /**
   * FollowRequest updateManyAndReturn
   */
  export type FollowRequestUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FollowRequest
     */
    select?: FollowRequestSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FollowRequest
     */
    omit?: FollowRequestOmit<ExtArgs> | null
    /**
     * The data used to update FollowRequests.
     */
    data: XOR<FollowRequestUpdateManyMutationInput, FollowRequestUncheckedUpdateManyInput>
    /**
     * Filter which FollowRequests to update
     */
    where?: FollowRequestWhereInput
    /**
     * Limit how many FollowRequests to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowRequestIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FollowRequest upsert
   */
  export type FollowRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FollowRequest
     */
    select?: FollowRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FollowRequest
     */
    omit?: FollowRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the FollowRequest to update in case it exists.
     */
    where: FollowRequestWhereUniqueInput
    /**
     * In case the FollowRequest found by the `where` argument doesn't exist, create a new FollowRequest with this data.
     */
    create: XOR<FollowRequestCreateInput, FollowRequestUncheckedCreateInput>
    /**
     * In case the FollowRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FollowRequestUpdateInput, FollowRequestUncheckedUpdateInput>
  }

  /**
   * FollowRequest delete
   */
  export type FollowRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FollowRequest
     */
    select?: FollowRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FollowRequest
     */
    omit?: FollowRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowRequestInclude<ExtArgs> | null
    /**
     * Filter which FollowRequest to delete.
     */
    where: FollowRequestWhereUniqueInput
  }

  /**
   * FollowRequest deleteMany
   */
  export type FollowRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FollowRequests to delete
     */
    where?: FollowRequestWhereInput
    /**
     * Limit how many FollowRequests to delete.
     */
    limit?: number
  }

  /**
   * FollowRequest without action
   */
  export type FollowRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FollowRequest
     */
    select?: FollowRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FollowRequest
     */
    omit?: FollowRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowRequestInclude<ExtArgs> | null
  }


  /**
   * Model Follow
   */

  export type AggregateFollow = {
    _count: FollowCountAggregateOutputType | null
    _min: FollowMinAggregateOutputType | null
    _max: FollowMaxAggregateOutputType | null
  }

  export type FollowMinAggregateOutputType = {
    id: string | null
    followerId: string | null
    followingId: string | null
    createdAt: Date | null
  }

  export type FollowMaxAggregateOutputType = {
    id: string | null
    followerId: string | null
    followingId: string | null
    createdAt: Date | null
  }

  export type FollowCountAggregateOutputType = {
    id: number
    followerId: number
    followingId: number
    createdAt: number
    _all: number
  }


  export type FollowMinAggregateInputType = {
    id?: true
    followerId?: true
    followingId?: true
    createdAt?: true
  }

  export type FollowMaxAggregateInputType = {
    id?: true
    followerId?: true
    followingId?: true
    createdAt?: true
  }

  export type FollowCountAggregateInputType = {
    id?: true
    followerId?: true
    followingId?: true
    createdAt?: true
    _all?: true
  }

  export type FollowAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Follow to aggregate.
     */
    where?: FollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     */
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Follows
    **/
    _count?: true | FollowCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FollowMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FollowMaxAggregateInputType
  }

  export type GetFollowAggregateType<T extends FollowAggregateArgs> = {
        [P in keyof T & keyof AggregateFollow]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFollow[P]>
      : GetScalarType<T[P], AggregateFollow[P]>
  }




  export type FollowGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FollowWhereInput
    orderBy?: FollowOrderByWithAggregationInput | FollowOrderByWithAggregationInput[]
    by: FollowScalarFieldEnum[] | FollowScalarFieldEnum
    having?: FollowScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FollowCountAggregateInputType | true
    _min?: FollowMinAggregateInputType
    _max?: FollowMaxAggregateInputType
  }

  export type FollowGroupByOutputType = {
    id: string
    followerId: string
    followingId: string
    createdAt: Date
    _count: FollowCountAggregateOutputType | null
    _min: FollowMinAggregateOutputType | null
    _max: FollowMaxAggregateOutputType | null
  }

  type GetFollowGroupByPayload<T extends FollowGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FollowGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FollowGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FollowGroupByOutputType[P]>
            : GetScalarType<T[P], FollowGroupByOutputType[P]>
        }
      >
    >


  export type FollowSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    followerId?: boolean
    followingId?: boolean
    createdAt?: boolean
    follower?: boolean | UserDefaultArgs<ExtArgs>
    following?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["follow"]>

  export type FollowSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    followerId?: boolean
    followingId?: boolean
    createdAt?: boolean
    follower?: boolean | UserDefaultArgs<ExtArgs>
    following?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["follow"]>

  export type FollowSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    followerId?: boolean
    followingId?: boolean
    createdAt?: boolean
    follower?: boolean | UserDefaultArgs<ExtArgs>
    following?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["follow"]>

  export type FollowSelectScalar = {
    id?: boolean
    followerId?: boolean
    followingId?: boolean
    createdAt?: boolean
  }

  export type FollowOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "followerId" | "followingId" | "createdAt", ExtArgs["result"]["follow"]>
  export type FollowInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    follower?: boolean | UserDefaultArgs<ExtArgs>
    following?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FollowIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    follower?: boolean | UserDefaultArgs<ExtArgs>
    following?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FollowIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    follower?: boolean | UserDefaultArgs<ExtArgs>
    following?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FollowPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Follow"
    objects: {
      follower: Prisma.$UserPayload<ExtArgs>
      following: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      followerId: string
      followingId: string
      createdAt: Date
    }, ExtArgs["result"]["follow"]>
    composites: {}
  }

  type FollowGetPayload<S extends boolean | null | undefined | FollowDefaultArgs> = $Result.GetResult<Prisma.$FollowPayload, S>

  type FollowCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FollowFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FollowCountAggregateInputType | true
    }

  export interface FollowDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Follow'], meta: { name: 'Follow' } }
    /**
     * Find zero or one Follow that matches the filter.
     * @param {FollowFindUniqueArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FollowFindUniqueArgs>(args: SelectSubset<T, FollowFindUniqueArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Follow that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FollowFindUniqueOrThrowArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FollowFindUniqueOrThrowArgs>(args: SelectSubset<T, FollowFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Follow that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowFindFirstArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FollowFindFirstArgs>(args?: SelectSubset<T, FollowFindFirstArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Follow that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowFindFirstOrThrowArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FollowFindFirstOrThrowArgs>(args?: SelectSubset<T, FollowFindFirstOrThrowArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Follows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Follows
     * const follows = await prisma.follow.findMany()
     * 
     * // Get first 10 Follows
     * const follows = await prisma.follow.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const followWithIdOnly = await prisma.follow.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FollowFindManyArgs>(args?: SelectSubset<T, FollowFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Follow.
     * @param {FollowCreateArgs} args - Arguments to create a Follow.
     * @example
     * // Create one Follow
     * const Follow = await prisma.follow.create({
     *   data: {
     *     // ... data to create a Follow
     *   }
     * })
     * 
     */
    create<T extends FollowCreateArgs>(args: SelectSubset<T, FollowCreateArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Follows.
     * @param {FollowCreateManyArgs} args - Arguments to create many Follows.
     * @example
     * // Create many Follows
     * const follow = await prisma.follow.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FollowCreateManyArgs>(args?: SelectSubset<T, FollowCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Follows and returns the data saved in the database.
     * @param {FollowCreateManyAndReturnArgs} args - Arguments to create many Follows.
     * @example
     * // Create many Follows
     * const follow = await prisma.follow.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Follows and only return the `id`
     * const followWithIdOnly = await prisma.follow.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FollowCreateManyAndReturnArgs>(args?: SelectSubset<T, FollowCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Follow.
     * @param {FollowDeleteArgs} args - Arguments to delete one Follow.
     * @example
     * // Delete one Follow
     * const Follow = await prisma.follow.delete({
     *   where: {
     *     // ... filter to delete one Follow
     *   }
     * })
     * 
     */
    delete<T extends FollowDeleteArgs>(args: SelectSubset<T, FollowDeleteArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Follow.
     * @param {FollowUpdateArgs} args - Arguments to update one Follow.
     * @example
     * // Update one Follow
     * const follow = await prisma.follow.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FollowUpdateArgs>(args: SelectSubset<T, FollowUpdateArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Follows.
     * @param {FollowDeleteManyArgs} args - Arguments to filter Follows to delete.
     * @example
     * // Delete a few Follows
     * const { count } = await prisma.follow.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FollowDeleteManyArgs>(args?: SelectSubset<T, FollowDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Follows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Follows
     * const follow = await prisma.follow.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FollowUpdateManyArgs>(args: SelectSubset<T, FollowUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Follows and returns the data updated in the database.
     * @param {FollowUpdateManyAndReturnArgs} args - Arguments to update many Follows.
     * @example
     * // Update many Follows
     * const follow = await prisma.follow.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Follows and only return the `id`
     * const followWithIdOnly = await prisma.follow.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FollowUpdateManyAndReturnArgs>(args: SelectSubset<T, FollowUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Follow.
     * @param {FollowUpsertArgs} args - Arguments to update or create a Follow.
     * @example
     * // Update or create a Follow
     * const follow = await prisma.follow.upsert({
     *   create: {
     *     // ... data to create a Follow
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Follow we want to update
     *   }
     * })
     */
    upsert<T extends FollowUpsertArgs>(args: SelectSubset<T, FollowUpsertArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Follows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowCountArgs} args - Arguments to filter Follows to count.
     * @example
     * // Count the number of Follows
     * const count = await prisma.follow.count({
     *   where: {
     *     // ... the filter for the Follows we want to count
     *   }
     * })
    **/
    count<T extends FollowCountArgs>(
      args?: Subset<T, FollowCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FollowCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Follow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FollowAggregateArgs>(args: Subset<T, FollowAggregateArgs>): Prisma.PrismaPromise<GetFollowAggregateType<T>>

    /**
     * Group by Follow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FollowGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FollowGroupByArgs['orderBy'] }
        : { orderBy?: FollowGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FollowGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFollowGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Follow model
   */
  readonly fields: FollowFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Follow.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FollowClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    follower<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    following<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Follow model
   */
  interface FollowFieldRefs {
    readonly id: FieldRef<"Follow", 'String'>
    readonly followerId: FieldRef<"Follow", 'String'>
    readonly followingId: FieldRef<"Follow", 'String'>
    readonly createdAt: FieldRef<"Follow", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Follow findUnique
   */
  export type FollowFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * Filter, which Follow to fetch.
     */
    where: FollowWhereUniqueInput
  }

  /**
   * Follow findUniqueOrThrow
   */
  export type FollowFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * Filter, which Follow to fetch.
     */
    where: FollowWhereUniqueInput
  }

  /**
   * Follow findFirst
   */
  export type FollowFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * Filter, which Follow to fetch.
     */
    where?: FollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     */
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Follows.
     */
    cursor?: FollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Follows.
     */
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[]
  }

  /**
   * Follow findFirstOrThrow
   */
  export type FollowFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * Filter, which Follow to fetch.
     */
    where?: FollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     */
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Follows.
     */
    cursor?: FollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Follows.
     */
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[]
  }

  /**
   * Follow findMany
   */
  export type FollowFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * Filter, which Follows to fetch.
     */
    where?: FollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     */
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Follows.
     */
    cursor?: FollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     */
    skip?: number
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[]
  }

  /**
   * Follow create
   */
  export type FollowCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * The data needed to create a Follow.
     */
    data: XOR<FollowCreateInput, FollowUncheckedCreateInput>
  }

  /**
   * Follow createMany
   */
  export type FollowCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Follows.
     */
    data: FollowCreateManyInput | FollowCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Follow createManyAndReturn
   */
  export type FollowCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * The data used to create many Follows.
     */
    data: FollowCreateManyInput | FollowCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Follow update
   */
  export type FollowUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * The data needed to update a Follow.
     */
    data: XOR<FollowUpdateInput, FollowUncheckedUpdateInput>
    /**
     * Choose, which Follow to update.
     */
    where: FollowWhereUniqueInput
  }

  /**
   * Follow updateMany
   */
  export type FollowUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Follows.
     */
    data: XOR<FollowUpdateManyMutationInput, FollowUncheckedUpdateManyInput>
    /**
     * Filter which Follows to update
     */
    where?: FollowWhereInput
    /**
     * Limit how many Follows to update.
     */
    limit?: number
  }

  /**
   * Follow updateManyAndReturn
   */
  export type FollowUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * The data used to update Follows.
     */
    data: XOR<FollowUpdateManyMutationInput, FollowUncheckedUpdateManyInput>
    /**
     * Filter which Follows to update
     */
    where?: FollowWhereInput
    /**
     * Limit how many Follows to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Follow upsert
   */
  export type FollowUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * The filter to search for the Follow to update in case it exists.
     */
    where: FollowWhereUniqueInput
    /**
     * In case the Follow found by the `where` argument doesn't exist, create a new Follow with this data.
     */
    create: XOR<FollowCreateInput, FollowUncheckedCreateInput>
    /**
     * In case the Follow was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FollowUpdateInput, FollowUncheckedUpdateInput>
  }

  /**
   * Follow delete
   */
  export type FollowDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * Filter which Follow to delete.
     */
    where: FollowWhereUniqueInput
  }

  /**
   * Follow deleteMany
   */
  export type FollowDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Follows to delete
     */
    where?: FollowWhereInput
    /**
     * Limit how many Follows to delete.
     */
    limit?: number
  }

  /**
   * Follow without action
   */
  export type FollowDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TagScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt'
  };

  export type TagScalarFieldEnum = (typeof TagScalarFieldEnum)[keyof typeof TagScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    clerkId: 'clerkId',
    username: 'username',
    name: 'name',
    bio: 'bio',
    image: 'image',
    coverImageUrl: 'coverImageUrl',
    socialLinks: 'socialLinks',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isPrivate: 'isPrivate',
    birthday: 'birthday',
    location: 'location'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const RankingListScalarFieldEnum: {
    id: 'id',
    subject: 'subject',
    description: 'description',
    status: 'status',
    listImageUrl: 'listImageUrl',
    authorId: 'authorId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    displayOrder: 'displayOrder',
    likeCount: 'likeCount'
  };

  export type RankingListScalarFieldEnum = (typeof RankingListScalarFieldEnum)[keyof typeof RankingListScalarFieldEnum]


  export const RankedItemScalarFieldEnum: {
    id: 'id',
    itemName: 'itemName',
    rank: 'rank',
    imageUrl: 'imageUrl',
    itemDescription: 'itemDescription',
    listId: 'listId',
    createdAt: 'createdAt'
  };

  export type RankedItemScalarFieldEnum = (typeof RankedItemScalarFieldEnum)[keyof typeof RankedItemScalarFieldEnum]


  export const RankingListTagScalarFieldEnum: {
    id: 'id',
    listId: 'listId',
    tagId: 'tagId'
  };

  export type RankingListTagScalarFieldEnum = (typeof RankingListTagScalarFieldEnum)[keyof typeof RankingListTagScalarFieldEnum]


  export const RankingListCommentScalarFieldEnum: {
    id: 'id',
    listId: 'listId',
    userId: 'userId',
    content: 'content',
    createdAt: 'createdAt'
  };

  export type RankingListCommentScalarFieldEnum = (typeof RankingListCommentScalarFieldEnum)[keyof typeof RankingListCommentScalarFieldEnum]


  export const TrendingSubjectScalarFieldEnum: {
    id: 'id',
    subject: 'subject',
    count: 'count',
    period: 'period',
    calculationDate: 'calculationDate'
  };

  export type TrendingSubjectScalarFieldEnum = (typeof TrendingSubjectScalarFieldEnum)[keyof typeof TrendingSubjectScalarFieldEnum]


  export const TrendingTagScalarFieldEnum: {
    id: 'id',
    tagId: 'tagId',
    tagName: 'tagName',
    count: 'count',
    period: 'period',
    calculationDate: 'calculationDate'
  };

  export type TrendingTagScalarFieldEnum = (typeof TrendingTagScalarFieldEnum)[keyof typeof TrendingTagScalarFieldEnum]


  export const TrendingItemScalarFieldEnum: {
    id: 'id',
    itemName: 'itemName',
    rankScore: 'rankScore',
    period: 'period',
    calculationDate: 'calculationDate'
  };

  export type TrendingItemScalarFieldEnum = (typeof TrendingItemScalarFieldEnum)[keyof typeof TrendingItemScalarFieldEnum]


  export const AverageItemRankScalarFieldEnum: {
    id: 'id',
    subject: 'subject',
    itemName: 'itemName',
    avgRank: 'avgRank',
    calculationDate: 'calculationDate',
    count: 'count'
  };

  export type AverageItemRankScalarFieldEnum = (typeof AverageItemRankScalarFieldEnum)[keyof typeof AverageItemRankScalarFieldEnum]


  export const AverageItemCommentScalarFieldEnum: {
    id: 'id',
    subject: 'subject',
    userId: 'userId',
    content: 'content',
    createdAt: 'createdAt'
  };

  export type AverageItemCommentScalarFieldEnum = (typeof AverageItemCommentScalarFieldEnum)[keyof typeof AverageItemCommentScalarFieldEnum]


  export const PostScalarFieldEnum: {
    id: 'id',
    content: 'content',
    authorId: 'authorId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    likeCount: 'likeCount',
    imageUrl: 'imageUrl'
  };

  export type PostScalarFieldEnum = (typeof PostScalarFieldEnum)[keyof typeof PostScalarFieldEnum]


  export const RetweetScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    feedItemId: 'feedItemId',
    createdAt: 'createdAt'
  };

  export type RetweetScalarFieldEnum = (typeof RetweetScalarFieldEnum)[keyof typeof RetweetScalarFieldEnum]


  export const FeedItemScalarFieldEnum: {
    id: 'id',
    type: 'type',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    postId: 'postId',
    rankingListId: 'rankingListId',
    retweetOfFeedItemId: 'retweetOfFeedItemId',
    quotedFeedItemId: 'quotedFeedItemId',
    quoteRetweetCount: 'quoteRetweetCount'
  };

  export type FeedItemScalarFieldEnum = (typeof FeedItemScalarFieldEnum)[keyof typeof FeedItemScalarFieldEnum]


  export const LikeScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    createdAt: 'createdAt',
    postId: 'postId',
    rankingListId: 'rankingListId'
  };

  export type LikeScalarFieldEnum = (typeof LikeScalarFieldEnum)[keyof typeof LikeScalarFieldEnum]


  export const ReplyScalarFieldEnum: {
    id: 'id',
    content: 'content',
    userId: 'userId',
    postId: 'postId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ReplyScalarFieldEnum = (typeof ReplyScalarFieldEnum)[keyof typeof ReplyScalarFieldEnum]


  export const FollowRequestScalarFieldEnum: {
    id: 'id',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    requesterId: 'requesterId',
    requestedId: 'requestedId'
  };

  export type FollowRequestScalarFieldEnum = (typeof FollowRequestScalarFieldEnum)[keyof typeof FollowRequestScalarFieldEnum]


  export const FollowScalarFieldEnum: {
    id: 'id',
    followerId: 'followerId',
    followingId: 'followingId',
    createdAt: 'createdAt'
  };

  export type FollowScalarFieldEnum = (typeof FollowScalarFieldEnum)[keyof typeof FollowScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'ListStatus'
   */
  export type EnumListStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ListStatus'>
    


  /**
   * Reference to a field of type 'ListStatus[]'
   */
  export type ListEnumListStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ListStatus[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'TrendPeriod'
   */
  export type EnumTrendPeriodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TrendPeriod'>
    


  /**
   * Reference to a field of type 'TrendPeriod[]'
   */
  export type ListEnumTrendPeriodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TrendPeriod[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'FeedType'
   */
  export type EnumFeedTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FeedType'>
    


  /**
   * Reference to a field of type 'FeedType[]'
   */
  export type ListEnumFeedTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FeedType[]'>
    


  /**
   * Reference to a field of type 'FollowRequestStatus'
   */
  export type EnumFollowRequestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FollowRequestStatus'>
    


  /**
   * Reference to a field of type 'FollowRequestStatus[]'
   */
  export type ListEnumFollowRequestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FollowRequestStatus[]'>
    
  /**
   * Deep Input Types
   */


  export type TagWhereInput = {
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    id?: StringFilter<"Tag"> | string
    name?: StringFilter<"Tag"> | string
    createdAt?: DateTimeFilter<"Tag"> | Date | string
    trendingStats?: TrendingTagListRelationFilter
    rankingListTags?: RankingListTagListRelationFilter
  }

  export type TagOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    trendingStats?: TrendingTagOrderByRelationAggregateInput
    rankingListTags?: RankingListTagOrderByRelationAggregateInput
  }

  export type TagWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    createdAt?: DateTimeFilter<"Tag"> | Date | string
    trendingStats?: TrendingTagListRelationFilter
    rankingListTags?: RankingListTagListRelationFilter
  }, "id" | "name">

  export type TagOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    _count?: TagCountOrderByAggregateInput
    _max?: TagMaxOrderByAggregateInput
    _min?: TagMinOrderByAggregateInput
  }

  export type TagScalarWhereWithAggregatesInput = {
    AND?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    OR?: TagScalarWhereWithAggregatesInput[]
    NOT?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Tag"> | string
    name?: StringWithAggregatesFilter<"Tag"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Tag"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    clerkId?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    bio?: StringNullableFilter<"User"> | string | null
    image?: StringNullableFilter<"User"> | string | null
    coverImageUrl?: StringNullableFilter<"User"> | string | null
    socialLinks?: JsonNullableFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    isPrivate?: BoolFilter<"User"> | boolean
    birthday?: DateTimeNullableFilter<"User"> | Date | string | null
    location?: StringNullableFilter<"User"> | string | null
    feedItems?: FeedItemListRelationFilter
    following?: FollowListRelationFilter
    followedBy?: FollowListRelationFilter
    receivedFollowRequests?: FollowRequestListRelationFilter
    sentFollowRequests?: FollowRequestListRelationFilter
    likes?: LikeListRelationFilter
    posts?: PostListRelationFilter
    rankingLists?: RankingListListRelationFilter
    replies?: ReplyListRelationFilter
    retweets?: RetweetListRelationFilter
    rankingListComments?: RankingListCommentListRelationFilter
    averageItemComments?: AverageItemCommentListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    clerkId?: SortOrder
    username?: SortOrder
    name?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    coverImageUrl?: SortOrderInput | SortOrder
    socialLinks?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isPrivate?: SortOrder
    birthday?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    feedItems?: FeedItemOrderByRelationAggregateInput
    following?: FollowOrderByRelationAggregateInput
    followedBy?: FollowOrderByRelationAggregateInput
    receivedFollowRequests?: FollowRequestOrderByRelationAggregateInput
    sentFollowRequests?: FollowRequestOrderByRelationAggregateInput
    likes?: LikeOrderByRelationAggregateInput
    posts?: PostOrderByRelationAggregateInput
    rankingLists?: RankingListOrderByRelationAggregateInput
    replies?: ReplyOrderByRelationAggregateInput
    retweets?: RetweetOrderByRelationAggregateInput
    rankingListComments?: RankingListCommentOrderByRelationAggregateInput
    averageItemComments?: AverageItemCommentOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    clerkId?: string
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    bio?: StringNullableFilter<"User"> | string | null
    image?: StringNullableFilter<"User"> | string | null
    coverImageUrl?: StringNullableFilter<"User"> | string | null
    socialLinks?: JsonNullableFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    isPrivate?: BoolFilter<"User"> | boolean
    birthday?: DateTimeNullableFilter<"User"> | Date | string | null
    location?: StringNullableFilter<"User"> | string | null
    feedItems?: FeedItemListRelationFilter
    following?: FollowListRelationFilter
    followedBy?: FollowListRelationFilter
    receivedFollowRequests?: FollowRequestListRelationFilter
    sentFollowRequests?: FollowRequestListRelationFilter
    likes?: LikeListRelationFilter
    posts?: PostListRelationFilter
    rankingLists?: RankingListListRelationFilter
    replies?: ReplyListRelationFilter
    retweets?: RetweetListRelationFilter
    rankingListComments?: RankingListCommentListRelationFilter
    averageItemComments?: AverageItemCommentListRelationFilter
  }, "id" | "clerkId" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    clerkId?: SortOrder
    username?: SortOrder
    name?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    coverImageUrl?: SortOrderInput | SortOrder
    socialLinks?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isPrivate?: SortOrder
    birthday?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    clerkId?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    bio?: StringNullableWithAggregatesFilter<"User"> | string | null
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    coverImageUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    socialLinks?: JsonNullableWithAggregatesFilter<"User">
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    isPrivate?: BoolWithAggregatesFilter<"User"> | boolean
    birthday?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    location?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type RankingListWhereInput = {
    AND?: RankingListWhereInput | RankingListWhereInput[]
    OR?: RankingListWhereInput[]
    NOT?: RankingListWhereInput | RankingListWhereInput[]
    id?: StringFilter<"RankingList"> | string
    subject?: StringFilter<"RankingList"> | string
    description?: StringNullableFilter<"RankingList"> | string | null
    status?: EnumListStatusFilter<"RankingList"> | $Enums.ListStatus
    listImageUrl?: StringNullableFilter<"RankingList"> | string | null
    authorId?: StringFilter<"RankingList"> | string
    createdAt?: DateTimeFilter<"RankingList"> | Date | string
    updatedAt?: DateTimeFilter<"RankingList"> | Date | string
    displayOrder?: IntNullableFilter<"RankingList"> | number | null
    likeCount?: IntFilter<"RankingList"> | number
    feedItems?: FeedItemListRelationFilter
    likes?: LikeListRelationFilter
    items?: RankedItemListRelationFilter
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    rankingListTags?: RankingListTagListRelationFilter
  }

  export type RankingListOrderByWithRelationInput = {
    id?: SortOrder
    subject?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    listImageUrl?: SortOrderInput | SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    displayOrder?: SortOrderInput | SortOrder
    likeCount?: SortOrder
    feedItems?: FeedItemOrderByRelationAggregateInput
    likes?: LikeOrderByRelationAggregateInput
    items?: RankedItemOrderByRelationAggregateInput
    author?: UserOrderByWithRelationInput
    rankingListTags?: RankingListTagOrderByRelationAggregateInput
  }

  export type RankingListWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RankingListWhereInput | RankingListWhereInput[]
    OR?: RankingListWhereInput[]
    NOT?: RankingListWhereInput | RankingListWhereInput[]
    subject?: StringFilter<"RankingList"> | string
    description?: StringNullableFilter<"RankingList"> | string | null
    status?: EnumListStatusFilter<"RankingList"> | $Enums.ListStatus
    listImageUrl?: StringNullableFilter<"RankingList"> | string | null
    authorId?: StringFilter<"RankingList"> | string
    createdAt?: DateTimeFilter<"RankingList"> | Date | string
    updatedAt?: DateTimeFilter<"RankingList"> | Date | string
    displayOrder?: IntNullableFilter<"RankingList"> | number | null
    likeCount?: IntFilter<"RankingList"> | number
    feedItems?: FeedItemListRelationFilter
    likes?: LikeListRelationFilter
    items?: RankedItemListRelationFilter
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    rankingListTags?: RankingListTagListRelationFilter
  }, "id">

  export type RankingListOrderByWithAggregationInput = {
    id?: SortOrder
    subject?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    listImageUrl?: SortOrderInput | SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    displayOrder?: SortOrderInput | SortOrder
    likeCount?: SortOrder
    _count?: RankingListCountOrderByAggregateInput
    _avg?: RankingListAvgOrderByAggregateInput
    _max?: RankingListMaxOrderByAggregateInput
    _min?: RankingListMinOrderByAggregateInput
    _sum?: RankingListSumOrderByAggregateInput
  }

  export type RankingListScalarWhereWithAggregatesInput = {
    AND?: RankingListScalarWhereWithAggregatesInput | RankingListScalarWhereWithAggregatesInput[]
    OR?: RankingListScalarWhereWithAggregatesInput[]
    NOT?: RankingListScalarWhereWithAggregatesInput | RankingListScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RankingList"> | string
    subject?: StringWithAggregatesFilter<"RankingList"> | string
    description?: StringNullableWithAggregatesFilter<"RankingList"> | string | null
    status?: EnumListStatusWithAggregatesFilter<"RankingList"> | $Enums.ListStatus
    listImageUrl?: StringNullableWithAggregatesFilter<"RankingList"> | string | null
    authorId?: StringWithAggregatesFilter<"RankingList"> | string
    createdAt?: DateTimeWithAggregatesFilter<"RankingList"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RankingList"> | Date | string
    displayOrder?: IntNullableWithAggregatesFilter<"RankingList"> | number | null
    likeCount?: IntWithAggregatesFilter<"RankingList"> | number
  }

  export type RankedItemWhereInput = {
    AND?: RankedItemWhereInput | RankedItemWhereInput[]
    OR?: RankedItemWhereInput[]
    NOT?: RankedItemWhereInput | RankedItemWhereInput[]
    id?: StringFilter<"RankedItem"> | string
    itemName?: StringFilter<"RankedItem"> | string
    rank?: IntFilter<"RankedItem"> | number
    imageUrl?: StringNullableFilter<"RankedItem"> | string | null
    itemDescription?: StringNullableFilter<"RankedItem"> | string | null
    listId?: StringFilter<"RankedItem"> | string
    createdAt?: DateTimeFilter<"RankedItem"> | Date | string
    rankingList?: XOR<RankingListScalarRelationFilter, RankingListWhereInput>
  }

  export type RankedItemOrderByWithRelationInput = {
    id?: SortOrder
    itemName?: SortOrder
    rank?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    itemDescription?: SortOrderInput | SortOrder
    listId?: SortOrder
    createdAt?: SortOrder
    rankingList?: RankingListOrderByWithRelationInput
  }

  export type RankedItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RankedItemWhereInput | RankedItemWhereInput[]
    OR?: RankedItemWhereInput[]
    NOT?: RankedItemWhereInput | RankedItemWhereInput[]
    itemName?: StringFilter<"RankedItem"> | string
    rank?: IntFilter<"RankedItem"> | number
    imageUrl?: StringNullableFilter<"RankedItem"> | string | null
    itemDescription?: StringNullableFilter<"RankedItem"> | string | null
    listId?: StringFilter<"RankedItem"> | string
    createdAt?: DateTimeFilter<"RankedItem"> | Date | string
    rankingList?: XOR<RankingListScalarRelationFilter, RankingListWhereInput>
  }, "id">

  export type RankedItemOrderByWithAggregationInput = {
    id?: SortOrder
    itemName?: SortOrder
    rank?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    itemDescription?: SortOrderInput | SortOrder
    listId?: SortOrder
    createdAt?: SortOrder
    _count?: RankedItemCountOrderByAggregateInput
    _avg?: RankedItemAvgOrderByAggregateInput
    _max?: RankedItemMaxOrderByAggregateInput
    _min?: RankedItemMinOrderByAggregateInput
    _sum?: RankedItemSumOrderByAggregateInput
  }

  export type RankedItemScalarWhereWithAggregatesInput = {
    AND?: RankedItemScalarWhereWithAggregatesInput | RankedItemScalarWhereWithAggregatesInput[]
    OR?: RankedItemScalarWhereWithAggregatesInput[]
    NOT?: RankedItemScalarWhereWithAggregatesInput | RankedItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RankedItem"> | string
    itemName?: StringWithAggregatesFilter<"RankedItem"> | string
    rank?: IntWithAggregatesFilter<"RankedItem"> | number
    imageUrl?: StringNullableWithAggregatesFilter<"RankedItem"> | string | null
    itemDescription?: StringNullableWithAggregatesFilter<"RankedItem"> | string | null
    listId?: StringWithAggregatesFilter<"RankedItem"> | string
    createdAt?: DateTimeWithAggregatesFilter<"RankedItem"> | Date | string
  }

  export type RankingListTagWhereInput = {
    AND?: RankingListTagWhereInput | RankingListTagWhereInput[]
    OR?: RankingListTagWhereInput[]
    NOT?: RankingListTagWhereInput | RankingListTagWhereInput[]
    id?: StringFilter<"RankingListTag"> | string
    listId?: StringFilter<"RankingListTag"> | string
    tagId?: StringFilter<"RankingListTag"> | string
    list?: XOR<RankingListScalarRelationFilter, RankingListWhereInput>
    tag?: XOR<TagScalarRelationFilter, TagWhereInput>
  }

  export type RankingListTagOrderByWithRelationInput = {
    id?: SortOrder
    listId?: SortOrder
    tagId?: SortOrder
    list?: RankingListOrderByWithRelationInput
    tag?: TagOrderByWithRelationInput
  }

  export type RankingListTagWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    listId_tagId?: RankingListTagListIdTagIdCompoundUniqueInput
    AND?: RankingListTagWhereInput | RankingListTagWhereInput[]
    OR?: RankingListTagWhereInput[]
    NOT?: RankingListTagWhereInput | RankingListTagWhereInput[]
    listId?: StringFilter<"RankingListTag"> | string
    tagId?: StringFilter<"RankingListTag"> | string
    list?: XOR<RankingListScalarRelationFilter, RankingListWhereInput>
    tag?: XOR<TagScalarRelationFilter, TagWhereInput>
  }, "id" | "listId_tagId">

  export type RankingListTagOrderByWithAggregationInput = {
    id?: SortOrder
    listId?: SortOrder
    tagId?: SortOrder
    _count?: RankingListTagCountOrderByAggregateInput
    _max?: RankingListTagMaxOrderByAggregateInput
    _min?: RankingListTagMinOrderByAggregateInput
  }

  export type RankingListTagScalarWhereWithAggregatesInput = {
    AND?: RankingListTagScalarWhereWithAggregatesInput | RankingListTagScalarWhereWithAggregatesInput[]
    OR?: RankingListTagScalarWhereWithAggregatesInput[]
    NOT?: RankingListTagScalarWhereWithAggregatesInput | RankingListTagScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RankingListTag"> | string
    listId?: StringWithAggregatesFilter<"RankingListTag"> | string
    tagId?: StringWithAggregatesFilter<"RankingListTag"> | string
  }

  export type RankingListCommentWhereInput = {
    AND?: RankingListCommentWhereInput | RankingListCommentWhereInput[]
    OR?: RankingListCommentWhereInput[]
    NOT?: RankingListCommentWhereInput | RankingListCommentWhereInput[]
    id?: StringFilter<"RankingListComment"> | string
    listId?: StringFilter<"RankingListComment"> | string
    userId?: StringFilter<"RankingListComment"> | string
    content?: StringFilter<"RankingListComment"> | string
    createdAt?: DateTimeFilter<"RankingListComment"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type RankingListCommentOrderByWithRelationInput = {
    id?: SortOrder
    listId?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type RankingListCommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RankingListCommentWhereInput | RankingListCommentWhereInput[]
    OR?: RankingListCommentWhereInput[]
    NOT?: RankingListCommentWhereInput | RankingListCommentWhereInput[]
    listId?: StringFilter<"RankingListComment"> | string
    userId?: StringFilter<"RankingListComment"> | string
    content?: StringFilter<"RankingListComment"> | string
    createdAt?: DateTimeFilter<"RankingListComment"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type RankingListCommentOrderByWithAggregationInput = {
    id?: SortOrder
    listId?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    _count?: RankingListCommentCountOrderByAggregateInput
    _max?: RankingListCommentMaxOrderByAggregateInput
    _min?: RankingListCommentMinOrderByAggregateInput
  }

  export type RankingListCommentScalarWhereWithAggregatesInput = {
    AND?: RankingListCommentScalarWhereWithAggregatesInput | RankingListCommentScalarWhereWithAggregatesInput[]
    OR?: RankingListCommentScalarWhereWithAggregatesInput[]
    NOT?: RankingListCommentScalarWhereWithAggregatesInput | RankingListCommentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RankingListComment"> | string
    listId?: StringWithAggregatesFilter<"RankingListComment"> | string
    userId?: StringWithAggregatesFilter<"RankingListComment"> | string
    content?: StringWithAggregatesFilter<"RankingListComment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"RankingListComment"> | Date | string
  }

  export type TrendingSubjectWhereInput = {
    AND?: TrendingSubjectWhereInput | TrendingSubjectWhereInput[]
    OR?: TrendingSubjectWhereInput[]
    NOT?: TrendingSubjectWhereInput | TrendingSubjectWhereInput[]
    id?: StringFilter<"TrendingSubject"> | string
    subject?: StringFilter<"TrendingSubject"> | string
    count?: IntFilter<"TrendingSubject"> | number
    period?: EnumTrendPeriodFilter<"TrendingSubject"> | $Enums.TrendPeriod
    calculationDate?: DateTimeFilter<"TrendingSubject"> | Date | string
  }

  export type TrendingSubjectOrderByWithRelationInput = {
    id?: SortOrder
    subject?: SortOrder
    count?: SortOrder
    period?: SortOrder
    calculationDate?: SortOrder
  }

  export type TrendingSubjectWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    subject_period_calculationDate?: TrendingSubjectSubjectPeriodCalculationDateCompoundUniqueInput
    AND?: TrendingSubjectWhereInput | TrendingSubjectWhereInput[]
    OR?: TrendingSubjectWhereInput[]
    NOT?: TrendingSubjectWhereInput | TrendingSubjectWhereInput[]
    subject?: StringFilter<"TrendingSubject"> | string
    count?: IntFilter<"TrendingSubject"> | number
    period?: EnumTrendPeriodFilter<"TrendingSubject"> | $Enums.TrendPeriod
    calculationDate?: DateTimeFilter<"TrendingSubject"> | Date | string
  }, "id" | "subject_period_calculationDate">

  export type TrendingSubjectOrderByWithAggregationInput = {
    id?: SortOrder
    subject?: SortOrder
    count?: SortOrder
    period?: SortOrder
    calculationDate?: SortOrder
    _count?: TrendingSubjectCountOrderByAggregateInput
    _avg?: TrendingSubjectAvgOrderByAggregateInput
    _max?: TrendingSubjectMaxOrderByAggregateInput
    _min?: TrendingSubjectMinOrderByAggregateInput
    _sum?: TrendingSubjectSumOrderByAggregateInput
  }

  export type TrendingSubjectScalarWhereWithAggregatesInput = {
    AND?: TrendingSubjectScalarWhereWithAggregatesInput | TrendingSubjectScalarWhereWithAggregatesInput[]
    OR?: TrendingSubjectScalarWhereWithAggregatesInput[]
    NOT?: TrendingSubjectScalarWhereWithAggregatesInput | TrendingSubjectScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TrendingSubject"> | string
    subject?: StringWithAggregatesFilter<"TrendingSubject"> | string
    count?: IntWithAggregatesFilter<"TrendingSubject"> | number
    period?: EnumTrendPeriodWithAggregatesFilter<"TrendingSubject"> | $Enums.TrendPeriod
    calculationDate?: DateTimeWithAggregatesFilter<"TrendingSubject"> | Date | string
  }

  export type TrendingTagWhereInput = {
    AND?: TrendingTagWhereInput | TrendingTagWhereInput[]
    OR?: TrendingTagWhereInput[]
    NOT?: TrendingTagWhereInput | TrendingTagWhereInput[]
    id?: StringFilter<"TrendingTag"> | string
    tagId?: StringFilter<"TrendingTag"> | string
    tagName?: StringFilter<"TrendingTag"> | string
    count?: IntFilter<"TrendingTag"> | number
    period?: EnumTrendPeriodFilter<"TrendingTag"> | $Enums.TrendPeriod
    calculationDate?: DateTimeFilter<"TrendingTag"> | Date | string
    tag?: XOR<TagScalarRelationFilter, TagWhereInput>
  }

  export type TrendingTagOrderByWithRelationInput = {
    id?: SortOrder
    tagId?: SortOrder
    tagName?: SortOrder
    count?: SortOrder
    period?: SortOrder
    calculationDate?: SortOrder
    tag?: TagOrderByWithRelationInput
  }

  export type TrendingTagWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    tagId_period_calculationDate?: TrendingTagTagIdPeriodCalculationDateCompoundUniqueInput
    AND?: TrendingTagWhereInput | TrendingTagWhereInput[]
    OR?: TrendingTagWhereInput[]
    NOT?: TrendingTagWhereInput | TrendingTagWhereInput[]
    tagId?: StringFilter<"TrendingTag"> | string
    tagName?: StringFilter<"TrendingTag"> | string
    count?: IntFilter<"TrendingTag"> | number
    period?: EnumTrendPeriodFilter<"TrendingTag"> | $Enums.TrendPeriod
    calculationDate?: DateTimeFilter<"TrendingTag"> | Date | string
    tag?: XOR<TagScalarRelationFilter, TagWhereInput>
  }, "id" | "tagId_period_calculationDate">

  export type TrendingTagOrderByWithAggregationInput = {
    id?: SortOrder
    tagId?: SortOrder
    tagName?: SortOrder
    count?: SortOrder
    period?: SortOrder
    calculationDate?: SortOrder
    _count?: TrendingTagCountOrderByAggregateInput
    _avg?: TrendingTagAvgOrderByAggregateInput
    _max?: TrendingTagMaxOrderByAggregateInput
    _min?: TrendingTagMinOrderByAggregateInput
    _sum?: TrendingTagSumOrderByAggregateInput
  }

  export type TrendingTagScalarWhereWithAggregatesInput = {
    AND?: TrendingTagScalarWhereWithAggregatesInput | TrendingTagScalarWhereWithAggregatesInput[]
    OR?: TrendingTagScalarWhereWithAggregatesInput[]
    NOT?: TrendingTagScalarWhereWithAggregatesInput | TrendingTagScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TrendingTag"> | string
    tagId?: StringWithAggregatesFilter<"TrendingTag"> | string
    tagName?: StringWithAggregatesFilter<"TrendingTag"> | string
    count?: IntWithAggregatesFilter<"TrendingTag"> | number
    period?: EnumTrendPeriodWithAggregatesFilter<"TrendingTag"> | $Enums.TrendPeriod
    calculationDate?: DateTimeWithAggregatesFilter<"TrendingTag"> | Date | string
  }

  export type TrendingItemWhereInput = {
    AND?: TrendingItemWhereInput | TrendingItemWhereInput[]
    OR?: TrendingItemWhereInput[]
    NOT?: TrendingItemWhereInput | TrendingItemWhereInput[]
    id?: StringFilter<"TrendingItem"> | string
    itemName?: StringFilter<"TrendingItem"> | string
    rankScore?: FloatFilter<"TrendingItem"> | number
    period?: EnumTrendPeriodFilter<"TrendingItem"> | $Enums.TrendPeriod
    calculationDate?: DateTimeFilter<"TrendingItem"> | Date | string
  }

  export type TrendingItemOrderByWithRelationInput = {
    id?: SortOrder
    itemName?: SortOrder
    rankScore?: SortOrder
    period?: SortOrder
    calculationDate?: SortOrder
  }

  export type TrendingItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TrendingItemWhereInput | TrendingItemWhereInput[]
    OR?: TrendingItemWhereInput[]
    NOT?: TrendingItemWhereInput | TrendingItemWhereInput[]
    itemName?: StringFilter<"TrendingItem"> | string
    rankScore?: FloatFilter<"TrendingItem"> | number
    period?: EnumTrendPeriodFilter<"TrendingItem"> | $Enums.TrendPeriod
    calculationDate?: DateTimeFilter<"TrendingItem"> | Date | string
  }, "id">

  export type TrendingItemOrderByWithAggregationInput = {
    id?: SortOrder
    itemName?: SortOrder
    rankScore?: SortOrder
    period?: SortOrder
    calculationDate?: SortOrder
    _count?: TrendingItemCountOrderByAggregateInput
    _avg?: TrendingItemAvgOrderByAggregateInput
    _max?: TrendingItemMaxOrderByAggregateInput
    _min?: TrendingItemMinOrderByAggregateInput
    _sum?: TrendingItemSumOrderByAggregateInput
  }

  export type TrendingItemScalarWhereWithAggregatesInput = {
    AND?: TrendingItemScalarWhereWithAggregatesInput | TrendingItemScalarWhereWithAggregatesInput[]
    OR?: TrendingItemScalarWhereWithAggregatesInput[]
    NOT?: TrendingItemScalarWhereWithAggregatesInput | TrendingItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TrendingItem"> | string
    itemName?: StringWithAggregatesFilter<"TrendingItem"> | string
    rankScore?: FloatWithAggregatesFilter<"TrendingItem"> | number
    period?: EnumTrendPeriodWithAggregatesFilter<"TrendingItem"> | $Enums.TrendPeriod
    calculationDate?: DateTimeWithAggregatesFilter<"TrendingItem"> | Date | string
  }

  export type AverageItemRankWhereInput = {
    AND?: AverageItemRankWhereInput | AverageItemRankWhereInput[]
    OR?: AverageItemRankWhereInput[]
    NOT?: AverageItemRankWhereInput | AverageItemRankWhereInput[]
    id?: UuidFilter<"AverageItemRank"> | string
    subject?: StringFilter<"AverageItemRank"> | string
    itemName?: StringFilter<"AverageItemRank"> | string
    avgRank?: FloatFilter<"AverageItemRank"> | number
    calculationDate?: DateTimeFilter<"AverageItemRank"> | Date | string
    count?: IntFilter<"AverageItemRank"> | number
  }

  export type AverageItemRankOrderByWithRelationInput = {
    id?: SortOrder
    subject?: SortOrder
    itemName?: SortOrder
    avgRank?: SortOrder
    calculationDate?: SortOrder
    count?: SortOrder
  }

  export type AverageItemRankWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AverageItemRankWhereInput | AverageItemRankWhereInput[]
    OR?: AverageItemRankWhereInput[]
    NOT?: AverageItemRankWhereInput | AverageItemRankWhereInput[]
    subject?: StringFilter<"AverageItemRank"> | string
    itemName?: StringFilter<"AverageItemRank"> | string
    avgRank?: FloatFilter<"AverageItemRank"> | number
    calculationDate?: DateTimeFilter<"AverageItemRank"> | Date | string
    count?: IntFilter<"AverageItemRank"> | number
  }, "id">

  export type AverageItemRankOrderByWithAggregationInput = {
    id?: SortOrder
    subject?: SortOrder
    itemName?: SortOrder
    avgRank?: SortOrder
    calculationDate?: SortOrder
    count?: SortOrder
    _count?: AverageItemRankCountOrderByAggregateInput
    _avg?: AverageItemRankAvgOrderByAggregateInput
    _max?: AverageItemRankMaxOrderByAggregateInput
    _min?: AverageItemRankMinOrderByAggregateInput
    _sum?: AverageItemRankSumOrderByAggregateInput
  }

  export type AverageItemRankScalarWhereWithAggregatesInput = {
    AND?: AverageItemRankScalarWhereWithAggregatesInput | AverageItemRankScalarWhereWithAggregatesInput[]
    OR?: AverageItemRankScalarWhereWithAggregatesInput[]
    NOT?: AverageItemRankScalarWhereWithAggregatesInput | AverageItemRankScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"AverageItemRank"> | string
    subject?: StringWithAggregatesFilter<"AverageItemRank"> | string
    itemName?: StringWithAggregatesFilter<"AverageItemRank"> | string
    avgRank?: FloatWithAggregatesFilter<"AverageItemRank"> | number
    calculationDate?: DateTimeWithAggregatesFilter<"AverageItemRank"> | Date | string
    count?: IntWithAggregatesFilter<"AverageItemRank"> | number
  }

  export type AverageItemCommentWhereInput = {
    AND?: AverageItemCommentWhereInput | AverageItemCommentWhereInput[]
    OR?: AverageItemCommentWhereInput[]
    NOT?: AverageItemCommentWhereInput | AverageItemCommentWhereInput[]
    id?: StringFilter<"AverageItemComment"> | string
    subject?: StringFilter<"AverageItemComment"> | string
    userId?: StringFilter<"AverageItemComment"> | string
    content?: StringFilter<"AverageItemComment"> | string
    createdAt?: DateTimeFilter<"AverageItemComment"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AverageItemCommentOrderByWithRelationInput = {
    id?: SortOrder
    subject?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AverageItemCommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AverageItemCommentWhereInput | AverageItemCommentWhereInput[]
    OR?: AverageItemCommentWhereInput[]
    NOT?: AverageItemCommentWhereInput | AverageItemCommentWhereInput[]
    subject?: StringFilter<"AverageItemComment"> | string
    userId?: StringFilter<"AverageItemComment"> | string
    content?: StringFilter<"AverageItemComment"> | string
    createdAt?: DateTimeFilter<"AverageItemComment"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type AverageItemCommentOrderByWithAggregationInput = {
    id?: SortOrder
    subject?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    _count?: AverageItemCommentCountOrderByAggregateInput
    _max?: AverageItemCommentMaxOrderByAggregateInput
    _min?: AverageItemCommentMinOrderByAggregateInput
  }

  export type AverageItemCommentScalarWhereWithAggregatesInput = {
    AND?: AverageItemCommentScalarWhereWithAggregatesInput | AverageItemCommentScalarWhereWithAggregatesInput[]
    OR?: AverageItemCommentScalarWhereWithAggregatesInput[]
    NOT?: AverageItemCommentScalarWhereWithAggregatesInput | AverageItemCommentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AverageItemComment"> | string
    subject?: StringWithAggregatesFilter<"AverageItemComment"> | string
    userId?: StringWithAggregatesFilter<"AverageItemComment"> | string
    content?: StringWithAggregatesFilter<"AverageItemComment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"AverageItemComment"> | Date | string
  }

  export type PostWhereInput = {
    AND?: PostWhereInput | PostWhereInput[]
    OR?: PostWhereInput[]
    NOT?: PostWhereInput | PostWhereInput[]
    id?: StringFilter<"Post"> | string
    content?: StringFilter<"Post"> | string
    authorId?: StringFilter<"Post"> | string
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
    likeCount?: IntFilter<"Post"> | number
    imageUrl?: StringNullableFilter<"Post"> | string | null
    feedItems?: FeedItemListRelationFilter
    likes?: LikeListRelationFilter
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    replies?: ReplyListRelationFilter
  }

  export type PostOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    likeCount?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    feedItems?: FeedItemOrderByRelationAggregateInput
    likes?: LikeOrderByRelationAggregateInput
    author?: UserOrderByWithRelationInput
    replies?: ReplyOrderByRelationAggregateInput
  }

  export type PostWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PostWhereInput | PostWhereInput[]
    OR?: PostWhereInput[]
    NOT?: PostWhereInput | PostWhereInput[]
    content?: StringFilter<"Post"> | string
    authorId?: StringFilter<"Post"> | string
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
    likeCount?: IntFilter<"Post"> | number
    imageUrl?: StringNullableFilter<"Post"> | string | null
    feedItems?: FeedItemListRelationFilter
    likes?: LikeListRelationFilter
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    replies?: ReplyListRelationFilter
  }, "id">

  export type PostOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    likeCount?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    _count?: PostCountOrderByAggregateInput
    _avg?: PostAvgOrderByAggregateInput
    _max?: PostMaxOrderByAggregateInput
    _min?: PostMinOrderByAggregateInput
    _sum?: PostSumOrderByAggregateInput
  }

  export type PostScalarWhereWithAggregatesInput = {
    AND?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[]
    OR?: PostScalarWhereWithAggregatesInput[]
    NOT?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Post"> | string
    content?: StringWithAggregatesFilter<"Post"> | string
    authorId?: StringWithAggregatesFilter<"Post"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Post"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Post"> | Date | string
    likeCount?: IntWithAggregatesFilter<"Post"> | number
    imageUrl?: StringNullableWithAggregatesFilter<"Post"> | string | null
  }

  export type RetweetWhereInput = {
    AND?: RetweetWhereInput | RetweetWhereInput[]
    OR?: RetweetWhereInput[]
    NOT?: RetweetWhereInput | RetweetWhereInput[]
    id?: StringFilter<"Retweet"> | string
    userId?: StringFilter<"Retweet"> | string
    feedItemId?: StringFilter<"Retweet"> | string
    createdAt?: DateTimeFilter<"Retweet"> | Date | string
    feedItem?: XOR<FeedItemScalarRelationFilter, FeedItemWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type RetweetOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    feedItemId?: SortOrder
    createdAt?: SortOrder
    feedItem?: FeedItemOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type RetweetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_feedItemId?: RetweetUserIdFeedItemIdCompoundUniqueInput
    AND?: RetweetWhereInput | RetweetWhereInput[]
    OR?: RetweetWhereInput[]
    NOT?: RetweetWhereInput | RetweetWhereInput[]
    userId?: StringFilter<"Retweet"> | string
    feedItemId?: StringFilter<"Retweet"> | string
    createdAt?: DateTimeFilter<"Retweet"> | Date | string
    feedItem?: XOR<FeedItemScalarRelationFilter, FeedItemWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId_feedItemId">

  export type RetweetOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    feedItemId?: SortOrder
    createdAt?: SortOrder
    _count?: RetweetCountOrderByAggregateInput
    _max?: RetweetMaxOrderByAggregateInput
    _min?: RetweetMinOrderByAggregateInput
  }

  export type RetweetScalarWhereWithAggregatesInput = {
    AND?: RetweetScalarWhereWithAggregatesInput | RetweetScalarWhereWithAggregatesInput[]
    OR?: RetweetScalarWhereWithAggregatesInput[]
    NOT?: RetweetScalarWhereWithAggregatesInput | RetweetScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Retweet"> | string
    userId?: StringWithAggregatesFilter<"Retweet"> | string
    feedItemId?: StringWithAggregatesFilter<"Retweet"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Retweet"> | Date | string
  }

  export type FeedItemWhereInput = {
    AND?: FeedItemWhereInput | FeedItemWhereInput[]
    OR?: FeedItemWhereInput[]
    NOT?: FeedItemWhereInput | FeedItemWhereInput[]
    id?: StringFilter<"FeedItem"> | string
    type?: EnumFeedTypeFilter<"FeedItem"> | $Enums.FeedType
    createdAt?: DateTimeFilter<"FeedItem"> | Date | string
    updatedAt?: DateTimeFilter<"FeedItem"> | Date | string
    userId?: StringFilter<"FeedItem"> | string
    postId?: StringNullableFilter<"FeedItem"> | string | null
    rankingListId?: StringNullableFilter<"FeedItem"> | string | null
    retweetOfFeedItemId?: StringNullableFilter<"FeedItem"> | string | null
    quotedFeedItemId?: StringNullableFilter<"FeedItem"> | string | null
    quoteRetweetCount?: IntFilter<"FeedItem"> | number
    post?: XOR<PostNullableScalarRelationFilter, PostWhereInput> | null
    rankingList?: XOR<RankingListNullableScalarRelationFilter, RankingListWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    quotedFeedItem?: XOR<FeedItemNullableScalarRelationFilter, FeedItemWhereInput> | null
    quotedByItems?: FeedItemListRelationFilter
    retweetOfFeedItem?: XOR<FeedItemNullableScalarRelationFilter, FeedItemWhereInput> | null
    retweetedByItems?: FeedItemListRelationFilter
    retweets?: RetweetListRelationFilter
  }

  export type FeedItemOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    postId?: SortOrderInput | SortOrder
    rankingListId?: SortOrderInput | SortOrder
    retweetOfFeedItemId?: SortOrderInput | SortOrder
    quotedFeedItemId?: SortOrderInput | SortOrder
    quoteRetweetCount?: SortOrder
    post?: PostOrderByWithRelationInput
    rankingList?: RankingListOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    quotedFeedItem?: FeedItemOrderByWithRelationInput
    quotedByItems?: FeedItemOrderByRelationAggregateInput
    retweetOfFeedItem?: FeedItemOrderByWithRelationInput
    retweetedByItems?: FeedItemOrderByRelationAggregateInput
    retweets?: RetweetOrderByRelationAggregateInput
  }

  export type FeedItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    rankingListId_type?: FeedItemRankingListIdTypeCompoundUniqueInput
    AND?: FeedItemWhereInput | FeedItemWhereInput[]
    OR?: FeedItemWhereInput[]
    NOT?: FeedItemWhereInput | FeedItemWhereInput[]
    type?: EnumFeedTypeFilter<"FeedItem"> | $Enums.FeedType
    createdAt?: DateTimeFilter<"FeedItem"> | Date | string
    updatedAt?: DateTimeFilter<"FeedItem"> | Date | string
    userId?: StringFilter<"FeedItem"> | string
    postId?: StringNullableFilter<"FeedItem"> | string | null
    rankingListId?: StringNullableFilter<"FeedItem"> | string | null
    retweetOfFeedItemId?: StringNullableFilter<"FeedItem"> | string | null
    quotedFeedItemId?: StringNullableFilter<"FeedItem"> | string | null
    quoteRetweetCount?: IntFilter<"FeedItem"> | number
    post?: XOR<PostNullableScalarRelationFilter, PostWhereInput> | null
    rankingList?: XOR<RankingListNullableScalarRelationFilter, RankingListWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    quotedFeedItem?: XOR<FeedItemNullableScalarRelationFilter, FeedItemWhereInput> | null
    quotedByItems?: FeedItemListRelationFilter
    retweetOfFeedItem?: XOR<FeedItemNullableScalarRelationFilter, FeedItemWhereInput> | null
    retweetedByItems?: FeedItemListRelationFilter
    retweets?: RetweetListRelationFilter
  }, "id" | "rankingListId_type">

  export type FeedItemOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    postId?: SortOrderInput | SortOrder
    rankingListId?: SortOrderInput | SortOrder
    retweetOfFeedItemId?: SortOrderInput | SortOrder
    quotedFeedItemId?: SortOrderInput | SortOrder
    quoteRetweetCount?: SortOrder
    _count?: FeedItemCountOrderByAggregateInput
    _avg?: FeedItemAvgOrderByAggregateInput
    _max?: FeedItemMaxOrderByAggregateInput
    _min?: FeedItemMinOrderByAggregateInput
    _sum?: FeedItemSumOrderByAggregateInput
  }

  export type FeedItemScalarWhereWithAggregatesInput = {
    AND?: FeedItemScalarWhereWithAggregatesInput | FeedItemScalarWhereWithAggregatesInput[]
    OR?: FeedItemScalarWhereWithAggregatesInput[]
    NOT?: FeedItemScalarWhereWithAggregatesInput | FeedItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FeedItem"> | string
    type?: EnumFeedTypeWithAggregatesFilter<"FeedItem"> | $Enums.FeedType
    createdAt?: DateTimeWithAggregatesFilter<"FeedItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FeedItem"> | Date | string
    userId?: StringWithAggregatesFilter<"FeedItem"> | string
    postId?: StringNullableWithAggregatesFilter<"FeedItem"> | string | null
    rankingListId?: StringNullableWithAggregatesFilter<"FeedItem"> | string | null
    retweetOfFeedItemId?: StringNullableWithAggregatesFilter<"FeedItem"> | string | null
    quotedFeedItemId?: StringNullableWithAggregatesFilter<"FeedItem"> | string | null
    quoteRetweetCount?: IntWithAggregatesFilter<"FeedItem"> | number
  }

  export type LikeWhereInput = {
    AND?: LikeWhereInput | LikeWhereInput[]
    OR?: LikeWhereInput[]
    NOT?: LikeWhereInput | LikeWhereInput[]
    id?: StringFilter<"Like"> | string
    userId?: StringFilter<"Like"> | string
    createdAt?: DateTimeFilter<"Like"> | Date | string
    postId?: StringNullableFilter<"Like"> | string | null
    rankingListId?: StringNullableFilter<"Like"> | string | null
    post?: XOR<PostNullableScalarRelationFilter, PostWhereInput> | null
    rankingList?: XOR<RankingListNullableScalarRelationFilter, RankingListWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type LikeOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    postId?: SortOrderInput | SortOrder
    rankingListId?: SortOrderInput | SortOrder
    post?: PostOrderByWithRelationInput
    rankingList?: RankingListOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type LikeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LikeWhereInput | LikeWhereInput[]
    OR?: LikeWhereInput[]
    NOT?: LikeWhereInput | LikeWhereInput[]
    userId?: StringFilter<"Like"> | string
    createdAt?: DateTimeFilter<"Like"> | Date | string
    postId?: StringNullableFilter<"Like"> | string | null
    rankingListId?: StringNullableFilter<"Like"> | string | null
    post?: XOR<PostNullableScalarRelationFilter, PostWhereInput> | null
    rankingList?: XOR<RankingListNullableScalarRelationFilter, RankingListWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type LikeOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    postId?: SortOrderInput | SortOrder
    rankingListId?: SortOrderInput | SortOrder
    _count?: LikeCountOrderByAggregateInput
    _max?: LikeMaxOrderByAggregateInput
    _min?: LikeMinOrderByAggregateInput
  }

  export type LikeScalarWhereWithAggregatesInput = {
    AND?: LikeScalarWhereWithAggregatesInput | LikeScalarWhereWithAggregatesInput[]
    OR?: LikeScalarWhereWithAggregatesInput[]
    NOT?: LikeScalarWhereWithAggregatesInput | LikeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Like"> | string
    userId?: StringWithAggregatesFilter<"Like"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Like"> | Date | string
    postId?: StringNullableWithAggregatesFilter<"Like"> | string | null
    rankingListId?: StringNullableWithAggregatesFilter<"Like"> | string | null
  }

  export type ReplyWhereInput = {
    AND?: ReplyWhereInput | ReplyWhereInput[]
    OR?: ReplyWhereInput[]
    NOT?: ReplyWhereInput | ReplyWhereInput[]
    id?: StringFilter<"Reply"> | string
    content?: StringFilter<"Reply"> | string
    userId?: StringFilter<"Reply"> | string
    postId?: StringFilter<"Reply"> | string
    createdAt?: DateTimeFilter<"Reply"> | Date | string
    updatedAt?: DateTimeFilter<"Reply"> | Date | string
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ReplyOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    post?: PostOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ReplyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReplyWhereInput | ReplyWhereInput[]
    OR?: ReplyWhereInput[]
    NOT?: ReplyWhereInput | ReplyWhereInput[]
    content?: StringFilter<"Reply"> | string
    userId?: StringFilter<"Reply"> | string
    postId?: StringFilter<"Reply"> | string
    createdAt?: DateTimeFilter<"Reply"> | Date | string
    updatedAt?: DateTimeFilter<"Reply"> | Date | string
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ReplyOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ReplyCountOrderByAggregateInput
    _max?: ReplyMaxOrderByAggregateInput
    _min?: ReplyMinOrderByAggregateInput
  }

  export type ReplyScalarWhereWithAggregatesInput = {
    AND?: ReplyScalarWhereWithAggregatesInput | ReplyScalarWhereWithAggregatesInput[]
    OR?: ReplyScalarWhereWithAggregatesInput[]
    NOT?: ReplyScalarWhereWithAggregatesInput | ReplyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Reply"> | string
    content?: StringWithAggregatesFilter<"Reply"> | string
    userId?: StringWithAggregatesFilter<"Reply"> | string
    postId?: StringWithAggregatesFilter<"Reply"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Reply"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Reply"> | Date | string
  }

  export type FollowRequestWhereInput = {
    AND?: FollowRequestWhereInput | FollowRequestWhereInput[]
    OR?: FollowRequestWhereInput[]
    NOT?: FollowRequestWhereInput | FollowRequestWhereInput[]
    id?: StringFilter<"FollowRequest"> | string
    status?: EnumFollowRequestStatusFilter<"FollowRequest"> | $Enums.FollowRequestStatus
    createdAt?: DateTimeFilter<"FollowRequest"> | Date | string
    updatedAt?: DateTimeFilter<"FollowRequest"> | Date | string
    requesterId?: StringFilter<"FollowRequest"> | string
    requestedId?: StringFilter<"FollowRequest"> | string
    requested?: XOR<UserScalarRelationFilter, UserWhereInput>
    requester?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type FollowRequestOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    requesterId?: SortOrder
    requestedId?: SortOrder
    requested?: UserOrderByWithRelationInput
    requester?: UserOrderByWithRelationInput
  }

  export type FollowRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    requesterId_requestedId?: FollowRequestRequesterIdRequestedIdCompoundUniqueInput
    AND?: FollowRequestWhereInput | FollowRequestWhereInput[]
    OR?: FollowRequestWhereInput[]
    NOT?: FollowRequestWhereInput | FollowRequestWhereInput[]
    status?: EnumFollowRequestStatusFilter<"FollowRequest"> | $Enums.FollowRequestStatus
    createdAt?: DateTimeFilter<"FollowRequest"> | Date | string
    updatedAt?: DateTimeFilter<"FollowRequest"> | Date | string
    requesterId?: StringFilter<"FollowRequest"> | string
    requestedId?: StringFilter<"FollowRequest"> | string
    requested?: XOR<UserScalarRelationFilter, UserWhereInput>
    requester?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "requesterId_requestedId">

  export type FollowRequestOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    requesterId?: SortOrder
    requestedId?: SortOrder
    _count?: FollowRequestCountOrderByAggregateInput
    _max?: FollowRequestMaxOrderByAggregateInput
    _min?: FollowRequestMinOrderByAggregateInput
  }

  export type FollowRequestScalarWhereWithAggregatesInput = {
    AND?: FollowRequestScalarWhereWithAggregatesInput | FollowRequestScalarWhereWithAggregatesInput[]
    OR?: FollowRequestScalarWhereWithAggregatesInput[]
    NOT?: FollowRequestScalarWhereWithAggregatesInput | FollowRequestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FollowRequest"> | string
    status?: EnumFollowRequestStatusWithAggregatesFilter<"FollowRequest"> | $Enums.FollowRequestStatus
    createdAt?: DateTimeWithAggregatesFilter<"FollowRequest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FollowRequest"> | Date | string
    requesterId?: StringWithAggregatesFilter<"FollowRequest"> | string
    requestedId?: StringWithAggregatesFilter<"FollowRequest"> | string
  }

  export type FollowWhereInput = {
    AND?: FollowWhereInput | FollowWhereInput[]
    OR?: FollowWhereInput[]
    NOT?: FollowWhereInput | FollowWhereInput[]
    id?: StringFilter<"Follow"> | string
    followerId?: StringFilter<"Follow"> | string
    followingId?: StringFilter<"Follow"> | string
    createdAt?: DateTimeFilter<"Follow"> | Date | string
    follower?: XOR<UserScalarRelationFilter, UserWhereInput>
    following?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type FollowOrderByWithRelationInput = {
    id?: SortOrder
    followerId?: SortOrder
    followingId?: SortOrder
    createdAt?: SortOrder
    follower?: UserOrderByWithRelationInput
    following?: UserOrderByWithRelationInput
  }

  export type FollowWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    followerId_followingId?: FollowFollowerIdFollowingIdCompoundUniqueInput
    AND?: FollowWhereInput | FollowWhereInput[]
    OR?: FollowWhereInput[]
    NOT?: FollowWhereInput | FollowWhereInput[]
    followerId?: StringFilter<"Follow"> | string
    followingId?: StringFilter<"Follow"> | string
    createdAt?: DateTimeFilter<"Follow"> | Date | string
    follower?: XOR<UserScalarRelationFilter, UserWhereInput>
    following?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "followerId_followingId">

  export type FollowOrderByWithAggregationInput = {
    id?: SortOrder
    followerId?: SortOrder
    followingId?: SortOrder
    createdAt?: SortOrder
    _count?: FollowCountOrderByAggregateInput
    _max?: FollowMaxOrderByAggregateInput
    _min?: FollowMinOrderByAggregateInput
  }

  export type FollowScalarWhereWithAggregatesInput = {
    AND?: FollowScalarWhereWithAggregatesInput | FollowScalarWhereWithAggregatesInput[]
    OR?: FollowScalarWhereWithAggregatesInput[]
    NOT?: FollowScalarWhereWithAggregatesInput | FollowScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Follow"> | string
    followerId?: StringWithAggregatesFilter<"Follow"> | string
    followingId?: StringWithAggregatesFilter<"Follow"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Follow"> | Date | string
  }

  export type TagCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    trendingStats?: TrendingTagCreateNestedManyWithoutTagInput
    rankingListTags?: RankingListTagCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    trendingStats?: TrendingTagUncheckedCreateNestedManyWithoutTagInput
    rankingListTags?: RankingListTagUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trendingStats?: TrendingTagUpdateManyWithoutTagNestedInput
    rankingListTags?: RankingListTagUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trendingStats?: TrendingTagUncheckedUpdateManyWithoutTagNestedInput
    rankingListTags?: RankingListTagUncheckedUpdateManyWithoutTagNestedInput
  }

  export type TagCreateManyInput = {
    id?: string
    name: string
    createdAt?: Date | string
  }

  export type TagUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    clerkId: string
    username: string
    name?: string | null
    bio?: string | null
    image?: string | null
    coverImageUrl?: string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    birthday?: Date | string | null
    location?: string | null
    feedItems?: FeedItemCreateNestedManyWithoutUserInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    followedBy?: FollowCreateNestedManyWithoutFollowingInput
    receivedFollowRequests?: FollowRequestCreateNestedManyWithoutRequestedInput
    sentFollowRequests?: FollowRequestCreateNestedManyWithoutRequesterInput
    likes?: LikeCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    rankingLists?: RankingListCreateNestedManyWithoutAuthorInput
    replies?: ReplyCreateNestedManyWithoutUserInput
    retweets?: RetweetCreateNestedManyWithoutUserInput
    rankingListComments?: RankingListCommentCreateNestedManyWithoutUserInput
    averageItemComments?: AverageItemCommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    clerkId: string
    username: string
    name?: string | null
    bio?: string | null
    image?: string | null
    coverImageUrl?: string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    birthday?: Date | string | null
    location?: string | null
    feedItems?: FeedItemUncheckedCreateNestedManyWithoutUserInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followedBy?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    receivedFollowRequests?: FollowRequestUncheckedCreateNestedManyWithoutRequestedInput
    sentFollowRequests?: FollowRequestUncheckedCreateNestedManyWithoutRequesterInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    rankingLists?: RankingListUncheckedCreateNestedManyWithoutAuthorInput
    replies?: ReplyUncheckedCreateNestedManyWithoutUserInput
    retweets?: RetweetUncheckedCreateNestedManyWithoutUserInput
    rankingListComments?: RankingListCommentUncheckedCreateNestedManyWithoutUserInput
    averageItemComments?: AverageItemCommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    feedItems?: FeedItemUpdateManyWithoutUserNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    followedBy?: FollowUpdateManyWithoutFollowingNestedInput
    receivedFollowRequests?: FollowRequestUpdateManyWithoutRequestedNestedInput
    sentFollowRequests?: FollowRequestUpdateManyWithoutRequesterNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    rankingLists?: RankingListUpdateManyWithoutAuthorNestedInput
    replies?: ReplyUpdateManyWithoutUserNestedInput
    retweets?: RetweetUpdateManyWithoutUserNestedInput
    rankingListComments?: RankingListCommentUpdateManyWithoutUserNestedInput
    averageItemComments?: AverageItemCommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    feedItems?: FeedItemUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followedBy?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    receivedFollowRequests?: FollowRequestUncheckedUpdateManyWithoutRequestedNestedInput
    sentFollowRequests?: FollowRequestUncheckedUpdateManyWithoutRequesterNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    rankingLists?: RankingListUncheckedUpdateManyWithoutAuthorNestedInput
    replies?: ReplyUncheckedUpdateManyWithoutUserNestedInput
    retweets?: RetweetUncheckedUpdateManyWithoutUserNestedInput
    rankingListComments?: RankingListCommentUncheckedUpdateManyWithoutUserNestedInput
    averageItemComments?: AverageItemCommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    clerkId: string
    username: string
    name?: string | null
    bio?: string | null
    image?: string | null
    coverImageUrl?: string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    birthday?: Date | string | null
    location?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RankingListCreateInput = {
    id?: string
    subject: string
    description?: string | null
    status?: $Enums.ListStatus
    listImageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    displayOrder?: number | null
    likeCount?: number
    feedItems?: FeedItemCreateNestedManyWithoutRankingListInput
    likes?: LikeCreateNestedManyWithoutRankingListInput
    items?: RankedItemCreateNestedManyWithoutRankingListInput
    author: UserCreateNestedOneWithoutRankingListsInput
    rankingListTags?: RankingListTagCreateNestedManyWithoutListInput
  }

  export type RankingListUncheckedCreateInput = {
    id?: string
    subject: string
    description?: string | null
    status?: $Enums.ListStatus
    listImageUrl?: string | null
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    displayOrder?: number | null
    likeCount?: number
    feedItems?: FeedItemUncheckedCreateNestedManyWithoutRankingListInput
    likes?: LikeUncheckedCreateNestedManyWithoutRankingListInput
    items?: RankedItemUncheckedCreateNestedManyWithoutRankingListInput
    rankingListTags?: RankingListTagUncheckedCreateNestedManyWithoutListInput
  }

  export type RankingListUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumListStatusFieldUpdateOperationsInput | $Enums.ListStatus
    listImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayOrder?: NullableIntFieldUpdateOperationsInput | number | null
    likeCount?: IntFieldUpdateOperationsInput | number
    feedItems?: FeedItemUpdateManyWithoutRankingListNestedInput
    likes?: LikeUpdateManyWithoutRankingListNestedInput
    items?: RankedItemUpdateManyWithoutRankingListNestedInput
    author?: UserUpdateOneRequiredWithoutRankingListsNestedInput
    rankingListTags?: RankingListTagUpdateManyWithoutListNestedInput
  }

  export type RankingListUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumListStatusFieldUpdateOperationsInput | $Enums.ListStatus
    listImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayOrder?: NullableIntFieldUpdateOperationsInput | number | null
    likeCount?: IntFieldUpdateOperationsInput | number
    feedItems?: FeedItemUncheckedUpdateManyWithoutRankingListNestedInput
    likes?: LikeUncheckedUpdateManyWithoutRankingListNestedInput
    items?: RankedItemUncheckedUpdateManyWithoutRankingListNestedInput
    rankingListTags?: RankingListTagUncheckedUpdateManyWithoutListNestedInput
  }

  export type RankingListCreateManyInput = {
    id?: string
    subject: string
    description?: string | null
    status?: $Enums.ListStatus
    listImageUrl?: string | null
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    displayOrder?: number | null
    likeCount?: number
  }

  export type RankingListUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumListStatusFieldUpdateOperationsInput | $Enums.ListStatus
    listImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayOrder?: NullableIntFieldUpdateOperationsInput | number | null
    likeCount?: IntFieldUpdateOperationsInput | number
  }

  export type RankingListUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumListStatusFieldUpdateOperationsInput | $Enums.ListStatus
    listImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayOrder?: NullableIntFieldUpdateOperationsInput | number | null
    likeCount?: IntFieldUpdateOperationsInput | number
  }

  export type RankedItemCreateInput = {
    id?: string
    itemName: string
    rank: number
    imageUrl?: string | null
    itemDescription?: string | null
    createdAt?: Date | string
    rankingList: RankingListCreateNestedOneWithoutItemsInput
  }

  export type RankedItemUncheckedCreateInput = {
    id?: string
    itemName: string
    rank: number
    imageUrl?: string | null
    itemDescription?: string | null
    listId: string
    createdAt?: Date | string
  }

  export type RankedItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemName?: StringFieldUpdateOperationsInput | string
    rank?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    itemDescription?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rankingList?: RankingListUpdateOneRequiredWithoutItemsNestedInput
  }

  export type RankedItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemName?: StringFieldUpdateOperationsInput | string
    rank?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    itemDescription?: NullableStringFieldUpdateOperationsInput | string | null
    listId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RankedItemCreateManyInput = {
    id?: string
    itemName: string
    rank: number
    imageUrl?: string | null
    itemDescription?: string | null
    listId: string
    createdAt?: Date | string
  }

  export type RankedItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemName?: StringFieldUpdateOperationsInput | string
    rank?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    itemDescription?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RankedItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemName?: StringFieldUpdateOperationsInput | string
    rank?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    itemDescription?: NullableStringFieldUpdateOperationsInput | string | null
    listId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RankingListTagCreateInput = {
    id?: string
    list: RankingListCreateNestedOneWithoutRankingListTagsInput
    tag: TagCreateNestedOneWithoutRankingListTagsInput
  }

  export type RankingListTagUncheckedCreateInput = {
    id?: string
    listId: string
    tagId: string
  }

  export type RankingListTagUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    list?: RankingListUpdateOneRequiredWithoutRankingListTagsNestedInput
    tag?: TagUpdateOneRequiredWithoutRankingListTagsNestedInput
  }

  export type RankingListTagUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    listId?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type RankingListTagCreateManyInput = {
    id?: string
    listId: string
    tagId: string
  }

  export type RankingListTagUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type RankingListTagUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    listId?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type RankingListCommentCreateInput = {
    id?: string
    listId: string
    content: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutRankingListCommentsInput
  }

  export type RankingListCommentUncheckedCreateInput = {
    id?: string
    listId: string
    userId: string
    content: string
    createdAt?: Date | string
  }

  export type RankingListCommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    listId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRankingListCommentsNestedInput
  }

  export type RankingListCommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    listId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RankingListCommentCreateManyInput = {
    id?: string
    listId: string
    userId: string
    content: string
    createdAt?: Date | string
  }

  export type RankingListCommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    listId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RankingListCommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    listId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrendingSubjectCreateInput = {
    id?: string
    subject: string
    count: number
    period: $Enums.TrendPeriod
    calculationDate: Date | string
  }

  export type TrendingSubjectUncheckedCreateInput = {
    id?: string
    subject: string
    count: number
    period: $Enums.TrendPeriod
    calculationDate: Date | string
  }

  export type TrendingSubjectUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    period?: EnumTrendPeriodFieldUpdateOperationsInput | $Enums.TrendPeriod
    calculationDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrendingSubjectUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    period?: EnumTrendPeriodFieldUpdateOperationsInput | $Enums.TrendPeriod
    calculationDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrendingSubjectCreateManyInput = {
    id?: string
    subject: string
    count: number
    period: $Enums.TrendPeriod
    calculationDate: Date | string
  }

  export type TrendingSubjectUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    period?: EnumTrendPeriodFieldUpdateOperationsInput | $Enums.TrendPeriod
    calculationDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrendingSubjectUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    period?: EnumTrendPeriodFieldUpdateOperationsInput | $Enums.TrendPeriod
    calculationDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrendingTagCreateInput = {
    id?: string
    tagName: string
    count: number
    period: $Enums.TrendPeriod
    calculationDate: Date | string
    tag: TagCreateNestedOneWithoutTrendingStatsInput
  }

  export type TrendingTagUncheckedCreateInput = {
    id?: string
    tagId: string
    tagName: string
    count: number
    period: $Enums.TrendPeriod
    calculationDate: Date | string
  }

  export type TrendingTagUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagName?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    period?: EnumTrendPeriodFieldUpdateOperationsInput | $Enums.TrendPeriod
    calculationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    tag?: TagUpdateOneRequiredWithoutTrendingStatsNestedInput
  }

  export type TrendingTagUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
    tagName?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    period?: EnumTrendPeriodFieldUpdateOperationsInput | $Enums.TrendPeriod
    calculationDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrendingTagCreateManyInput = {
    id?: string
    tagId: string
    tagName: string
    count: number
    period: $Enums.TrendPeriod
    calculationDate: Date | string
  }

  export type TrendingTagUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagName?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    period?: EnumTrendPeriodFieldUpdateOperationsInput | $Enums.TrendPeriod
    calculationDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrendingTagUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
    tagName?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    period?: EnumTrendPeriodFieldUpdateOperationsInput | $Enums.TrendPeriod
    calculationDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrendingItemCreateInput = {
    id?: string
    itemName: string
    rankScore: number
    period: $Enums.TrendPeriod
    calculationDate: Date | string
  }

  export type TrendingItemUncheckedCreateInput = {
    id?: string
    itemName: string
    rankScore: number
    period: $Enums.TrendPeriod
    calculationDate: Date | string
  }

  export type TrendingItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemName?: StringFieldUpdateOperationsInput | string
    rankScore?: FloatFieldUpdateOperationsInput | number
    period?: EnumTrendPeriodFieldUpdateOperationsInput | $Enums.TrendPeriod
    calculationDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrendingItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemName?: StringFieldUpdateOperationsInput | string
    rankScore?: FloatFieldUpdateOperationsInput | number
    period?: EnumTrendPeriodFieldUpdateOperationsInput | $Enums.TrendPeriod
    calculationDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrendingItemCreateManyInput = {
    id?: string
    itemName: string
    rankScore: number
    period: $Enums.TrendPeriod
    calculationDate: Date | string
  }

  export type TrendingItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemName?: StringFieldUpdateOperationsInput | string
    rankScore?: FloatFieldUpdateOperationsInput | number
    period?: EnumTrendPeriodFieldUpdateOperationsInput | $Enums.TrendPeriod
    calculationDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrendingItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemName?: StringFieldUpdateOperationsInput | string
    rankScore?: FloatFieldUpdateOperationsInput | number
    period?: EnumTrendPeriodFieldUpdateOperationsInput | $Enums.TrendPeriod
    calculationDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AverageItemRankCreateInput = {
    id?: string
    subject: string
    itemName: string
    avgRank: number
    calculationDate: Date | string
    count: number
  }

  export type AverageItemRankUncheckedCreateInput = {
    id?: string
    subject: string
    itemName: string
    avgRank: number
    calculationDate: Date | string
    count: number
  }

  export type AverageItemRankUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    itemName?: StringFieldUpdateOperationsInput | string
    avgRank?: FloatFieldUpdateOperationsInput | number
    calculationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    count?: IntFieldUpdateOperationsInput | number
  }

  export type AverageItemRankUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    itemName?: StringFieldUpdateOperationsInput | string
    avgRank?: FloatFieldUpdateOperationsInput | number
    calculationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    count?: IntFieldUpdateOperationsInput | number
  }

  export type AverageItemRankCreateManyInput = {
    id?: string
    subject: string
    itemName: string
    avgRank: number
    calculationDate: Date | string
    count: number
  }

  export type AverageItemRankUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    itemName?: StringFieldUpdateOperationsInput | string
    avgRank?: FloatFieldUpdateOperationsInput | number
    calculationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    count?: IntFieldUpdateOperationsInput | number
  }

  export type AverageItemRankUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    itemName?: StringFieldUpdateOperationsInput | string
    avgRank?: FloatFieldUpdateOperationsInput | number
    calculationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    count?: IntFieldUpdateOperationsInput | number
  }

  export type AverageItemCommentCreateInput = {
    id?: string
    subject: string
    content: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutAverageItemCommentsInput
  }

  export type AverageItemCommentUncheckedCreateInput = {
    id?: string
    subject: string
    userId: string
    content: string
    createdAt?: Date | string
  }

  export type AverageItemCommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAverageItemCommentsNestedInput
  }

  export type AverageItemCommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AverageItemCommentCreateManyInput = {
    id?: string
    subject: string
    userId: string
    content: string
    createdAt?: Date | string
  }

  export type AverageItemCommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AverageItemCommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    likeCount?: number
    imageUrl?: string | null
    feedItems?: FeedItemCreateNestedManyWithoutPostInput
    likes?: LikeCreateNestedManyWithoutPostInput
    author: UserCreateNestedOneWithoutPostsInput
    replies?: ReplyCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateInput = {
    id?: string
    content: string
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    likeCount?: number
    imageUrl?: string | null
    feedItems?: FeedItemUncheckedCreateNestedManyWithoutPostInput
    likes?: LikeUncheckedCreateNestedManyWithoutPostInput
    replies?: ReplyUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likeCount?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    feedItems?: FeedItemUpdateManyWithoutPostNestedInput
    likes?: LikeUpdateManyWithoutPostNestedInput
    author?: UserUpdateOneRequiredWithoutPostsNestedInput
    replies?: ReplyUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likeCount?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    feedItems?: FeedItemUncheckedUpdateManyWithoutPostNestedInput
    likes?: LikeUncheckedUpdateManyWithoutPostNestedInput
    replies?: ReplyUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostCreateManyInput = {
    id?: string
    content: string
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    likeCount?: number
    imageUrl?: string | null
  }

  export type PostUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likeCount?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PostUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likeCount?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RetweetCreateInput = {
    id?: string
    createdAt?: Date | string
    feedItem: FeedItemCreateNestedOneWithoutRetweetsInput
    user: UserCreateNestedOneWithoutRetweetsInput
  }

  export type RetweetUncheckedCreateInput = {
    id?: string
    userId: string
    feedItemId: string
    createdAt?: Date | string
  }

  export type RetweetUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedItem?: FeedItemUpdateOneRequiredWithoutRetweetsNestedInput
    user?: UserUpdateOneRequiredWithoutRetweetsNestedInput
  }

  export type RetweetUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    feedItemId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RetweetCreateManyInput = {
    id?: string
    userId: string
    feedItemId: string
    createdAt?: Date | string
  }

  export type RetweetUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RetweetUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    feedItemId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedItemCreateInput = {
    id?: string
    type: $Enums.FeedType
    createdAt?: Date | string
    updatedAt?: Date | string
    quoteRetweetCount?: number
    post?: PostCreateNestedOneWithoutFeedItemsInput
    rankingList?: RankingListCreateNestedOneWithoutFeedItemsInput
    user: UserCreateNestedOneWithoutFeedItemsInput
    quotedFeedItem?: FeedItemCreateNestedOneWithoutQuotedByItemsInput
    quotedByItems?: FeedItemCreateNestedManyWithoutQuotedFeedItemInput
    retweetOfFeedItem?: FeedItemCreateNestedOneWithoutRetweetedByItemsInput
    retweetedByItems?: FeedItemCreateNestedManyWithoutRetweetOfFeedItemInput
    retweets?: RetweetCreateNestedManyWithoutFeedItemInput
  }

  export type FeedItemUncheckedCreateInput = {
    id?: string
    type: $Enums.FeedType
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    postId?: string | null
    rankingListId?: string | null
    retweetOfFeedItemId?: string | null
    quotedFeedItemId?: string | null
    quoteRetweetCount?: number
    quotedByItems?: FeedItemUncheckedCreateNestedManyWithoutQuotedFeedItemInput
    retweetedByItems?: FeedItemUncheckedCreateNestedManyWithoutRetweetOfFeedItemInput
    retweets?: RetweetUncheckedCreateNestedManyWithoutFeedItemInput
  }

  export type FeedItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumFeedTypeFieldUpdateOperationsInput | $Enums.FeedType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quoteRetweetCount?: IntFieldUpdateOperationsInput | number
    post?: PostUpdateOneWithoutFeedItemsNestedInput
    rankingList?: RankingListUpdateOneWithoutFeedItemsNestedInput
    user?: UserUpdateOneRequiredWithoutFeedItemsNestedInput
    quotedFeedItem?: FeedItemUpdateOneWithoutQuotedByItemsNestedInput
    quotedByItems?: FeedItemUpdateManyWithoutQuotedFeedItemNestedInput
    retweetOfFeedItem?: FeedItemUpdateOneWithoutRetweetedByItemsNestedInput
    retweetedByItems?: FeedItemUpdateManyWithoutRetweetOfFeedItemNestedInput
    retweets?: RetweetUpdateManyWithoutFeedItemNestedInput
  }

  export type FeedItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumFeedTypeFieldUpdateOperationsInput | $Enums.FeedType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    rankingListId?: NullableStringFieldUpdateOperationsInput | string | null
    retweetOfFeedItemId?: NullableStringFieldUpdateOperationsInput | string | null
    quotedFeedItemId?: NullableStringFieldUpdateOperationsInput | string | null
    quoteRetweetCount?: IntFieldUpdateOperationsInput | number
    quotedByItems?: FeedItemUncheckedUpdateManyWithoutQuotedFeedItemNestedInput
    retweetedByItems?: FeedItemUncheckedUpdateManyWithoutRetweetOfFeedItemNestedInput
    retweets?: RetweetUncheckedUpdateManyWithoutFeedItemNestedInput
  }

  export type FeedItemCreateManyInput = {
    id?: string
    type: $Enums.FeedType
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    postId?: string | null
    rankingListId?: string | null
    retweetOfFeedItemId?: string | null
    quotedFeedItemId?: string | null
    quoteRetweetCount?: number
  }

  export type FeedItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumFeedTypeFieldUpdateOperationsInput | $Enums.FeedType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quoteRetweetCount?: IntFieldUpdateOperationsInput | number
  }

  export type FeedItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumFeedTypeFieldUpdateOperationsInput | $Enums.FeedType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    rankingListId?: NullableStringFieldUpdateOperationsInput | string | null
    retweetOfFeedItemId?: NullableStringFieldUpdateOperationsInput | string | null
    quotedFeedItemId?: NullableStringFieldUpdateOperationsInput | string | null
    quoteRetweetCount?: IntFieldUpdateOperationsInput | number
  }

  export type LikeCreateInput = {
    id?: string
    createdAt?: Date | string
    post?: PostCreateNestedOneWithoutLikesInput
    rankingList?: RankingListCreateNestedOneWithoutLikesInput
    user: UserCreateNestedOneWithoutLikesInput
  }

  export type LikeUncheckedCreateInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    postId?: string | null
    rankingListId?: string | null
  }

  export type LikeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: PostUpdateOneWithoutLikesNestedInput
    rankingList?: RankingListUpdateOneWithoutLikesNestedInput
    user?: UserUpdateOneRequiredWithoutLikesNestedInput
  }

  export type LikeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    rankingListId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LikeCreateManyInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    postId?: string | null
    rankingListId?: string | null
  }

  export type LikeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    rankingListId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReplyCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    post: PostCreateNestedOneWithoutRepliesInput
    user: UserCreateNestedOneWithoutRepliesInput
  }

  export type ReplyUncheckedCreateInput = {
    id?: string
    content: string
    userId: string
    postId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReplyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: PostUpdateOneRequiredWithoutRepliesNestedInput
    user?: UserUpdateOneRequiredWithoutRepliesNestedInput
  }

  export type ReplyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReplyCreateManyInput = {
    id?: string
    content: string
    userId: string
    postId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReplyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReplyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowRequestCreateInput = {
    id?: string
    status?: $Enums.FollowRequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    requested: UserCreateNestedOneWithoutReceivedFollowRequestsInput
    requester: UserCreateNestedOneWithoutSentFollowRequestsInput
  }

  export type FollowRequestUncheckedCreateInput = {
    id?: string
    status?: $Enums.FollowRequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    requesterId: string
    requestedId: string
  }

  export type FollowRequestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumFollowRequestStatusFieldUpdateOperationsInput | $Enums.FollowRequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requested?: UserUpdateOneRequiredWithoutReceivedFollowRequestsNestedInput
    requester?: UserUpdateOneRequiredWithoutSentFollowRequestsNestedInput
  }

  export type FollowRequestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumFollowRequestStatusFieldUpdateOperationsInput | $Enums.FollowRequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requesterId?: StringFieldUpdateOperationsInput | string
    requestedId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowRequestCreateManyInput = {
    id?: string
    status?: $Enums.FollowRequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    requesterId: string
    requestedId: string
  }

  export type FollowRequestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumFollowRequestStatusFieldUpdateOperationsInput | $Enums.FollowRequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowRequestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumFollowRequestStatusFieldUpdateOperationsInput | $Enums.FollowRequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requesterId?: StringFieldUpdateOperationsInput | string
    requestedId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowCreateInput = {
    id?: string
    createdAt?: Date | string
    follower: UserCreateNestedOneWithoutFollowingInput
    following: UserCreateNestedOneWithoutFollowedByInput
  }

  export type FollowUncheckedCreateInput = {
    id?: string
    followerId: string
    followingId: string
    createdAt?: Date | string
  }

  export type FollowUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    follower?: UserUpdateOneRequiredWithoutFollowingNestedInput
    following?: UserUpdateOneRequiredWithoutFollowedByNestedInput
  }

  export type FollowUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    followerId?: StringFieldUpdateOperationsInput | string
    followingId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowCreateManyInput = {
    id?: string
    followerId: string
    followingId: string
    createdAt?: Date | string
  }

  export type FollowUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    followerId?: StringFieldUpdateOperationsInput | string
    followingId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type TrendingTagListRelationFilter = {
    every?: TrendingTagWhereInput
    some?: TrendingTagWhereInput
    none?: TrendingTagWhereInput
  }

  export type RankingListTagListRelationFilter = {
    every?: RankingListTagWhereInput
    some?: RankingListTagWhereInput
    none?: RankingListTagWhereInput
  }

  export type TrendingTagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RankingListTagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TagCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type TagMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type TagMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type FeedItemListRelationFilter = {
    every?: FeedItemWhereInput
    some?: FeedItemWhereInput
    none?: FeedItemWhereInput
  }

  export type FollowListRelationFilter = {
    every?: FollowWhereInput
    some?: FollowWhereInput
    none?: FollowWhereInput
  }

  export type FollowRequestListRelationFilter = {
    every?: FollowRequestWhereInput
    some?: FollowRequestWhereInput
    none?: FollowRequestWhereInput
  }

  export type LikeListRelationFilter = {
    every?: LikeWhereInput
    some?: LikeWhereInput
    none?: LikeWhereInput
  }

  export type PostListRelationFilter = {
    every?: PostWhereInput
    some?: PostWhereInput
    none?: PostWhereInput
  }

  export type RankingListListRelationFilter = {
    every?: RankingListWhereInput
    some?: RankingListWhereInput
    none?: RankingListWhereInput
  }

  export type ReplyListRelationFilter = {
    every?: ReplyWhereInput
    some?: ReplyWhereInput
    none?: ReplyWhereInput
  }

  export type RetweetListRelationFilter = {
    every?: RetweetWhereInput
    some?: RetweetWhereInput
    none?: RetweetWhereInput
  }

  export type RankingListCommentListRelationFilter = {
    every?: RankingListCommentWhereInput
    some?: RankingListCommentWhereInput
    none?: RankingListCommentWhereInput
  }

  export type AverageItemCommentListRelationFilter = {
    every?: AverageItemCommentWhereInput
    some?: AverageItemCommentWhereInput
    none?: AverageItemCommentWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type FeedItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FollowOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FollowRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LikeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RankingListOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReplyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RetweetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RankingListCommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AverageItemCommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    clerkId?: SortOrder
    username?: SortOrder
    name?: SortOrder
    bio?: SortOrder
    image?: SortOrder
    coverImageUrl?: SortOrder
    socialLinks?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isPrivate?: SortOrder
    birthday?: SortOrder
    location?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    clerkId?: SortOrder
    username?: SortOrder
    name?: SortOrder
    bio?: SortOrder
    image?: SortOrder
    coverImageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isPrivate?: SortOrder
    birthday?: SortOrder
    location?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    clerkId?: SortOrder
    username?: SortOrder
    name?: SortOrder
    bio?: SortOrder
    image?: SortOrder
    coverImageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isPrivate?: SortOrder
    birthday?: SortOrder
    location?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumListStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ListStatus | EnumListStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ListStatus[] | ListEnumListStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ListStatus[] | ListEnumListStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumListStatusFilter<$PrismaModel> | $Enums.ListStatus
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type RankedItemListRelationFilter = {
    every?: RankedItemWhereInput
    some?: RankedItemWhereInput
    none?: RankedItemWhereInput
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type RankedItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RankingListCountOrderByAggregateInput = {
    id?: SortOrder
    subject?: SortOrder
    description?: SortOrder
    status?: SortOrder
    listImageUrl?: SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    displayOrder?: SortOrder
    likeCount?: SortOrder
  }

  export type RankingListAvgOrderByAggregateInput = {
    displayOrder?: SortOrder
    likeCount?: SortOrder
  }

  export type RankingListMaxOrderByAggregateInput = {
    id?: SortOrder
    subject?: SortOrder
    description?: SortOrder
    status?: SortOrder
    listImageUrl?: SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    displayOrder?: SortOrder
    likeCount?: SortOrder
  }

  export type RankingListMinOrderByAggregateInput = {
    id?: SortOrder
    subject?: SortOrder
    description?: SortOrder
    status?: SortOrder
    listImageUrl?: SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    displayOrder?: SortOrder
    likeCount?: SortOrder
  }

  export type RankingListSumOrderByAggregateInput = {
    displayOrder?: SortOrder
    likeCount?: SortOrder
  }

  export type EnumListStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ListStatus | EnumListStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ListStatus[] | ListEnumListStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ListStatus[] | ListEnumListStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumListStatusWithAggregatesFilter<$PrismaModel> | $Enums.ListStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumListStatusFilter<$PrismaModel>
    _max?: NestedEnumListStatusFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type RankingListScalarRelationFilter = {
    is?: RankingListWhereInput
    isNot?: RankingListWhereInput
  }

  export type RankedItemCountOrderByAggregateInput = {
    id?: SortOrder
    itemName?: SortOrder
    rank?: SortOrder
    imageUrl?: SortOrder
    itemDescription?: SortOrder
    listId?: SortOrder
    createdAt?: SortOrder
  }

  export type RankedItemAvgOrderByAggregateInput = {
    rank?: SortOrder
  }

  export type RankedItemMaxOrderByAggregateInput = {
    id?: SortOrder
    itemName?: SortOrder
    rank?: SortOrder
    imageUrl?: SortOrder
    itemDescription?: SortOrder
    listId?: SortOrder
    createdAt?: SortOrder
  }

  export type RankedItemMinOrderByAggregateInput = {
    id?: SortOrder
    itemName?: SortOrder
    rank?: SortOrder
    imageUrl?: SortOrder
    itemDescription?: SortOrder
    listId?: SortOrder
    createdAt?: SortOrder
  }

  export type RankedItemSumOrderByAggregateInput = {
    rank?: SortOrder
  }

  export type TagScalarRelationFilter = {
    is?: TagWhereInput
    isNot?: TagWhereInput
  }

  export type RankingListTagListIdTagIdCompoundUniqueInput = {
    listId: string
    tagId: string
  }

  export type RankingListTagCountOrderByAggregateInput = {
    id?: SortOrder
    listId?: SortOrder
    tagId?: SortOrder
  }

  export type RankingListTagMaxOrderByAggregateInput = {
    id?: SortOrder
    listId?: SortOrder
    tagId?: SortOrder
  }

  export type RankingListTagMinOrderByAggregateInput = {
    id?: SortOrder
    listId?: SortOrder
    tagId?: SortOrder
  }

  export type RankingListCommentCountOrderByAggregateInput = {
    id?: SortOrder
    listId?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type RankingListCommentMaxOrderByAggregateInput = {
    id?: SortOrder
    listId?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type RankingListCommentMinOrderByAggregateInput = {
    id?: SortOrder
    listId?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumTrendPeriodFilter<$PrismaModel = never> = {
    equals?: $Enums.TrendPeriod | EnumTrendPeriodFieldRefInput<$PrismaModel>
    in?: $Enums.TrendPeriod[] | ListEnumTrendPeriodFieldRefInput<$PrismaModel>
    notIn?: $Enums.TrendPeriod[] | ListEnumTrendPeriodFieldRefInput<$PrismaModel>
    not?: NestedEnumTrendPeriodFilter<$PrismaModel> | $Enums.TrendPeriod
  }

  export type TrendingSubjectSubjectPeriodCalculationDateCompoundUniqueInput = {
    subject: string
    period: $Enums.TrendPeriod
    calculationDate: Date | string
  }

  export type TrendingSubjectCountOrderByAggregateInput = {
    id?: SortOrder
    subject?: SortOrder
    count?: SortOrder
    period?: SortOrder
    calculationDate?: SortOrder
  }

  export type TrendingSubjectAvgOrderByAggregateInput = {
    count?: SortOrder
  }

  export type TrendingSubjectMaxOrderByAggregateInput = {
    id?: SortOrder
    subject?: SortOrder
    count?: SortOrder
    period?: SortOrder
    calculationDate?: SortOrder
  }

  export type TrendingSubjectMinOrderByAggregateInput = {
    id?: SortOrder
    subject?: SortOrder
    count?: SortOrder
    period?: SortOrder
    calculationDate?: SortOrder
  }

  export type TrendingSubjectSumOrderByAggregateInput = {
    count?: SortOrder
  }

  export type EnumTrendPeriodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TrendPeriod | EnumTrendPeriodFieldRefInput<$PrismaModel>
    in?: $Enums.TrendPeriod[] | ListEnumTrendPeriodFieldRefInput<$PrismaModel>
    notIn?: $Enums.TrendPeriod[] | ListEnumTrendPeriodFieldRefInput<$PrismaModel>
    not?: NestedEnumTrendPeriodWithAggregatesFilter<$PrismaModel> | $Enums.TrendPeriod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTrendPeriodFilter<$PrismaModel>
    _max?: NestedEnumTrendPeriodFilter<$PrismaModel>
  }

  export type TrendingTagTagIdPeriodCalculationDateCompoundUniqueInput = {
    tagId: string
    period: $Enums.TrendPeriod
    calculationDate: Date | string
  }

  export type TrendingTagCountOrderByAggregateInput = {
    id?: SortOrder
    tagId?: SortOrder
    tagName?: SortOrder
    count?: SortOrder
    period?: SortOrder
    calculationDate?: SortOrder
  }

  export type TrendingTagAvgOrderByAggregateInput = {
    count?: SortOrder
  }

  export type TrendingTagMaxOrderByAggregateInput = {
    id?: SortOrder
    tagId?: SortOrder
    tagName?: SortOrder
    count?: SortOrder
    period?: SortOrder
    calculationDate?: SortOrder
  }

  export type TrendingTagMinOrderByAggregateInput = {
    id?: SortOrder
    tagId?: SortOrder
    tagName?: SortOrder
    count?: SortOrder
    period?: SortOrder
    calculationDate?: SortOrder
  }

  export type TrendingTagSumOrderByAggregateInput = {
    count?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type TrendingItemCountOrderByAggregateInput = {
    id?: SortOrder
    itemName?: SortOrder
    rankScore?: SortOrder
    period?: SortOrder
    calculationDate?: SortOrder
  }

  export type TrendingItemAvgOrderByAggregateInput = {
    rankScore?: SortOrder
  }

  export type TrendingItemMaxOrderByAggregateInput = {
    id?: SortOrder
    itemName?: SortOrder
    rankScore?: SortOrder
    period?: SortOrder
    calculationDate?: SortOrder
  }

  export type TrendingItemMinOrderByAggregateInput = {
    id?: SortOrder
    itemName?: SortOrder
    rankScore?: SortOrder
    period?: SortOrder
    calculationDate?: SortOrder
  }

  export type TrendingItemSumOrderByAggregateInput = {
    rankScore?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type UuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type AverageItemRankCountOrderByAggregateInput = {
    id?: SortOrder
    subject?: SortOrder
    itemName?: SortOrder
    avgRank?: SortOrder
    calculationDate?: SortOrder
    count?: SortOrder
  }

  export type AverageItemRankAvgOrderByAggregateInput = {
    avgRank?: SortOrder
    count?: SortOrder
  }

  export type AverageItemRankMaxOrderByAggregateInput = {
    id?: SortOrder
    subject?: SortOrder
    itemName?: SortOrder
    avgRank?: SortOrder
    calculationDate?: SortOrder
    count?: SortOrder
  }

  export type AverageItemRankMinOrderByAggregateInput = {
    id?: SortOrder
    subject?: SortOrder
    itemName?: SortOrder
    avgRank?: SortOrder
    calculationDate?: SortOrder
    count?: SortOrder
  }

  export type AverageItemRankSumOrderByAggregateInput = {
    avgRank?: SortOrder
    count?: SortOrder
  }

  export type UuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type AverageItemCommentCountOrderByAggregateInput = {
    id?: SortOrder
    subject?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type AverageItemCommentMaxOrderByAggregateInput = {
    id?: SortOrder
    subject?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type AverageItemCommentMinOrderByAggregateInput = {
    id?: SortOrder
    subject?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type PostCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    likeCount?: SortOrder
    imageUrl?: SortOrder
  }

  export type PostAvgOrderByAggregateInput = {
    likeCount?: SortOrder
  }

  export type PostMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    likeCount?: SortOrder
    imageUrl?: SortOrder
  }

  export type PostMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    likeCount?: SortOrder
    imageUrl?: SortOrder
  }

  export type PostSumOrderByAggregateInput = {
    likeCount?: SortOrder
  }

  export type FeedItemScalarRelationFilter = {
    is?: FeedItemWhereInput
    isNot?: FeedItemWhereInput
  }

  export type RetweetUserIdFeedItemIdCompoundUniqueInput = {
    userId: string
    feedItemId: string
  }

  export type RetweetCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    feedItemId?: SortOrder
    createdAt?: SortOrder
  }

  export type RetweetMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    feedItemId?: SortOrder
    createdAt?: SortOrder
  }

  export type RetweetMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    feedItemId?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumFeedTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.FeedType | EnumFeedTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FeedType[] | ListEnumFeedTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FeedType[] | ListEnumFeedTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFeedTypeFilter<$PrismaModel> | $Enums.FeedType
  }

  export type PostNullableScalarRelationFilter = {
    is?: PostWhereInput | null
    isNot?: PostWhereInput | null
  }

  export type RankingListNullableScalarRelationFilter = {
    is?: RankingListWhereInput | null
    isNot?: RankingListWhereInput | null
  }

  export type FeedItemNullableScalarRelationFilter = {
    is?: FeedItemWhereInput | null
    isNot?: FeedItemWhereInput | null
  }

  export type FeedItemRankingListIdTypeCompoundUniqueInput = {
    rankingListId: string
    type: $Enums.FeedType
  }

  export type FeedItemCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
    rankingListId?: SortOrder
    retweetOfFeedItemId?: SortOrder
    quotedFeedItemId?: SortOrder
    quoteRetweetCount?: SortOrder
  }

  export type FeedItemAvgOrderByAggregateInput = {
    quoteRetweetCount?: SortOrder
  }

  export type FeedItemMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
    rankingListId?: SortOrder
    retweetOfFeedItemId?: SortOrder
    quotedFeedItemId?: SortOrder
    quoteRetweetCount?: SortOrder
  }

  export type FeedItemMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
    rankingListId?: SortOrder
    retweetOfFeedItemId?: SortOrder
    quotedFeedItemId?: SortOrder
    quoteRetweetCount?: SortOrder
  }

  export type FeedItemSumOrderByAggregateInput = {
    quoteRetweetCount?: SortOrder
  }

  export type EnumFeedTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FeedType | EnumFeedTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FeedType[] | ListEnumFeedTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FeedType[] | ListEnumFeedTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFeedTypeWithAggregatesFilter<$PrismaModel> | $Enums.FeedType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFeedTypeFilter<$PrismaModel>
    _max?: NestedEnumFeedTypeFilter<$PrismaModel>
  }

  export type LikeCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    postId?: SortOrder
    rankingListId?: SortOrder
  }

  export type LikeMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    postId?: SortOrder
    rankingListId?: SortOrder
  }

  export type LikeMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    postId?: SortOrder
    rankingListId?: SortOrder
  }

  export type PostScalarRelationFilter = {
    is?: PostWhereInput
    isNot?: PostWhereInput
  }

  export type ReplyCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReplyMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReplyMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumFollowRequestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.FollowRequestStatus | EnumFollowRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.FollowRequestStatus[] | ListEnumFollowRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.FollowRequestStatus[] | ListEnumFollowRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumFollowRequestStatusFilter<$PrismaModel> | $Enums.FollowRequestStatus
  }

  export type FollowRequestRequesterIdRequestedIdCompoundUniqueInput = {
    requesterId: string
    requestedId: string
  }

  export type FollowRequestCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    requesterId?: SortOrder
    requestedId?: SortOrder
  }

  export type FollowRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    requesterId?: SortOrder
    requestedId?: SortOrder
  }

  export type FollowRequestMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    requesterId?: SortOrder
    requestedId?: SortOrder
  }

  export type EnumFollowRequestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FollowRequestStatus | EnumFollowRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.FollowRequestStatus[] | ListEnumFollowRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.FollowRequestStatus[] | ListEnumFollowRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumFollowRequestStatusWithAggregatesFilter<$PrismaModel> | $Enums.FollowRequestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFollowRequestStatusFilter<$PrismaModel>
    _max?: NestedEnumFollowRequestStatusFilter<$PrismaModel>
  }

  export type FollowFollowerIdFollowingIdCompoundUniqueInput = {
    followerId: string
    followingId: string
  }

  export type FollowCountOrderByAggregateInput = {
    id?: SortOrder
    followerId?: SortOrder
    followingId?: SortOrder
    createdAt?: SortOrder
  }

  export type FollowMaxOrderByAggregateInput = {
    id?: SortOrder
    followerId?: SortOrder
    followingId?: SortOrder
    createdAt?: SortOrder
  }

  export type FollowMinOrderByAggregateInput = {
    id?: SortOrder
    followerId?: SortOrder
    followingId?: SortOrder
    createdAt?: SortOrder
  }

  export type TrendingTagCreateNestedManyWithoutTagInput = {
    create?: XOR<TrendingTagCreateWithoutTagInput, TrendingTagUncheckedCreateWithoutTagInput> | TrendingTagCreateWithoutTagInput[] | TrendingTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TrendingTagCreateOrConnectWithoutTagInput | TrendingTagCreateOrConnectWithoutTagInput[]
    createMany?: TrendingTagCreateManyTagInputEnvelope
    connect?: TrendingTagWhereUniqueInput | TrendingTagWhereUniqueInput[]
  }

  export type RankingListTagCreateNestedManyWithoutTagInput = {
    create?: XOR<RankingListTagCreateWithoutTagInput, RankingListTagUncheckedCreateWithoutTagInput> | RankingListTagCreateWithoutTagInput[] | RankingListTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: RankingListTagCreateOrConnectWithoutTagInput | RankingListTagCreateOrConnectWithoutTagInput[]
    createMany?: RankingListTagCreateManyTagInputEnvelope
    connect?: RankingListTagWhereUniqueInput | RankingListTagWhereUniqueInput[]
  }

  export type TrendingTagUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<TrendingTagCreateWithoutTagInput, TrendingTagUncheckedCreateWithoutTagInput> | TrendingTagCreateWithoutTagInput[] | TrendingTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TrendingTagCreateOrConnectWithoutTagInput | TrendingTagCreateOrConnectWithoutTagInput[]
    createMany?: TrendingTagCreateManyTagInputEnvelope
    connect?: TrendingTagWhereUniqueInput | TrendingTagWhereUniqueInput[]
  }

  export type RankingListTagUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<RankingListTagCreateWithoutTagInput, RankingListTagUncheckedCreateWithoutTagInput> | RankingListTagCreateWithoutTagInput[] | RankingListTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: RankingListTagCreateOrConnectWithoutTagInput | RankingListTagCreateOrConnectWithoutTagInput[]
    createMany?: RankingListTagCreateManyTagInputEnvelope
    connect?: RankingListTagWhereUniqueInput | RankingListTagWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type TrendingTagUpdateManyWithoutTagNestedInput = {
    create?: XOR<TrendingTagCreateWithoutTagInput, TrendingTagUncheckedCreateWithoutTagInput> | TrendingTagCreateWithoutTagInput[] | TrendingTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TrendingTagCreateOrConnectWithoutTagInput | TrendingTagCreateOrConnectWithoutTagInput[]
    upsert?: TrendingTagUpsertWithWhereUniqueWithoutTagInput | TrendingTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: TrendingTagCreateManyTagInputEnvelope
    set?: TrendingTagWhereUniqueInput | TrendingTagWhereUniqueInput[]
    disconnect?: TrendingTagWhereUniqueInput | TrendingTagWhereUniqueInput[]
    delete?: TrendingTagWhereUniqueInput | TrendingTagWhereUniqueInput[]
    connect?: TrendingTagWhereUniqueInput | TrendingTagWhereUniqueInput[]
    update?: TrendingTagUpdateWithWhereUniqueWithoutTagInput | TrendingTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: TrendingTagUpdateManyWithWhereWithoutTagInput | TrendingTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: TrendingTagScalarWhereInput | TrendingTagScalarWhereInput[]
  }

  export type RankingListTagUpdateManyWithoutTagNestedInput = {
    create?: XOR<RankingListTagCreateWithoutTagInput, RankingListTagUncheckedCreateWithoutTagInput> | RankingListTagCreateWithoutTagInput[] | RankingListTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: RankingListTagCreateOrConnectWithoutTagInput | RankingListTagCreateOrConnectWithoutTagInput[]
    upsert?: RankingListTagUpsertWithWhereUniqueWithoutTagInput | RankingListTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: RankingListTagCreateManyTagInputEnvelope
    set?: RankingListTagWhereUniqueInput | RankingListTagWhereUniqueInput[]
    disconnect?: RankingListTagWhereUniqueInput | RankingListTagWhereUniqueInput[]
    delete?: RankingListTagWhereUniqueInput | RankingListTagWhereUniqueInput[]
    connect?: RankingListTagWhereUniqueInput | RankingListTagWhereUniqueInput[]
    update?: RankingListTagUpdateWithWhereUniqueWithoutTagInput | RankingListTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: RankingListTagUpdateManyWithWhereWithoutTagInput | RankingListTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: RankingListTagScalarWhereInput | RankingListTagScalarWhereInput[]
  }

  export type TrendingTagUncheckedUpdateManyWithoutTagNestedInput = {
    create?: XOR<TrendingTagCreateWithoutTagInput, TrendingTagUncheckedCreateWithoutTagInput> | TrendingTagCreateWithoutTagInput[] | TrendingTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TrendingTagCreateOrConnectWithoutTagInput | TrendingTagCreateOrConnectWithoutTagInput[]
    upsert?: TrendingTagUpsertWithWhereUniqueWithoutTagInput | TrendingTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: TrendingTagCreateManyTagInputEnvelope
    set?: TrendingTagWhereUniqueInput | TrendingTagWhereUniqueInput[]
    disconnect?: TrendingTagWhereUniqueInput | TrendingTagWhereUniqueInput[]
    delete?: TrendingTagWhereUniqueInput | TrendingTagWhereUniqueInput[]
    connect?: TrendingTagWhereUniqueInput | TrendingTagWhereUniqueInput[]
    update?: TrendingTagUpdateWithWhereUniqueWithoutTagInput | TrendingTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: TrendingTagUpdateManyWithWhereWithoutTagInput | TrendingTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: TrendingTagScalarWhereInput | TrendingTagScalarWhereInput[]
  }

  export type RankingListTagUncheckedUpdateManyWithoutTagNestedInput = {
    create?: XOR<RankingListTagCreateWithoutTagInput, RankingListTagUncheckedCreateWithoutTagInput> | RankingListTagCreateWithoutTagInput[] | RankingListTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: RankingListTagCreateOrConnectWithoutTagInput | RankingListTagCreateOrConnectWithoutTagInput[]
    upsert?: RankingListTagUpsertWithWhereUniqueWithoutTagInput | RankingListTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: RankingListTagCreateManyTagInputEnvelope
    set?: RankingListTagWhereUniqueInput | RankingListTagWhereUniqueInput[]
    disconnect?: RankingListTagWhereUniqueInput | RankingListTagWhereUniqueInput[]
    delete?: RankingListTagWhereUniqueInput | RankingListTagWhereUniqueInput[]
    connect?: RankingListTagWhereUniqueInput | RankingListTagWhereUniqueInput[]
    update?: RankingListTagUpdateWithWhereUniqueWithoutTagInput | RankingListTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: RankingListTagUpdateManyWithWhereWithoutTagInput | RankingListTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: RankingListTagScalarWhereInput | RankingListTagScalarWhereInput[]
  }

  export type FeedItemCreateNestedManyWithoutUserInput = {
    create?: XOR<FeedItemCreateWithoutUserInput, FeedItemUncheckedCreateWithoutUserInput> | FeedItemCreateWithoutUserInput[] | FeedItemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedItemCreateOrConnectWithoutUserInput | FeedItemCreateOrConnectWithoutUserInput[]
    createMany?: FeedItemCreateManyUserInputEnvelope
    connect?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
  }

  export type FollowCreateNestedManyWithoutFollowerInput = {
    create?: XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput> | FollowCreateWithoutFollowerInput[] | FollowUncheckedCreateWithoutFollowerInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowerInput | FollowCreateOrConnectWithoutFollowerInput[]
    createMany?: FollowCreateManyFollowerInputEnvelope
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
  }

  export type FollowCreateNestedManyWithoutFollowingInput = {
    create?: XOR<FollowCreateWithoutFollowingInput, FollowUncheckedCreateWithoutFollowingInput> | FollowCreateWithoutFollowingInput[] | FollowUncheckedCreateWithoutFollowingInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowingInput | FollowCreateOrConnectWithoutFollowingInput[]
    createMany?: FollowCreateManyFollowingInputEnvelope
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
  }

  export type FollowRequestCreateNestedManyWithoutRequestedInput = {
    create?: XOR<FollowRequestCreateWithoutRequestedInput, FollowRequestUncheckedCreateWithoutRequestedInput> | FollowRequestCreateWithoutRequestedInput[] | FollowRequestUncheckedCreateWithoutRequestedInput[]
    connectOrCreate?: FollowRequestCreateOrConnectWithoutRequestedInput | FollowRequestCreateOrConnectWithoutRequestedInput[]
    createMany?: FollowRequestCreateManyRequestedInputEnvelope
    connect?: FollowRequestWhereUniqueInput | FollowRequestWhereUniqueInput[]
  }

  export type FollowRequestCreateNestedManyWithoutRequesterInput = {
    create?: XOR<FollowRequestCreateWithoutRequesterInput, FollowRequestUncheckedCreateWithoutRequesterInput> | FollowRequestCreateWithoutRequesterInput[] | FollowRequestUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: FollowRequestCreateOrConnectWithoutRequesterInput | FollowRequestCreateOrConnectWithoutRequesterInput[]
    createMany?: FollowRequestCreateManyRequesterInputEnvelope
    connect?: FollowRequestWhereUniqueInput | FollowRequestWhereUniqueInput[]
  }

  export type LikeCreateNestedManyWithoutUserInput = {
    create?: XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput> | LikeCreateWithoutUserInput[] | LikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutUserInput | LikeCreateOrConnectWithoutUserInput[]
    createMany?: LikeCreateManyUserInputEnvelope
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
  }

  export type PostCreateNestedManyWithoutAuthorInput = {
    create?: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput> | PostCreateWithoutAuthorInput[] | PostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: PostCreateOrConnectWithoutAuthorInput | PostCreateOrConnectWithoutAuthorInput[]
    createMany?: PostCreateManyAuthorInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type RankingListCreateNestedManyWithoutAuthorInput = {
    create?: XOR<RankingListCreateWithoutAuthorInput, RankingListUncheckedCreateWithoutAuthorInput> | RankingListCreateWithoutAuthorInput[] | RankingListUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: RankingListCreateOrConnectWithoutAuthorInput | RankingListCreateOrConnectWithoutAuthorInput[]
    createMany?: RankingListCreateManyAuthorInputEnvelope
    connect?: RankingListWhereUniqueInput | RankingListWhereUniqueInput[]
  }

  export type ReplyCreateNestedManyWithoutUserInput = {
    create?: XOR<ReplyCreateWithoutUserInput, ReplyUncheckedCreateWithoutUserInput> | ReplyCreateWithoutUserInput[] | ReplyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReplyCreateOrConnectWithoutUserInput | ReplyCreateOrConnectWithoutUserInput[]
    createMany?: ReplyCreateManyUserInputEnvelope
    connect?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
  }

  export type RetweetCreateNestedManyWithoutUserInput = {
    create?: XOR<RetweetCreateWithoutUserInput, RetweetUncheckedCreateWithoutUserInput> | RetweetCreateWithoutUserInput[] | RetweetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RetweetCreateOrConnectWithoutUserInput | RetweetCreateOrConnectWithoutUserInput[]
    createMany?: RetweetCreateManyUserInputEnvelope
    connect?: RetweetWhereUniqueInput | RetweetWhereUniqueInput[]
  }

  export type RankingListCommentCreateNestedManyWithoutUserInput = {
    create?: XOR<RankingListCommentCreateWithoutUserInput, RankingListCommentUncheckedCreateWithoutUserInput> | RankingListCommentCreateWithoutUserInput[] | RankingListCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RankingListCommentCreateOrConnectWithoutUserInput | RankingListCommentCreateOrConnectWithoutUserInput[]
    createMany?: RankingListCommentCreateManyUserInputEnvelope
    connect?: RankingListCommentWhereUniqueInput | RankingListCommentWhereUniqueInput[]
  }

  export type AverageItemCommentCreateNestedManyWithoutUserInput = {
    create?: XOR<AverageItemCommentCreateWithoutUserInput, AverageItemCommentUncheckedCreateWithoutUserInput> | AverageItemCommentCreateWithoutUserInput[] | AverageItemCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AverageItemCommentCreateOrConnectWithoutUserInput | AverageItemCommentCreateOrConnectWithoutUserInput[]
    createMany?: AverageItemCommentCreateManyUserInputEnvelope
    connect?: AverageItemCommentWhereUniqueInput | AverageItemCommentWhereUniqueInput[]
  }

  export type FeedItemUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FeedItemCreateWithoutUserInput, FeedItemUncheckedCreateWithoutUserInput> | FeedItemCreateWithoutUserInput[] | FeedItemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedItemCreateOrConnectWithoutUserInput | FeedItemCreateOrConnectWithoutUserInput[]
    createMany?: FeedItemCreateManyUserInputEnvelope
    connect?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
  }

  export type FollowUncheckedCreateNestedManyWithoutFollowerInput = {
    create?: XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput> | FollowCreateWithoutFollowerInput[] | FollowUncheckedCreateWithoutFollowerInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowerInput | FollowCreateOrConnectWithoutFollowerInput[]
    createMany?: FollowCreateManyFollowerInputEnvelope
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
  }

  export type FollowUncheckedCreateNestedManyWithoutFollowingInput = {
    create?: XOR<FollowCreateWithoutFollowingInput, FollowUncheckedCreateWithoutFollowingInput> | FollowCreateWithoutFollowingInput[] | FollowUncheckedCreateWithoutFollowingInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowingInput | FollowCreateOrConnectWithoutFollowingInput[]
    createMany?: FollowCreateManyFollowingInputEnvelope
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
  }

  export type FollowRequestUncheckedCreateNestedManyWithoutRequestedInput = {
    create?: XOR<FollowRequestCreateWithoutRequestedInput, FollowRequestUncheckedCreateWithoutRequestedInput> | FollowRequestCreateWithoutRequestedInput[] | FollowRequestUncheckedCreateWithoutRequestedInput[]
    connectOrCreate?: FollowRequestCreateOrConnectWithoutRequestedInput | FollowRequestCreateOrConnectWithoutRequestedInput[]
    createMany?: FollowRequestCreateManyRequestedInputEnvelope
    connect?: FollowRequestWhereUniqueInput | FollowRequestWhereUniqueInput[]
  }

  export type FollowRequestUncheckedCreateNestedManyWithoutRequesterInput = {
    create?: XOR<FollowRequestCreateWithoutRequesterInput, FollowRequestUncheckedCreateWithoutRequesterInput> | FollowRequestCreateWithoutRequesterInput[] | FollowRequestUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: FollowRequestCreateOrConnectWithoutRequesterInput | FollowRequestCreateOrConnectWithoutRequesterInput[]
    createMany?: FollowRequestCreateManyRequesterInputEnvelope
    connect?: FollowRequestWhereUniqueInput | FollowRequestWhereUniqueInput[]
  }

  export type LikeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput> | LikeCreateWithoutUserInput[] | LikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutUserInput | LikeCreateOrConnectWithoutUserInput[]
    createMany?: LikeCreateManyUserInputEnvelope
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
  }

  export type PostUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput> | PostCreateWithoutAuthorInput[] | PostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: PostCreateOrConnectWithoutAuthorInput | PostCreateOrConnectWithoutAuthorInput[]
    createMany?: PostCreateManyAuthorInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type RankingListUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<RankingListCreateWithoutAuthorInput, RankingListUncheckedCreateWithoutAuthorInput> | RankingListCreateWithoutAuthorInput[] | RankingListUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: RankingListCreateOrConnectWithoutAuthorInput | RankingListCreateOrConnectWithoutAuthorInput[]
    createMany?: RankingListCreateManyAuthorInputEnvelope
    connect?: RankingListWhereUniqueInput | RankingListWhereUniqueInput[]
  }

  export type ReplyUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReplyCreateWithoutUserInput, ReplyUncheckedCreateWithoutUserInput> | ReplyCreateWithoutUserInput[] | ReplyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReplyCreateOrConnectWithoutUserInput | ReplyCreateOrConnectWithoutUserInput[]
    createMany?: ReplyCreateManyUserInputEnvelope
    connect?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
  }

  export type RetweetUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RetweetCreateWithoutUserInput, RetweetUncheckedCreateWithoutUserInput> | RetweetCreateWithoutUserInput[] | RetweetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RetweetCreateOrConnectWithoutUserInput | RetweetCreateOrConnectWithoutUserInput[]
    createMany?: RetweetCreateManyUserInputEnvelope
    connect?: RetweetWhereUniqueInput | RetweetWhereUniqueInput[]
  }

  export type RankingListCommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RankingListCommentCreateWithoutUserInput, RankingListCommentUncheckedCreateWithoutUserInput> | RankingListCommentCreateWithoutUserInput[] | RankingListCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RankingListCommentCreateOrConnectWithoutUserInput | RankingListCommentCreateOrConnectWithoutUserInput[]
    createMany?: RankingListCommentCreateManyUserInputEnvelope
    connect?: RankingListCommentWhereUniqueInput | RankingListCommentWhereUniqueInput[]
  }

  export type AverageItemCommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AverageItemCommentCreateWithoutUserInput, AverageItemCommentUncheckedCreateWithoutUserInput> | AverageItemCommentCreateWithoutUserInput[] | AverageItemCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AverageItemCommentCreateOrConnectWithoutUserInput | AverageItemCommentCreateOrConnectWithoutUserInput[]
    createMany?: AverageItemCommentCreateManyUserInputEnvelope
    connect?: AverageItemCommentWhereUniqueInput | AverageItemCommentWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type FeedItemUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeedItemCreateWithoutUserInput, FeedItemUncheckedCreateWithoutUserInput> | FeedItemCreateWithoutUserInput[] | FeedItemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedItemCreateOrConnectWithoutUserInput | FeedItemCreateOrConnectWithoutUserInput[]
    upsert?: FeedItemUpsertWithWhereUniqueWithoutUserInput | FeedItemUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeedItemCreateManyUserInputEnvelope
    set?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    disconnect?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    delete?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    connect?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    update?: FeedItemUpdateWithWhereUniqueWithoutUserInput | FeedItemUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeedItemUpdateManyWithWhereWithoutUserInput | FeedItemUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeedItemScalarWhereInput | FeedItemScalarWhereInput[]
  }

  export type FollowUpdateManyWithoutFollowerNestedInput = {
    create?: XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput> | FollowCreateWithoutFollowerInput[] | FollowUncheckedCreateWithoutFollowerInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowerInput | FollowCreateOrConnectWithoutFollowerInput[]
    upsert?: FollowUpsertWithWhereUniqueWithoutFollowerInput | FollowUpsertWithWhereUniqueWithoutFollowerInput[]
    createMany?: FollowCreateManyFollowerInputEnvelope
    set?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    disconnect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    delete?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    update?: FollowUpdateWithWhereUniqueWithoutFollowerInput | FollowUpdateWithWhereUniqueWithoutFollowerInput[]
    updateMany?: FollowUpdateManyWithWhereWithoutFollowerInput | FollowUpdateManyWithWhereWithoutFollowerInput[]
    deleteMany?: FollowScalarWhereInput | FollowScalarWhereInput[]
  }

  export type FollowUpdateManyWithoutFollowingNestedInput = {
    create?: XOR<FollowCreateWithoutFollowingInput, FollowUncheckedCreateWithoutFollowingInput> | FollowCreateWithoutFollowingInput[] | FollowUncheckedCreateWithoutFollowingInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowingInput | FollowCreateOrConnectWithoutFollowingInput[]
    upsert?: FollowUpsertWithWhereUniqueWithoutFollowingInput | FollowUpsertWithWhereUniqueWithoutFollowingInput[]
    createMany?: FollowCreateManyFollowingInputEnvelope
    set?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    disconnect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    delete?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    update?: FollowUpdateWithWhereUniqueWithoutFollowingInput | FollowUpdateWithWhereUniqueWithoutFollowingInput[]
    updateMany?: FollowUpdateManyWithWhereWithoutFollowingInput | FollowUpdateManyWithWhereWithoutFollowingInput[]
    deleteMany?: FollowScalarWhereInput | FollowScalarWhereInput[]
  }

  export type FollowRequestUpdateManyWithoutRequestedNestedInput = {
    create?: XOR<FollowRequestCreateWithoutRequestedInput, FollowRequestUncheckedCreateWithoutRequestedInput> | FollowRequestCreateWithoutRequestedInput[] | FollowRequestUncheckedCreateWithoutRequestedInput[]
    connectOrCreate?: FollowRequestCreateOrConnectWithoutRequestedInput | FollowRequestCreateOrConnectWithoutRequestedInput[]
    upsert?: FollowRequestUpsertWithWhereUniqueWithoutRequestedInput | FollowRequestUpsertWithWhereUniqueWithoutRequestedInput[]
    createMany?: FollowRequestCreateManyRequestedInputEnvelope
    set?: FollowRequestWhereUniqueInput | FollowRequestWhereUniqueInput[]
    disconnect?: FollowRequestWhereUniqueInput | FollowRequestWhereUniqueInput[]
    delete?: FollowRequestWhereUniqueInput | FollowRequestWhereUniqueInput[]
    connect?: FollowRequestWhereUniqueInput | FollowRequestWhereUniqueInput[]
    update?: FollowRequestUpdateWithWhereUniqueWithoutRequestedInput | FollowRequestUpdateWithWhereUniqueWithoutRequestedInput[]
    updateMany?: FollowRequestUpdateManyWithWhereWithoutRequestedInput | FollowRequestUpdateManyWithWhereWithoutRequestedInput[]
    deleteMany?: FollowRequestScalarWhereInput | FollowRequestScalarWhereInput[]
  }

  export type FollowRequestUpdateManyWithoutRequesterNestedInput = {
    create?: XOR<FollowRequestCreateWithoutRequesterInput, FollowRequestUncheckedCreateWithoutRequesterInput> | FollowRequestCreateWithoutRequesterInput[] | FollowRequestUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: FollowRequestCreateOrConnectWithoutRequesterInput | FollowRequestCreateOrConnectWithoutRequesterInput[]
    upsert?: FollowRequestUpsertWithWhereUniqueWithoutRequesterInput | FollowRequestUpsertWithWhereUniqueWithoutRequesterInput[]
    createMany?: FollowRequestCreateManyRequesterInputEnvelope
    set?: FollowRequestWhereUniqueInput | FollowRequestWhereUniqueInput[]
    disconnect?: FollowRequestWhereUniqueInput | FollowRequestWhereUniqueInput[]
    delete?: FollowRequestWhereUniqueInput | FollowRequestWhereUniqueInput[]
    connect?: FollowRequestWhereUniqueInput | FollowRequestWhereUniqueInput[]
    update?: FollowRequestUpdateWithWhereUniqueWithoutRequesterInput | FollowRequestUpdateWithWhereUniqueWithoutRequesterInput[]
    updateMany?: FollowRequestUpdateManyWithWhereWithoutRequesterInput | FollowRequestUpdateManyWithWhereWithoutRequesterInput[]
    deleteMany?: FollowRequestScalarWhereInput | FollowRequestScalarWhereInput[]
  }

  export type LikeUpdateManyWithoutUserNestedInput = {
    create?: XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput> | LikeCreateWithoutUserInput[] | LikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutUserInput | LikeCreateOrConnectWithoutUserInput[]
    upsert?: LikeUpsertWithWhereUniqueWithoutUserInput | LikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LikeCreateManyUserInputEnvelope
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    update?: LikeUpdateWithWhereUniqueWithoutUserInput | LikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LikeUpdateManyWithWhereWithoutUserInput | LikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[]
  }

  export type PostUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput> | PostCreateWithoutAuthorInput[] | PostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: PostCreateOrConnectWithoutAuthorInput | PostCreateOrConnectWithoutAuthorInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutAuthorInput | PostUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: PostCreateManyAuthorInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutAuthorInput | PostUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: PostUpdateManyWithWhereWithoutAuthorInput | PostUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type RankingListUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<RankingListCreateWithoutAuthorInput, RankingListUncheckedCreateWithoutAuthorInput> | RankingListCreateWithoutAuthorInput[] | RankingListUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: RankingListCreateOrConnectWithoutAuthorInput | RankingListCreateOrConnectWithoutAuthorInput[]
    upsert?: RankingListUpsertWithWhereUniqueWithoutAuthorInput | RankingListUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: RankingListCreateManyAuthorInputEnvelope
    set?: RankingListWhereUniqueInput | RankingListWhereUniqueInput[]
    disconnect?: RankingListWhereUniqueInput | RankingListWhereUniqueInput[]
    delete?: RankingListWhereUniqueInput | RankingListWhereUniqueInput[]
    connect?: RankingListWhereUniqueInput | RankingListWhereUniqueInput[]
    update?: RankingListUpdateWithWhereUniqueWithoutAuthorInput | RankingListUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: RankingListUpdateManyWithWhereWithoutAuthorInput | RankingListUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: RankingListScalarWhereInput | RankingListScalarWhereInput[]
  }

  export type ReplyUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReplyCreateWithoutUserInput, ReplyUncheckedCreateWithoutUserInput> | ReplyCreateWithoutUserInput[] | ReplyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReplyCreateOrConnectWithoutUserInput | ReplyCreateOrConnectWithoutUserInput[]
    upsert?: ReplyUpsertWithWhereUniqueWithoutUserInput | ReplyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReplyCreateManyUserInputEnvelope
    set?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
    disconnect?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
    delete?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
    connect?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
    update?: ReplyUpdateWithWhereUniqueWithoutUserInput | ReplyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReplyUpdateManyWithWhereWithoutUserInput | ReplyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReplyScalarWhereInput | ReplyScalarWhereInput[]
  }

  export type RetweetUpdateManyWithoutUserNestedInput = {
    create?: XOR<RetweetCreateWithoutUserInput, RetweetUncheckedCreateWithoutUserInput> | RetweetCreateWithoutUserInput[] | RetweetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RetweetCreateOrConnectWithoutUserInput | RetweetCreateOrConnectWithoutUserInput[]
    upsert?: RetweetUpsertWithWhereUniqueWithoutUserInput | RetweetUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RetweetCreateManyUserInputEnvelope
    set?: RetweetWhereUniqueInput | RetweetWhereUniqueInput[]
    disconnect?: RetweetWhereUniqueInput | RetweetWhereUniqueInput[]
    delete?: RetweetWhereUniqueInput | RetweetWhereUniqueInput[]
    connect?: RetweetWhereUniqueInput | RetweetWhereUniqueInput[]
    update?: RetweetUpdateWithWhereUniqueWithoutUserInput | RetweetUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RetweetUpdateManyWithWhereWithoutUserInput | RetweetUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RetweetScalarWhereInput | RetweetScalarWhereInput[]
  }

  export type RankingListCommentUpdateManyWithoutUserNestedInput = {
    create?: XOR<RankingListCommentCreateWithoutUserInput, RankingListCommentUncheckedCreateWithoutUserInput> | RankingListCommentCreateWithoutUserInput[] | RankingListCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RankingListCommentCreateOrConnectWithoutUserInput | RankingListCommentCreateOrConnectWithoutUserInput[]
    upsert?: RankingListCommentUpsertWithWhereUniqueWithoutUserInput | RankingListCommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RankingListCommentCreateManyUserInputEnvelope
    set?: RankingListCommentWhereUniqueInput | RankingListCommentWhereUniqueInput[]
    disconnect?: RankingListCommentWhereUniqueInput | RankingListCommentWhereUniqueInput[]
    delete?: RankingListCommentWhereUniqueInput | RankingListCommentWhereUniqueInput[]
    connect?: RankingListCommentWhereUniqueInput | RankingListCommentWhereUniqueInput[]
    update?: RankingListCommentUpdateWithWhereUniqueWithoutUserInput | RankingListCommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RankingListCommentUpdateManyWithWhereWithoutUserInput | RankingListCommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RankingListCommentScalarWhereInput | RankingListCommentScalarWhereInput[]
  }

  export type AverageItemCommentUpdateManyWithoutUserNestedInput = {
    create?: XOR<AverageItemCommentCreateWithoutUserInput, AverageItemCommentUncheckedCreateWithoutUserInput> | AverageItemCommentCreateWithoutUserInput[] | AverageItemCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AverageItemCommentCreateOrConnectWithoutUserInput | AverageItemCommentCreateOrConnectWithoutUserInput[]
    upsert?: AverageItemCommentUpsertWithWhereUniqueWithoutUserInput | AverageItemCommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AverageItemCommentCreateManyUserInputEnvelope
    set?: AverageItemCommentWhereUniqueInput | AverageItemCommentWhereUniqueInput[]
    disconnect?: AverageItemCommentWhereUniqueInput | AverageItemCommentWhereUniqueInput[]
    delete?: AverageItemCommentWhereUniqueInput | AverageItemCommentWhereUniqueInput[]
    connect?: AverageItemCommentWhereUniqueInput | AverageItemCommentWhereUniqueInput[]
    update?: AverageItemCommentUpdateWithWhereUniqueWithoutUserInput | AverageItemCommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AverageItemCommentUpdateManyWithWhereWithoutUserInput | AverageItemCommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AverageItemCommentScalarWhereInput | AverageItemCommentScalarWhereInput[]
  }

  export type FeedItemUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeedItemCreateWithoutUserInput, FeedItemUncheckedCreateWithoutUserInput> | FeedItemCreateWithoutUserInput[] | FeedItemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedItemCreateOrConnectWithoutUserInput | FeedItemCreateOrConnectWithoutUserInput[]
    upsert?: FeedItemUpsertWithWhereUniqueWithoutUserInput | FeedItemUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeedItemCreateManyUserInputEnvelope
    set?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    disconnect?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    delete?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    connect?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    update?: FeedItemUpdateWithWhereUniqueWithoutUserInput | FeedItemUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeedItemUpdateManyWithWhereWithoutUserInput | FeedItemUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeedItemScalarWhereInput | FeedItemScalarWhereInput[]
  }

  export type FollowUncheckedUpdateManyWithoutFollowerNestedInput = {
    create?: XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput> | FollowCreateWithoutFollowerInput[] | FollowUncheckedCreateWithoutFollowerInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowerInput | FollowCreateOrConnectWithoutFollowerInput[]
    upsert?: FollowUpsertWithWhereUniqueWithoutFollowerInput | FollowUpsertWithWhereUniqueWithoutFollowerInput[]
    createMany?: FollowCreateManyFollowerInputEnvelope
    set?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    disconnect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    delete?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    update?: FollowUpdateWithWhereUniqueWithoutFollowerInput | FollowUpdateWithWhereUniqueWithoutFollowerInput[]
    updateMany?: FollowUpdateManyWithWhereWithoutFollowerInput | FollowUpdateManyWithWhereWithoutFollowerInput[]
    deleteMany?: FollowScalarWhereInput | FollowScalarWhereInput[]
  }

  export type FollowUncheckedUpdateManyWithoutFollowingNestedInput = {
    create?: XOR<FollowCreateWithoutFollowingInput, FollowUncheckedCreateWithoutFollowingInput> | FollowCreateWithoutFollowingInput[] | FollowUncheckedCreateWithoutFollowingInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowingInput | FollowCreateOrConnectWithoutFollowingInput[]
    upsert?: FollowUpsertWithWhereUniqueWithoutFollowingInput | FollowUpsertWithWhereUniqueWithoutFollowingInput[]
    createMany?: FollowCreateManyFollowingInputEnvelope
    set?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    disconnect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    delete?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    update?: FollowUpdateWithWhereUniqueWithoutFollowingInput | FollowUpdateWithWhereUniqueWithoutFollowingInput[]
    updateMany?: FollowUpdateManyWithWhereWithoutFollowingInput | FollowUpdateManyWithWhereWithoutFollowingInput[]
    deleteMany?: FollowScalarWhereInput | FollowScalarWhereInput[]
  }

  export type FollowRequestUncheckedUpdateManyWithoutRequestedNestedInput = {
    create?: XOR<FollowRequestCreateWithoutRequestedInput, FollowRequestUncheckedCreateWithoutRequestedInput> | FollowRequestCreateWithoutRequestedInput[] | FollowRequestUncheckedCreateWithoutRequestedInput[]
    connectOrCreate?: FollowRequestCreateOrConnectWithoutRequestedInput | FollowRequestCreateOrConnectWithoutRequestedInput[]
    upsert?: FollowRequestUpsertWithWhereUniqueWithoutRequestedInput | FollowRequestUpsertWithWhereUniqueWithoutRequestedInput[]
    createMany?: FollowRequestCreateManyRequestedInputEnvelope
    set?: FollowRequestWhereUniqueInput | FollowRequestWhereUniqueInput[]
    disconnect?: FollowRequestWhereUniqueInput | FollowRequestWhereUniqueInput[]
    delete?: FollowRequestWhereUniqueInput | FollowRequestWhereUniqueInput[]
    connect?: FollowRequestWhereUniqueInput | FollowRequestWhereUniqueInput[]
    update?: FollowRequestUpdateWithWhereUniqueWithoutRequestedInput | FollowRequestUpdateWithWhereUniqueWithoutRequestedInput[]
    updateMany?: FollowRequestUpdateManyWithWhereWithoutRequestedInput | FollowRequestUpdateManyWithWhereWithoutRequestedInput[]
    deleteMany?: FollowRequestScalarWhereInput | FollowRequestScalarWhereInput[]
  }

  export type FollowRequestUncheckedUpdateManyWithoutRequesterNestedInput = {
    create?: XOR<FollowRequestCreateWithoutRequesterInput, FollowRequestUncheckedCreateWithoutRequesterInput> | FollowRequestCreateWithoutRequesterInput[] | FollowRequestUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: FollowRequestCreateOrConnectWithoutRequesterInput | FollowRequestCreateOrConnectWithoutRequesterInput[]
    upsert?: FollowRequestUpsertWithWhereUniqueWithoutRequesterInput | FollowRequestUpsertWithWhereUniqueWithoutRequesterInput[]
    createMany?: FollowRequestCreateManyRequesterInputEnvelope
    set?: FollowRequestWhereUniqueInput | FollowRequestWhereUniqueInput[]
    disconnect?: FollowRequestWhereUniqueInput | FollowRequestWhereUniqueInput[]
    delete?: FollowRequestWhereUniqueInput | FollowRequestWhereUniqueInput[]
    connect?: FollowRequestWhereUniqueInput | FollowRequestWhereUniqueInput[]
    update?: FollowRequestUpdateWithWhereUniqueWithoutRequesterInput | FollowRequestUpdateWithWhereUniqueWithoutRequesterInput[]
    updateMany?: FollowRequestUpdateManyWithWhereWithoutRequesterInput | FollowRequestUpdateManyWithWhereWithoutRequesterInput[]
    deleteMany?: FollowRequestScalarWhereInput | FollowRequestScalarWhereInput[]
  }

  export type LikeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput> | LikeCreateWithoutUserInput[] | LikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutUserInput | LikeCreateOrConnectWithoutUserInput[]
    upsert?: LikeUpsertWithWhereUniqueWithoutUserInput | LikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LikeCreateManyUserInputEnvelope
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    update?: LikeUpdateWithWhereUniqueWithoutUserInput | LikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LikeUpdateManyWithWhereWithoutUserInput | LikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[]
  }

  export type PostUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput> | PostCreateWithoutAuthorInput[] | PostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: PostCreateOrConnectWithoutAuthorInput | PostCreateOrConnectWithoutAuthorInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutAuthorInput | PostUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: PostCreateManyAuthorInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutAuthorInput | PostUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: PostUpdateManyWithWhereWithoutAuthorInput | PostUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type RankingListUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<RankingListCreateWithoutAuthorInput, RankingListUncheckedCreateWithoutAuthorInput> | RankingListCreateWithoutAuthorInput[] | RankingListUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: RankingListCreateOrConnectWithoutAuthorInput | RankingListCreateOrConnectWithoutAuthorInput[]
    upsert?: RankingListUpsertWithWhereUniqueWithoutAuthorInput | RankingListUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: RankingListCreateManyAuthorInputEnvelope
    set?: RankingListWhereUniqueInput | RankingListWhereUniqueInput[]
    disconnect?: RankingListWhereUniqueInput | RankingListWhereUniqueInput[]
    delete?: RankingListWhereUniqueInput | RankingListWhereUniqueInput[]
    connect?: RankingListWhereUniqueInput | RankingListWhereUniqueInput[]
    update?: RankingListUpdateWithWhereUniqueWithoutAuthorInput | RankingListUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: RankingListUpdateManyWithWhereWithoutAuthorInput | RankingListUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: RankingListScalarWhereInput | RankingListScalarWhereInput[]
  }

  export type ReplyUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReplyCreateWithoutUserInput, ReplyUncheckedCreateWithoutUserInput> | ReplyCreateWithoutUserInput[] | ReplyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReplyCreateOrConnectWithoutUserInput | ReplyCreateOrConnectWithoutUserInput[]
    upsert?: ReplyUpsertWithWhereUniqueWithoutUserInput | ReplyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReplyCreateManyUserInputEnvelope
    set?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
    disconnect?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
    delete?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
    connect?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
    update?: ReplyUpdateWithWhereUniqueWithoutUserInput | ReplyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReplyUpdateManyWithWhereWithoutUserInput | ReplyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReplyScalarWhereInput | ReplyScalarWhereInput[]
  }

  export type RetweetUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RetweetCreateWithoutUserInput, RetweetUncheckedCreateWithoutUserInput> | RetweetCreateWithoutUserInput[] | RetweetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RetweetCreateOrConnectWithoutUserInput | RetweetCreateOrConnectWithoutUserInput[]
    upsert?: RetweetUpsertWithWhereUniqueWithoutUserInput | RetweetUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RetweetCreateManyUserInputEnvelope
    set?: RetweetWhereUniqueInput | RetweetWhereUniqueInput[]
    disconnect?: RetweetWhereUniqueInput | RetweetWhereUniqueInput[]
    delete?: RetweetWhereUniqueInput | RetweetWhereUniqueInput[]
    connect?: RetweetWhereUniqueInput | RetweetWhereUniqueInput[]
    update?: RetweetUpdateWithWhereUniqueWithoutUserInput | RetweetUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RetweetUpdateManyWithWhereWithoutUserInput | RetweetUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RetweetScalarWhereInput | RetweetScalarWhereInput[]
  }

  export type RankingListCommentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RankingListCommentCreateWithoutUserInput, RankingListCommentUncheckedCreateWithoutUserInput> | RankingListCommentCreateWithoutUserInput[] | RankingListCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RankingListCommentCreateOrConnectWithoutUserInput | RankingListCommentCreateOrConnectWithoutUserInput[]
    upsert?: RankingListCommentUpsertWithWhereUniqueWithoutUserInput | RankingListCommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RankingListCommentCreateManyUserInputEnvelope
    set?: RankingListCommentWhereUniqueInput | RankingListCommentWhereUniqueInput[]
    disconnect?: RankingListCommentWhereUniqueInput | RankingListCommentWhereUniqueInput[]
    delete?: RankingListCommentWhereUniqueInput | RankingListCommentWhereUniqueInput[]
    connect?: RankingListCommentWhereUniqueInput | RankingListCommentWhereUniqueInput[]
    update?: RankingListCommentUpdateWithWhereUniqueWithoutUserInput | RankingListCommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RankingListCommentUpdateManyWithWhereWithoutUserInput | RankingListCommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RankingListCommentScalarWhereInput | RankingListCommentScalarWhereInput[]
  }

  export type AverageItemCommentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AverageItemCommentCreateWithoutUserInput, AverageItemCommentUncheckedCreateWithoutUserInput> | AverageItemCommentCreateWithoutUserInput[] | AverageItemCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AverageItemCommentCreateOrConnectWithoutUserInput | AverageItemCommentCreateOrConnectWithoutUserInput[]
    upsert?: AverageItemCommentUpsertWithWhereUniqueWithoutUserInput | AverageItemCommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AverageItemCommentCreateManyUserInputEnvelope
    set?: AverageItemCommentWhereUniqueInput | AverageItemCommentWhereUniqueInput[]
    disconnect?: AverageItemCommentWhereUniqueInput | AverageItemCommentWhereUniqueInput[]
    delete?: AverageItemCommentWhereUniqueInput | AverageItemCommentWhereUniqueInput[]
    connect?: AverageItemCommentWhereUniqueInput | AverageItemCommentWhereUniqueInput[]
    update?: AverageItemCommentUpdateWithWhereUniqueWithoutUserInput | AverageItemCommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AverageItemCommentUpdateManyWithWhereWithoutUserInput | AverageItemCommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AverageItemCommentScalarWhereInput | AverageItemCommentScalarWhereInput[]
  }

  export type FeedItemCreateNestedManyWithoutRankingListInput = {
    create?: XOR<FeedItemCreateWithoutRankingListInput, FeedItemUncheckedCreateWithoutRankingListInput> | FeedItemCreateWithoutRankingListInput[] | FeedItemUncheckedCreateWithoutRankingListInput[]
    connectOrCreate?: FeedItemCreateOrConnectWithoutRankingListInput | FeedItemCreateOrConnectWithoutRankingListInput[]
    createMany?: FeedItemCreateManyRankingListInputEnvelope
    connect?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
  }

  export type LikeCreateNestedManyWithoutRankingListInput = {
    create?: XOR<LikeCreateWithoutRankingListInput, LikeUncheckedCreateWithoutRankingListInput> | LikeCreateWithoutRankingListInput[] | LikeUncheckedCreateWithoutRankingListInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutRankingListInput | LikeCreateOrConnectWithoutRankingListInput[]
    createMany?: LikeCreateManyRankingListInputEnvelope
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
  }

  export type RankedItemCreateNestedManyWithoutRankingListInput = {
    create?: XOR<RankedItemCreateWithoutRankingListInput, RankedItemUncheckedCreateWithoutRankingListInput> | RankedItemCreateWithoutRankingListInput[] | RankedItemUncheckedCreateWithoutRankingListInput[]
    connectOrCreate?: RankedItemCreateOrConnectWithoutRankingListInput | RankedItemCreateOrConnectWithoutRankingListInput[]
    createMany?: RankedItemCreateManyRankingListInputEnvelope
    connect?: RankedItemWhereUniqueInput | RankedItemWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutRankingListsInput = {
    create?: XOR<UserCreateWithoutRankingListsInput, UserUncheckedCreateWithoutRankingListsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRankingListsInput
    connect?: UserWhereUniqueInput
  }

  export type RankingListTagCreateNestedManyWithoutListInput = {
    create?: XOR<RankingListTagCreateWithoutListInput, RankingListTagUncheckedCreateWithoutListInput> | RankingListTagCreateWithoutListInput[] | RankingListTagUncheckedCreateWithoutListInput[]
    connectOrCreate?: RankingListTagCreateOrConnectWithoutListInput | RankingListTagCreateOrConnectWithoutListInput[]
    createMany?: RankingListTagCreateManyListInputEnvelope
    connect?: RankingListTagWhereUniqueInput | RankingListTagWhereUniqueInput[]
  }

  export type FeedItemUncheckedCreateNestedManyWithoutRankingListInput = {
    create?: XOR<FeedItemCreateWithoutRankingListInput, FeedItemUncheckedCreateWithoutRankingListInput> | FeedItemCreateWithoutRankingListInput[] | FeedItemUncheckedCreateWithoutRankingListInput[]
    connectOrCreate?: FeedItemCreateOrConnectWithoutRankingListInput | FeedItemCreateOrConnectWithoutRankingListInput[]
    createMany?: FeedItemCreateManyRankingListInputEnvelope
    connect?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
  }

  export type LikeUncheckedCreateNestedManyWithoutRankingListInput = {
    create?: XOR<LikeCreateWithoutRankingListInput, LikeUncheckedCreateWithoutRankingListInput> | LikeCreateWithoutRankingListInput[] | LikeUncheckedCreateWithoutRankingListInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutRankingListInput | LikeCreateOrConnectWithoutRankingListInput[]
    createMany?: LikeCreateManyRankingListInputEnvelope
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
  }

  export type RankedItemUncheckedCreateNestedManyWithoutRankingListInput = {
    create?: XOR<RankedItemCreateWithoutRankingListInput, RankedItemUncheckedCreateWithoutRankingListInput> | RankedItemCreateWithoutRankingListInput[] | RankedItemUncheckedCreateWithoutRankingListInput[]
    connectOrCreate?: RankedItemCreateOrConnectWithoutRankingListInput | RankedItemCreateOrConnectWithoutRankingListInput[]
    createMany?: RankedItemCreateManyRankingListInputEnvelope
    connect?: RankedItemWhereUniqueInput | RankedItemWhereUniqueInput[]
  }

  export type RankingListTagUncheckedCreateNestedManyWithoutListInput = {
    create?: XOR<RankingListTagCreateWithoutListInput, RankingListTagUncheckedCreateWithoutListInput> | RankingListTagCreateWithoutListInput[] | RankingListTagUncheckedCreateWithoutListInput[]
    connectOrCreate?: RankingListTagCreateOrConnectWithoutListInput | RankingListTagCreateOrConnectWithoutListInput[]
    createMany?: RankingListTagCreateManyListInputEnvelope
    connect?: RankingListTagWhereUniqueInput | RankingListTagWhereUniqueInput[]
  }

  export type EnumListStatusFieldUpdateOperationsInput = {
    set?: $Enums.ListStatus
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FeedItemUpdateManyWithoutRankingListNestedInput = {
    create?: XOR<FeedItemCreateWithoutRankingListInput, FeedItemUncheckedCreateWithoutRankingListInput> | FeedItemCreateWithoutRankingListInput[] | FeedItemUncheckedCreateWithoutRankingListInput[]
    connectOrCreate?: FeedItemCreateOrConnectWithoutRankingListInput | FeedItemCreateOrConnectWithoutRankingListInput[]
    upsert?: FeedItemUpsertWithWhereUniqueWithoutRankingListInput | FeedItemUpsertWithWhereUniqueWithoutRankingListInput[]
    createMany?: FeedItemCreateManyRankingListInputEnvelope
    set?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    disconnect?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    delete?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    connect?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    update?: FeedItemUpdateWithWhereUniqueWithoutRankingListInput | FeedItemUpdateWithWhereUniqueWithoutRankingListInput[]
    updateMany?: FeedItemUpdateManyWithWhereWithoutRankingListInput | FeedItemUpdateManyWithWhereWithoutRankingListInput[]
    deleteMany?: FeedItemScalarWhereInput | FeedItemScalarWhereInput[]
  }

  export type LikeUpdateManyWithoutRankingListNestedInput = {
    create?: XOR<LikeCreateWithoutRankingListInput, LikeUncheckedCreateWithoutRankingListInput> | LikeCreateWithoutRankingListInput[] | LikeUncheckedCreateWithoutRankingListInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutRankingListInput | LikeCreateOrConnectWithoutRankingListInput[]
    upsert?: LikeUpsertWithWhereUniqueWithoutRankingListInput | LikeUpsertWithWhereUniqueWithoutRankingListInput[]
    createMany?: LikeCreateManyRankingListInputEnvelope
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    update?: LikeUpdateWithWhereUniqueWithoutRankingListInput | LikeUpdateWithWhereUniqueWithoutRankingListInput[]
    updateMany?: LikeUpdateManyWithWhereWithoutRankingListInput | LikeUpdateManyWithWhereWithoutRankingListInput[]
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[]
  }

  export type RankedItemUpdateManyWithoutRankingListNestedInput = {
    create?: XOR<RankedItemCreateWithoutRankingListInput, RankedItemUncheckedCreateWithoutRankingListInput> | RankedItemCreateWithoutRankingListInput[] | RankedItemUncheckedCreateWithoutRankingListInput[]
    connectOrCreate?: RankedItemCreateOrConnectWithoutRankingListInput | RankedItemCreateOrConnectWithoutRankingListInput[]
    upsert?: RankedItemUpsertWithWhereUniqueWithoutRankingListInput | RankedItemUpsertWithWhereUniqueWithoutRankingListInput[]
    createMany?: RankedItemCreateManyRankingListInputEnvelope
    set?: RankedItemWhereUniqueInput | RankedItemWhereUniqueInput[]
    disconnect?: RankedItemWhereUniqueInput | RankedItemWhereUniqueInput[]
    delete?: RankedItemWhereUniqueInput | RankedItemWhereUniqueInput[]
    connect?: RankedItemWhereUniqueInput | RankedItemWhereUniqueInput[]
    update?: RankedItemUpdateWithWhereUniqueWithoutRankingListInput | RankedItemUpdateWithWhereUniqueWithoutRankingListInput[]
    updateMany?: RankedItemUpdateManyWithWhereWithoutRankingListInput | RankedItemUpdateManyWithWhereWithoutRankingListInput[]
    deleteMany?: RankedItemScalarWhereInput | RankedItemScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutRankingListsNestedInput = {
    create?: XOR<UserCreateWithoutRankingListsInput, UserUncheckedCreateWithoutRankingListsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRankingListsInput
    upsert?: UserUpsertWithoutRankingListsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRankingListsInput, UserUpdateWithoutRankingListsInput>, UserUncheckedUpdateWithoutRankingListsInput>
  }

  export type RankingListTagUpdateManyWithoutListNestedInput = {
    create?: XOR<RankingListTagCreateWithoutListInput, RankingListTagUncheckedCreateWithoutListInput> | RankingListTagCreateWithoutListInput[] | RankingListTagUncheckedCreateWithoutListInput[]
    connectOrCreate?: RankingListTagCreateOrConnectWithoutListInput | RankingListTagCreateOrConnectWithoutListInput[]
    upsert?: RankingListTagUpsertWithWhereUniqueWithoutListInput | RankingListTagUpsertWithWhereUniqueWithoutListInput[]
    createMany?: RankingListTagCreateManyListInputEnvelope
    set?: RankingListTagWhereUniqueInput | RankingListTagWhereUniqueInput[]
    disconnect?: RankingListTagWhereUniqueInput | RankingListTagWhereUniqueInput[]
    delete?: RankingListTagWhereUniqueInput | RankingListTagWhereUniqueInput[]
    connect?: RankingListTagWhereUniqueInput | RankingListTagWhereUniqueInput[]
    update?: RankingListTagUpdateWithWhereUniqueWithoutListInput | RankingListTagUpdateWithWhereUniqueWithoutListInput[]
    updateMany?: RankingListTagUpdateManyWithWhereWithoutListInput | RankingListTagUpdateManyWithWhereWithoutListInput[]
    deleteMany?: RankingListTagScalarWhereInput | RankingListTagScalarWhereInput[]
  }

  export type FeedItemUncheckedUpdateManyWithoutRankingListNestedInput = {
    create?: XOR<FeedItemCreateWithoutRankingListInput, FeedItemUncheckedCreateWithoutRankingListInput> | FeedItemCreateWithoutRankingListInput[] | FeedItemUncheckedCreateWithoutRankingListInput[]
    connectOrCreate?: FeedItemCreateOrConnectWithoutRankingListInput | FeedItemCreateOrConnectWithoutRankingListInput[]
    upsert?: FeedItemUpsertWithWhereUniqueWithoutRankingListInput | FeedItemUpsertWithWhereUniqueWithoutRankingListInput[]
    createMany?: FeedItemCreateManyRankingListInputEnvelope
    set?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    disconnect?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    delete?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    connect?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    update?: FeedItemUpdateWithWhereUniqueWithoutRankingListInput | FeedItemUpdateWithWhereUniqueWithoutRankingListInput[]
    updateMany?: FeedItemUpdateManyWithWhereWithoutRankingListInput | FeedItemUpdateManyWithWhereWithoutRankingListInput[]
    deleteMany?: FeedItemScalarWhereInput | FeedItemScalarWhereInput[]
  }

  export type LikeUncheckedUpdateManyWithoutRankingListNestedInput = {
    create?: XOR<LikeCreateWithoutRankingListInput, LikeUncheckedCreateWithoutRankingListInput> | LikeCreateWithoutRankingListInput[] | LikeUncheckedCreateWithoutRankingListInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutRankingListInput | LikeCreateOrConnectWithoutRankingListInput[]
    upsert?: LikeUpsertWithWhereUniqueWithoutRankingListInput | LikeUpsertWithWhereUniqueWithoutRankingListInput[]
    createMany?: LikeCreateManyRankingListInputEnvelope
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    update?: LikeUpdateWithWhereUniqueWithoutRankingListInput | LikeUpdateWithWhereUniqueWithoutRankingListInput[]
    updateMany?: LikeUpdateManyWithWhereWithoutRankingListInput | LikeUpdateManyWithWhereWithoutRankingListInput[]
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[]
  }

  export type RankedItemUncheckedUpdateManyWithoutRankingListNestedInput = {
    create?: XOR<RankedItemCreateWithoutRankingListInput, RankedItemUncheckedCreateWithoutRankingListInput> | RankedItemCreateWithoutRankingListInput[] | RankedItemUncheckedCreateWithoutRankingListInput[]
    connectOrCreate?: RankedItemCreateOrConnectWithoutRankingListInput | RankedItemCreateOrConnectWithoutRankingListInput[]
    upsert?: RankedItemUpsertWithWhereUniqueWithoutRankingListInput | RankedItemUpsertWithWhereUniqueWithoutRankingListInput[]
    createMany?: RankedItemCreateManyRankingListInputEnvelope
    set?: RankedItemWhereUniqueInput | RankedItemWhereUniqueInput[]
    disconnect?: RankedItemWhereUniqueInput | RankedItemWhereUniqueInput[]
    delete?: RankedItemWhereUniqueInput | RankedItemWhereUniqueInput[]
    connect?: RankedItemWhereUniqueInput | RankedItemWhereUniqueInput[]
    update?: RankedItemUpdateWithWhereUniqueWithoutRankingListInput | RankedItemUpdateWithWhereUniqueWithoutRankingListInput[]
    updateMany?: RankedItemUpdateManyWithWhereWithoutRankingListInput | RankedItemUpdateManyWithWhereWithoutRankingListInput[]
    deleteMany?: RankedItemScalarWhereInput | RankedItemScalarWhereInput[]
  }

  export type RankingListTagUncheckedUpdateManyWithoutListNestedInput = {
    create?: XOR<RankingListTagCreateWithoutListInput, RankingListTagUncheckedCreateWithoutListInput> | RankingListTagCreateWithoutListInput[] | RankingListTagUncheckedCreateWithoutListInput[]
    connectOrCreate?: RankingListTagCreateOrConnectWithoutListInput | RankingListTagCreateOrConnectWithoutListInput[]
    upsert?: RankingListTagUpsertWithWhereUniqueWithoutListInput | RankingListTagUpsertWithWhereUniqueWithoutListInput[]
    createMany?: RankingListTagCreateManyListInputEnvelope
    set?: RankingListTagWhereUniqueInput | RankingListTagWhereUniqueInput[]
    disconnect?: RankingListTagWhereUniqueInput | RankingListTagWhereUniqueInput[]
    delete?: RankingListTagWhereUniqueInput | RankingListTagWhereUniqueInput[]
    connect?: RankingListTagWhereUniqueInput | RankingListTagWhereUniqueInput[]
    update?: RankingListTagUpdateWithWhereUniqueWithoutListInput | RankingListTagUpdateWithWhereUniqueWithoutListInput[]
    updateMany?: RankingListTagUpdateManyWithWhereWithoutListInput | RankingListTagUpdateManyWithWhereWithoutListInput[]
    deleteMany?: RankingListTagScalarWhereInput | RankingListTagScalarWhereInput[]
  }

  export type RankingListCreateNestedOneWithoutItemsInput = {
    create?: XOR<RankingListCreateWithoutItemsInput, RankingListUncheckedCreateWithoutItemsInput>
    connectOrCreate?: RankingListCreateOrConnectWithoutItemsInput
    connect?: RankingListWhereUniqueInput
  }

  export type RankingListUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<RankingListCreateWithoutItemsInput, RankingListUncheckedCreateWithoutItemsInput>
    connectOrCreate?: RankingListCreateOrConnectWithoutItemsInput
    upsert?: RankingListUpsertWithoutItemsInput
    connect?: RankingListWhereUniqueInput
    update?: XOR<XOR<RankingListUpdateToOneWithWhereWithoutItemsInput, RankingListUpdateWithoutItemsInput>, RankingListUncheckedUpdateWithoutItemsInput>
  }

  export type RankingListCreateNestedOneWithoutRankingListTagsInput = {
    create?: XOR<RankingListCreateWithoutRankingListTagsInput, RankingListUncheckedCreateWithoutRankingListTagsInput>
    connectOrCreate?: RankingListCreateOrConnectWithoutRankingListTagsInput
    connect?: RankingListWhereUniqueInput
  }

  export type TagCreateNestedOneWithoutRankingListTagsInput = {
    create?: XOR<TagCreateWithoutRankingListTagsInput, TagUncheckedCreateWithoutRankingListTagsInput>
    connectOrCreate?: TagCreateOrConnectWithoutRankingListTagsInput
    connect?: TagWhereUniqueInput
  }

  export type RankingListUpdateOneRequiredWithoutRankingListTagsNestedInput = {
    create?: XOR<RankingListCreateWithoutRankingListTagsInput, RankingListUncheckedCreateWithoutRankingListTagsInput>
    connectOrCreate?: RankingListCreateOrConnectWithoutRankingListTagsInput
    upsert?: RankingListUpsertWithoutRankingListTagsInput
    connect?: RankingListWhereUniqueInput
    update?: XOR<XOR<RankingListUpdateToOneWithWhereWithoutRankingListTagsInput, RankingListUpdateWithoutRankingListTagsInput>, RankingListUncheckedUpdateWithoutRankingListTagsInput>
  }

  export type TagUpdateOneRequiredWithoutRankingListTagsNestedInput = {
    create?: XOR<TagCreateWithoutRankingListTagsInput, TagUncheckedCreateWithoutRankingListTagsInput>
    connectOrCreate?: TagCreateOrConnectWithoutRankingListTagsInput
    upsert?: TagUpsertWithoutRankingListTagsInput
    connect?: TagWhereUniqueInput
    update?: XOR<XOR<TagUpdateToOneWithWhereWithoutRankingListTagsInput, TagUpdateWithoutRankingListTagsInput>, TagUncheckedUpdateWithoutRankingListTagsInput>
  }

  export type UserCreateNestedOneWithoutRankingListCommentsInput = {
    create?: XOR<UserCreateWithoutRankingListCommentsInput, UserUncheckedCreateWithoutRankingListCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRankingListCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRankingListCommentsNestedInput = {
    create?: XOR<UserCreateWithoutRankingListCommentsInput, UserUncheckedCreateWithoutRankingListCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRankingListCommentsInput
    upsert?: UserUpsertWithoutRankingListCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRankingListCommentsInput, UserUpdateWithoutRankingListCommentsInput>, UserUncheckedUpdateWithoutRankingListCommentsInput>
  }

  export type EnumTrendPeriodFieldUpdateOperationsInput = {
    set?: $Enums.TrendPeriod
  }

  export type TagCreateNestedOneWithoutTrendingStatsInput = {
    create?: XOR<TagCreateWithoutTrendingStatsInput, TagUncheckedCreateWithoutTrendingStatsInput>
    connectOrCreate?: TagCreateOrConnectWithoutTrendingStatsInput
    connect?: TagWhereUniqueInput
  }

  export type TagUpdateOneRequiredWithoutTrendingStatsNestedInput = {
    create?: XOR<TagCreateWithoutTrendingStatsInput, TagUncheckedCreateWithoutTrendingStatsInput>
    connectOrCreate?: TagCreateOrConnectWithoutTrendingStatsInput
    upsert?: TagUpsertWithoutTrendingStatsInput
    connect?: TagWhereUniqueInput
    update?: XOR<XOR<TagUpdateToOneWithWhereWithoutTrendingStatsInput, TagUpdateWithoutTrendingStatsInput>, TagUncheckedUpdateWithoutTrendingStatsInput>
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserCreateNestedOneWithoutAverageItemCommentsInput = {
    create?: XOR<UserCreateWithoutAverageItemCommentsInput, UserUncheckedCreateWithoutAverageItemCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAverageItemCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAverageItemCommentsNestedInput = {
    create?: XOR<UserCreateWithoutAverageItemCommentsInput, UserUncheckedCreateWithoutAverageItemCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAverageItemCommentsInput
    upsert?: UserUpsertWithoutAverageItemCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAverageItemCommentsInput, UserUpdateWithoutAverageItemCommentsInput>, UserUncheckedUpdateWithoutAverageItemCommentsInput>
  }

  export type FeedItemCreateNestedManyWithoutPostInput = {
    create?: XOR<FeedItemCreateWithoutPostInput, FeedItemUncheckedCreateWithoutPostInput> | FeedItemCreateWithoutPostInput[] | FeedItemUncheckedCreateWithoutPostInput[]
    connectOrCreate?: FeedItemCreateOrConnectWithoutPostInput | FeedItemCreateOrConnectWithoutPostInput[]
    createMany?: FeedItemCreateManyPostInputEnvelope
    connect?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
  }

  export type LikeCreateNestedManyWithoutPostInput = {
    create?: XOR<LikeCreateWithoutPostInput, LikeUncheckedCreateWithoutPostInput> | LikeCreateWithoutPostInput[] | LikeUncheckedCreateWithoutPostInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutPostInput | LikeCreateOrConnectWithoutPostInput[]
    createMany?: LikeCreateManyPostInputEnvelope
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutPostsInput = {
    create?: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostsInput
    connect?: UserWhereUniqueInput
  }

  export type ReplyCreateNestedManyWithoutPostInput = {
    create?: XOR<ReplyCreateWithoutPostInput, ReplyUncheckedCreateWithoutPostInput> | ReplyCreateWithoutPostInput[] | ReplyUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ReplyCreateOrConnectWithoutPostInput | ReplyCreateOrConnectWithoutPostInput[]
    createMany?: ReplyCreateManyPostInputEnvelope
    connect?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
  }

  export type FeedItemUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<FeedItemCreateWithoutPostInput, FeedItemUncheckedCreateWithoutPostInput> | FeedItemCreateWithoutPostInput[] | FeedItemUncheckedCreateWithoutPostInput[]
    connectOrCreate?: FeedItemCreateOrConnectWithoutPostInput | FeedItemCreateOrConnectWithoutPostInput[]
    createMany?: FeedItemCreateManyPostInputEnvelope
    connect?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
  }

  export type LikeUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<LikeCreateWithoutPostInput, LikeUncheckedCreateWithoutPostInput> | LikeCreateWithoutPostInput[] | LikeUncheckedCreateWithoutPostInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutPostInput | LikeCreateOrConnectWithoutPostInput[]
    createMany?: LikeCreateManyPostInputEnvelope
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
  }

  export type ReplyUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<ReplyCreateWithoutPostInput, ReplyUncheckedCreateWithoutPostInput> | ReplyCreateWithoutPostInput[] | ReplyUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ReplyCreateOrConnectWithoutPostInput | ReplyCreateOrConnectWithoutPostInput[]
    createMany?: ReplyCreateManyPostInputEnvelope
    connect?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
  }

  export type FeedItemUpdateManyWithoutPostNestedInput = {
    create?: XOR<FeedItemCreateWithoutPostInput, FeedItemUncheckedCreateWithoutPostInput> | FeedItemCreateWithoutPostInput[] | FeedItemUncheckedCreateWithoutPostInput[]
    connectOrCreate?: FeedItemCreateOrConnectWithoutPostInput | FeedItemCreateOrConnectWithoutPostInput[]
    upsert?: FeedItemUpsertWithWhereUniqueWithoutPostInput | FeedItemUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: FeedItemCreateManyPostInputEnvelope
    set?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    disconnect?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    delete?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    connect?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    update?: FeedItemUpdateWithWhereUniqueWithoutPostInput | FeedItemUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: FeedItemUpdateManyWithWhereWithoutPostInput | FeedItemUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: FeedItemScalarWhereInput | FeedItemScalarWhereInput[]
  }

  export type LikeUpdateManyWithoutPostNestedInput = {
    create?: XOR<LikeCreateWithoutPostInput, LikeUncheckedCreateWithoutPostInput> | LikeCreateWithoutPostInput[] | LikeUncheckedCreateWithoutPostInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutPostInput | LikeCreateOrConnectWithoutPostInput[]
    upsert?: LikeUpsertWithWhereUniqueWithoutPostInput | LikeUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: LikeCreateManyPostInputEnvelope
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    update?: LikeUpdateWithWhereUniqueWithoutPostInput | LikeUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: LikeUpdateManyWithWhereWithoutPostInput | LikeUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostsInput
    upsert?: UserUpsertWithoutPostsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPostsInput, UserUpdateWithoutPostsInput>, UserUncheckedUpdateWithoutPostsInput>
  }

  export type ReplyUpdateManyWithoutPostNestedInput = {
    create?: XOR<ReplyCreateWithoutPostInput, ReplyUncheckedCreateWithoutPostInput> | ReplyCreateWithoutPostInput[] | ReplyUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ReplyCreateOrConnectWithoutPostInput | ReplyCreateOrConnectWithoutPostInput[]
    upsert?: ReplyUpsertWithWhereUniqueWithoutPostInput | ReplyUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: ReplyCreateManyPostInputEnvelope
    set?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
    disconnect?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
    delete?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
    connect?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
    update?: ReplyUpdateWithWhereUniqueWithoutPostInput | ReplyUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: ReplyUpdateManyWithWhereWithoutPostInput | ReplyUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: ReplyScalarWhereInput | ReplyScalarWhereInput[]
  }

  export type FeedItemUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<FeedItemCreateWithoutPostInput, FeedItemUncheckedCreateWithoutPostInput> | FeedItemCreateWithoutPostInput[] | FeedItemUncheckedCreateWithoutPostInput[]
    connectOrCreate?: FeedItemCreateOrConnectWithoutPostInput | FeedItemCreateOrConnectWithoutPostInput[]
    upsert?: FeedItemUpsertWithWhereUniqueWithoutPostInput | FeedItemUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: FeedItemCreateManyPostInputEnvelope
    set?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    disconnect?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    delete?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    connect?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    update?: FeedItemUpdateWithWhereUniqueWithoutPostInput | FeedItemUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: FeedItemUpdateManyWithWhereWithoutPostInput | FeedItemUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: FeedItemScalarWhereInput | FeedItemScalarWhereInput[]
  }

  export type LikeUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<LikeCreateWithoutPostInput, LikeUncheckedCreateWithoutPostInput> | LikeCreateWithoutPostInput[] | LikeUncheckedCreateWithoutPostInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutPostInput | LikeCreateOrConnectWithoutPostInput[]
    upsert?: LikeUpsertWithWhereUniqueWithoutPostInput | LikeUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: LikeCreateManyPostInputEnvelope
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    update?: LikeUpdateWithWhereUniqueWithoutPostInput | LikeUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: LikeUpdateManyWithWhereWithoutPostInput | LikeUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[]
  }

  export type ReplyUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<ReplyCreateWithoutPostInput, ReplyUncheckedCreateWithoutPostInput> | ReplyCreateWithoutPostInput[] | ReplyUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ReplyCreateOrConnectWithoutPostInput | ReplyCreateOrConnectWithoutPostInput[]
    upsert?: ReplyUpsertWithWhereUniqueWithoutPostInput | ReplyUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: ReplyCreateManyPostInputEnvelope
    set?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
    disconnect?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
    delete?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
    connect?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
    update?: ReplyUpdateWithWhereUniqueWithoutPostInput | ReplyUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: ReplyUpdateManyWithWhereWithoutPostInput | ReplyUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: ReplyScalarWhereInput | ReplyScalarWhereInput[]
  }

  export type FeedItemCreateNestedOneWithoutRetweetsInput = {
    create?: XOR<FeedItemCreateWithoutRetweetsInput, FeedItemUncheckedCreateWithoutRetweetsInput>
    connectOrCreate?: FeedItemCreateOrConnectWithoutRetweetsInput
    connect?: FeedItemWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutRetweetsInput = {
    create?: XOR<UserCreateWithoutRetweetsInput, UserUncheckedCreateWithoutRetweetsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRetweetsInput
    connect?: UserWhereUniqueInput
  }

  export type FeedItemUpdateOneRequiredWithoutRetweetsNestedInput = {
    create?: XOR<FeedItemCreateWithoutRetweetsInput, FeedItemUncheckedCreateWithoutRetweetsInput>
    connectOrCreate?: FeedItemCreateOrConnectWithoutRetweetsInput
    upsert?: FeedItemUpsertWithoutRetweetsInput
    connect?: FeedItemWhereUniqueInput
    update?: XOR<XOR<FeedItemUpdateToOneWithWhereWithoutRetweetsInput, FeedItemUpdateWithoutRetweetsInput>, FeedItemUncheckedUpdateWithoutRetweetsInput>
  }

  export type UserUpdateOneRequiredWithoutRetweetsNestedInput = {
    create?: XOR<UserCreateWithoutRetweetsInput, UserUncheckedCreateWithoutRetweetsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRetweetsInput
    upsert?: UserUpsertWithoutRetweetsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRetweetsInput, UserUpdateWithoutRetweetsInput>, UserUncheckedUpdateWithoutRetweetsInput>
  }

  export type PostCreateNestedOneWithoutFeedItemsInput = {
    create?: XOR<PostCreateWithoutFeedItemsInput, PostUncheckedCreateWithoutFeedItemsInput>
    connectOrCreate?: PostCreateOrConnectWithoutFeedItemsInput
    connect?: PostWhereUniqueInput
  }

  export type RankingListCreateNestedOneWithoutFeedItemsInput = {
    create?: XOR<RankingListCreateWithoutFeedItemsInput, RankingListUncheckedCreateWithoutFeedItemsInput>
    connectOrCreate?: RankingListCreateOrConnectWithoutFeedItemsInput
    connect?: RankingListWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutFeedItemsInput = {
    create?: XOR<UserCreateWithoutFeedItemsInput, UserUncheckedCreateWithoutFeedItemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedItemsInput
    connect?: UserWhereUniqueInput
  }

  export type FeedItemCreateNestedOneWithoutQuotedByItemsInput = {
    create?: XOR<FeedItemCreateWithoutQuotedByItemsInput, FeedItemUncheckedCreateWithoutQuotedByItemsInput>
    connectOrCreate?: FeedItemCreateOrConnectWithoutQuotedByItemsInput
    connect?: FeedItemWhereUniqueInput
  }

  export type FeedItemCreateNestedManyWithoutQuotedFeedItemInput = {
    create?: XOR<FeedItemCreateWithoutQuotedFeedItemInput, FeedItemUncheckedCreateWithoutQuotedFeedItemInput> | FeedItemCreateWithoutQuotedFeedItemInput[] | FeedItemUncheckedCreateWithoutQuotedFeedItemInput[]
    connectOrCreate?: FeedItemCreateOrConnectWithoutQuotedFeedItemInput | FeedItemCreateOrConnectWithoutQuotedFeedItemInput[]
    createMany?: FeedItemCreateManyQuotedFeedItemInputEnvelope
    connect?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
  }

  export type FeedItemCreateNestedOneWithoutRetweetedByItemsInput = {
    create?: XOR<FeedItemCreateWithoutRetweetedByItemsInput, FeedItemUncheckedCreateWithoutRetweetedByItemsInput>
    connectOrCreate?: FeedItemCreateOrConnectWithoutRetweetedByItemsInput
    connect?: FeedItemWhereUniqueInput
  }

  export type FeedItemCreateNestedManyWithoutRetweetOfFeedItemInput = {
    create?: XOR<FeedItemCreateWithoutRetweetOfFeedItemInput, FeedItemUncheckedCreateWithoutRetweetOfFeedItemInput> | FeedItemCreateWithoutRetweetOfFeedItemInput[] | FeedItemUncheckedCreateWithoutRetweetOfFeedItemInput[]
    connectOrCreate?: FeedItemCreateOrConnectWithoutRetweetOfFeedItemInput | FeedItemCreateOrConnectWithoutRetweetOfFeedItemInput[]
    createMany?: FeedItemCreateManyRetweetOfFeedItemInputEnvelope
    connect?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
  }

  export type RetweetCreateNestedManyWithoutFeedItemInput = {
    create?: XOR<RetweetCreateWithoutFeedItemInput, RetweetUncheckedCreateWithoutFeedItemInput> | RetweetCreateWithoutFeedItemInput[] | RetweetUncheckedCreateWithoutFeedItemInput[]
    connectOrCreate?: RetweetCreateOrConnectWithoutFeedItemInput | RetweetCreateOrConnectWithoutFeedItemInput[]
    createMany?: RetweetCreateManyFeedItemInputEnvelope
    connect?: RetweetWhereUniqueInput | RetweetWhereUniqueInput[]
  }

  export type FeedItemUncheckedCreateNestedManyWithoutQuotedFeedItemInput = {
    create?: XOR<FeedItemCreateWithoutQuotedFeedItemInput, FeedItemUncheckedCreateWithoutQuotedFeedItemInput> | FeedItemCreateWithoutQuotedFeedItemInput[] | FeedItemUncheckedCreateWithoutQuotedFeedItemInput[]
    connectOrCreate?: FeedItemCreateOrConnectWithoutQuotedFeedItemInput | FeedItemCreateOrConnectWithoutQuotedFeedItemInput[]
    createMany?: FeedItemCreateManyQuotedFeedItemInputEnvelope
    connect?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
  }

  export type FeedItemUncheckedCreateNestedManyWithoutRetweetOfFeedItemInput = {
    create?: XOR<FeedItemCreateWithoutRetweetOfFeedItemInput, FeedItemUncheckedCreateWithoutRetweetOfFeedItemInput> | FeedItemCreateWithoutRetweetOfFeedItemInput[] | FeedItemUncheckedCreateWithoutRetweetOfFeedItemInput[]
    connectOrCreate?: FeedItemCreateOrConnectWithoutRetweetOfFeedItemInput | FeedItemCreateOrConnectWithoutRetweetOfFeedItemInput[]
    createMany?: FeedItemCreateManyRetweetOfFeedItemInputEnvelope
    connect?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
  }

  export type RetweetUncheckedCreateNestedManyWithoutFeedItemInput = {
    create?: XOR<RetweetCreateWithoutFeedItemInput, RetweetUncheckedCreateWithoutFeedItemInput> | RetweetCreateWithoutFeedItemInput[] | RetweetUncheckedCreateWithoutFeedItemInput[]
    connectOrCreate?: RetweetCreateOrConnectWithoutFeedItemInput | RetweetCreateOrConnectWithoutFeedItemInput[]
    createMany?: RetweetCreateManyFeedItemInputEnvelope
    connect?: RetweetWhereUniqueInput | RetweetWhereUniqueInput[]
  }

  export type EnumFeedTypeFieldUpdateOperationsInput = {
    set?: $Enums.FeedType
  }

  export type PostUpdateOneWithoutFeedItemsNestedInput = {
    create?: XOR<PostCreateWithoutFeedItemsInput, PostUncheckedCreateWithoutFeedItemsInput>
    connectOrCreate?: PostCreateOrConnectWithoutFeedItemsInput
    upsert?: PostUpsertWithoutFeedItemsInput
    disconnect?: PostWhereInput | boolean
    delete?: PostWhereInput | boolean
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutFeedItemsInput, PostUpdateWithoutFeedItemsInput>, PostUncheckedUpdateWithoutFeedItemsInput>
  }

  export type RankingListUpdateOneWithoutFeedItemsNestedInput = {
    create?: XOR<RankingListCreateWithoutFeedItemsInput, RankingListUncheckedCreateWithoutFeedItemsInput>
    connectOrCreate?: RankingListCreateOrConnectWithoutFeedItemsInput
    upsert?: RankingListUpsertWithoutFeedItemsInput
    disconnect?: RankingListWhereInput | boolean
    delete?: RankingListWhereInput | boolean
    connect?: RankingListWhereUniqueInput
    update?: XOR<XOR<RankingListUpdateToOneWithWhereWithoutFeedItemsInput, RankingListUpdateWithoutFeedItemsInput>, RankingListUncheckedUpdateWithoutFeedItemsInput>
  }

  export type UserUpdateOneRequiredWithoutFeedItemsNestedInput = {
    create?: XOR<UserCreateWithoutFeedItemsInput, UserUncheckedCreateWithoutFeedItemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedItemsInput
    upsert?: UserUpsertWithoutFeedItemsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFeedItemsInput, UserUpdateWithoutFeedItemsInput>, UserUncheckedUpdateWithoutFeedItemsInput>
  }

  export type FeedItemUpdateOneWithoutQuotedByItemsNestedInput = {
    create?: XOR<FeedItemCreateWithoutQuotedByItemsInput, FeedItemUncheckedCreateWithoutQuotedByItemsInput>
    connectOrCreate?: FeedItemCreateOrConnectWithoutQuotedByItemsInput
    upsert?: FeedItemUpsertWithoutQuotedByItemsInput
    disconnect?: FeedItemWhereInput | boolean
    delete?: FeedItemWhereInput | boolean
    connect?: FeedItemWhereUniqueInput
    update?: XOR<XOR<FeedItemUpdateToOneWithWhereWithoutQuotedByItemsInput, FeedItemUpdateWithoutQuotedByItemsInput>, FeedItemUncheckedUpdateWithoutQuotedByItemsInput>
  }

  export type FeedItemUpdateManyWithoutQuotedFeedItemNestedInput = {
    create?: XOR<FeedItemCreateWithoutQuotedFeedItemInput, FeedItemUncheckedCreateWithoutQuotedFeedItemInput> | FeedItemCreateWithoutQuotedFeedItemInput[] | FeedItemUncheckedCreateWithoutQuotedFeedItemInput[]
    connectOrCreate?: FeedItemCreateOrConnectWithoutQuotedFeedItemInput | FeedItemCreateOrConnectWithoutQuotedFeedItemInput[]
    upsert?: FeedItemUpsertWithWhereUniqueWithoutQuotedFeedItemInput | FeedItemUpsertWithWhereUniqueWithoutQuotedFeedItemInput[]
    createMany?: FeedItemCreateManyQuotedFeedItemInputEnvelope
    set?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    disconnect?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    delete?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    connect?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    update?: FeedItemUpdateWithWhereUniqueWithoutQuotedFeedItemInput | FeedItemUpdateWithWhereUniqueWithoutQuotedFeedItemInput[]
    updateMany?: FeedItemUpdateManyWithWhereWithoutQuotedFeedItemInput | FeedItemUpdateManyWithWhereWithoutQuotedFeedItemInput[]
    deleteMany?: FeedItemScalarWhereInput | FeedItemScalarWhereInput[]
  }

  export type FeedItemUpdateOneWithoutRetweetedByItemsNestedInput = {
    create?: XOR<FeedItemCreateWithoutRetweetedByItemsInput, FeedItemUncheckedCreateWithoutRetweetedByItemsInput>
    connectOrCreate?: FeedItemCreateOrConnectWithoutRetweetedByItemsInput
    upsert?: FeedItemUpsertWithoutRetweetedByItemsInput
    disconnect?: FeedItemWhereInput | boolean
    delete?: FeedItemWhereInput | boolean
    connect?: FeedItemWhereUniqueInput
    update?: XOR<XOR<FeedItemUpdateToOneWithWhereWithoutRetweetedByItemsInput, FeedItemUpdateWithoutRetweetedByItemsInput>, FeedItemUncheckedUpdateWithoutRetweetedByItemsInput>
  }

  export type FeedItemUpdateManyWithoutRetweetOfFeedItemNestedInput = {
    create?: XOR<FeedItemCreateWithoutRetweetOfFeedItemInput, FeedItemUncheckedCreateWithoutRetweetOfFeedItemInput> | FeedItemCreateWithoutRetweetOfFeedItemInput[] | FeedItemUncheckedCreateWithoutRetweetOfFeedItemInput[]
    connectOrCreate?: FeedItemCreateOrConnectWithoutRetweetOfFeedItemInput | FeedItemCreateOrConnectWithoutRetweetOfFeedItemInput[]
    upsert?: FeedItemUpsertWithWhereUniqueWithoutRetweetOfFeedItemInput | FeedItemUpsertWithWhereUniqueWithoutRetweetOfFeedItemInput[]
    createMany?: FeedItemCreateManyRetweetOfFeedItemInputEnvelope
    set?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    disconnect?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    delete?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    connect?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    update?: FeedItemUpdateWithWhereUniqueWithoutRetweetOfFeedItemInput | FeedItemUpdateWithWhereUniqueWithoutRetweetOfFeedItemInput[]
    updateMany?: FeedItemUpdateManyWithWhereWithoutRetweetOfFeedItemInput | FeedItemUpdateManyWithWhereWithoutRetweetOfFeedItemInput[]
    deleteMany?: FeedItemScalarWhereInput | FeedItemScalarWhereInput[]
  }

  export type RetweetUpdateManyWithoutFeedItemNestedInput = {
    create?: XOR<RetweetCreateWithoutFeedItemInput, RetweetUncheckedCreateWithoutFeedItemInput> | RetweetCreateWithoutFeedItemInput[] | RetweetUncheckedCreateWithoutFeedItemInput[]
    connectOrCreate?: RetweetCreateOrConnectWithoutFeedItemInput | RetweetCreateOrConnectWithoutFeedItemInput[]
    upsert?: RetweetUpsertWithWhereUniqueWithoutFeedItemInput | RetweetUpsertWithWhereUniqueWithoutFeedItemInput[]
    createMany?: RetweetCreateManyFeedItemInputEnvelope
    set?: RetweetWhereUniqueInput | RetweetWhereUniqueInput[]
    disconnect?: RetweetWhereUniqueInput | RetweetWhereUniqueInput[]
    delete?: RetweetWhereUniqueInput | RetweetWhereUniqueInput[]
    connect?: RetweetWhereUniqueInput | RetweetWhereUniqueInput[]
    update?: RetweetUpdateWithWhereUniqueWithoutFeedItemInput | RetweetUpdateWithWhereUniqueWithoutFeedItemInput[]
    updateMany?: RetweetUpdateManyWithWhereWithoutFeedItemInput | RetweetUpdateManyWithWhereWithoutFeedItemInput[]
    deleteMany?: RetweetScalarWhereInput | RetweetScalarWhereInput[]
  }

  export type FeedItemUncheckedUpdateManyWithoutQuotedFeedItemNestedInput = {
    create?: XOR<FeedItemCreateWithoutQuotedFeedItemInput, FeedItemUncheckedCreateWithoutQuotedFeedItemInput> | FeedItemCreateWithoutQuotedFeedItemInput[] | FeedItemUncheckedCreateWithoutQuotedFeedItemInput[]
    connectOrCreate?: FeedItemCreateOrConnectWithoutQuotedFeedItemInput | FeedItemCreateOrConnectWithoutQuotedFeedItemInput[]
    upsert?: FeedItemUpsertWithWhereUniqueWithoutQuotedFeedItemInput | FeedItemUpsertWithWhereUniqueWithoutQuotedFeedItemInput[]
    createMany?: FeedItemCreateManyQuotedFeedItemInputEnvelope
    set?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    disconnect?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    delete?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    connect?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    update?: FeedItemUpdateWithWhereUniqueWithoutQuotedFeedItemInput | FeedItemUpdateWithWhereUniqueWithoutQuotedFeedItemInput[]
    updateMany?: FeedItemUpdateManyWithWhereWithoutQuotedFeedItemInput | FeedItemUpdateManyWithWhereWithoutQuotedFeedItemInput[]
    deleteMany?: FeedItemScalarWhereInput | FeedItemScalarWhereInput[]
  }

  export type FeedItemUncheckedUpdateManyWithoutRetweetOfFeedItemNestedInput = {
    create?: XOR<FeedItemCreateWithoutRetweetOfFeedItemInput, FeedItemUncheckedCreateWithoutRetweetOfFeedItemInput> | FeedItemCreateWithoutRetweetOfFeedItemInput[] | FeedItemUncheckedCreateWithoutRetweetOfFeedItemInput[]
    connectOrCreate?: FeedItemCreateOrConnectWithoutRetweetOfFeedItemInput | FeedItemCreateOrConnectWithoutRetweetOfFeedItemInput[]
    upsert?: FeedItemUpsertWithWhereUniqueWithoutRetweetOfFeedItemInput | FeedItemUpsertWithWhereUniqueWithoutRetweetOfFeedItemInput[]
    createMany?: FeedItemCreateManyRetweetOfFeedItemInputEnvelope
    set?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    disconnect?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    delete?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    connect?: FeedItemWhereUniqueInput | FeedItemWhereUniqueInput[]
    update?: FeedItemUpdateWithWhereUniqueWithoutRetweetOfFeedItemInput | FeedItemUpdateWithWhereUniqueWithoutRetweetOfFeedItemInput[]
    updateMany?: FeedItemUpdateManyWithWhereWithoutRetweetOfFeedItemInput | FeedItemUpdateManyWithWhereWithoutRetweetOfFeedItemInput[]
    deleteMany?: FeedItemScalarWhereInput | FeedItemScalarWhereInput[]
  }

  export type RetweetUncheckedUpdateManyWithoutFeedItemNestedInput = {
    create?: XOR<RetweetCreateWithoutFeedItemInput, RetweetUncheckedCreateWithoutFeedItemInput> | RetweetCreateWithoutFeedItemInput[] | RetweetUncheckedCreateWithoutFeedItemInput[]
    connectOrCreate?: RetweetCreateOrConnectWithoutFeedItemInput | RetweetCreateOrConnectWithoutFeedItemInput[]
    upsert?: RetweetUpsertWithWhereUniqueWithoutFeedItemInput | RetweetUpsertWithWhereUniqueWithoutFeedItemInput[]
    createMany?: RetweetCreateManyFeedItemInputEnvelope
    set?: RetweetWhereUniqueInput | RetweetWhereUniqueInput[]
    disconnect?: RetweetWhereUniqueInput | RetweetWhereUniqueInput[]
    delete?: RetweetWhereUniqueInput | RetweetWhereUniqueInput[]
    connect?: RetweetWhereUniqueInput | RetweetWhereUniqueInput[]
    update?: RetweetUpdateWithWhereUniqueWithoutFeedItemInput | RetweetUpdateWithWhereUniqueWithoutFeedItemInput[]
    updateMany?: RetweetUpdateManyWithWhereWithoutFeedItemInput | RetweetUpdateManyWithWhereWithoutFeedItemInput[]
    deleteMany?: RetweetScalarWhereInput | RetweetScalarWhereInput[]
  }

  export type PostCreateNestedOneWithoutLikesInput = {
    create?: XOR<PostCreateWithoutLikesInput, PostUncheckedCreateWithoutLikesInput>
    connectOrCreate?: PostCreateOrConnectWithoutLikesInput
    connect?: PostWhereUniqueInput
  }

  export type RankingListCreateNestedOneWithoutLikesInput = {
    create?: XOR<RankingListCreateWithoutLikesInput, RankingListUncheckedCreateWithoutLikesInput>
    connectOrCreate?: RankingListCreateOrConnectWithoutLikesInput
    connect?: RankingListWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutLikesInput = {
    create?: XOR<UserCreateWithoutLikesInput, UserUncheckedCreateWithoutLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutLikesInput
    connect?: UserWhereUniqueInput
  }

  export type PostUpdateOneWithoutLikesNestedInput = {
    create?: XOR<PostCreateWithoutLikesInput, PostUncheckedCreateWithoutLikesInput>
    connectOrCreate?: PostCreateOrConnectWithoutLikesInput
    upsert?: PostUpsertWithoutLikesInput
    disconnect?: PostWhereInput | boolean
    delete?: PostWhereInput | boolean
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutLikesInput, PostUpdateWithoutLikesInput>, PostUncheckedUpdateWithoutLikesInput>
  }

  export type RankingListUpdateOneWithoutLikesNestedInput = {
    create?: XOR<RankingListCreateWithoutLikesInput, RankingListUncheckedCreateWithoutLikesInput>
    connectOrCreate?: RankingListCreateOrConnectWithoutLikesInput
    upsert?: RankingListUpsertWithoutLikesInput
    disconnect?: RankingListWhereInput | boolean
    delete?: RankingListWhereInput | boolean
    connect?: RankingListWhereUniqueInput
    update?: XOR<XOR<RankingListUpdateToOneWithWhereWithoutLikesInput, RankingListUpdateWithoutLikesInput>, RankingListUncheckedUpdateWithoutLikesInput>
  }

  export type UserUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<UserCreateWithoutLikesInput, UserUncheckedCreateWithoutLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutLikesInput
    upsert?: UserUpsertWithoutLikesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLikesInput, UserUpdateWithoutLikesInput>, UserUncheckedUpdateWithoutLikesInput>
  }

  export type PostCreateNestedOneWithoutRepliesInput = {
    create?: XOR<PostCreateWithoutRepliesInput, PostUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: PostCreateOrConnectWithoutRepliesInput
    connect?: PostWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutRepliesInput = {
    create?: XOR<UserCreateWithoutRepliesInput, UserUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRepliesInput
    connect?: UserWhereUniqueInput
  }

  export type PostUpdateOneRequiredWithoutRepliesNestedInput = {
    create?: XOR<PostCreateWithoutRepliesInput, PostUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: PostCreateOrConnectWithoutRepliesInput
    upsert?: PostUpsertWithoutRepliesInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutRepliesInput, PostUpdateWithoutRepliesInput>, PostUncheckedUpdateWithoutRepliesInput>
  }

  export type UserUpdateOneRequiredWithoutRepliesNestedInput = {
    create?: XOR<UserCreateWithoutRepliesInput, UserUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRepliesInput
    upsert?: UserUpsertWithoutRepliesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRepliesInput, UserUpdateWithoutRepliesInput>, UserUncheckedUpdateWithoutRepliesInput>
  }

  export type UserCreateNestedOneWithoutReceivedFollowRequestsInput = {
    create?: XOR<UserCreateWithoutReceivedFollowRequestsInput, UserUncheckedCreateWithoutReceivedFollowRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedFollowRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSentFollowRequestsInput = {
    create?: XOR<UserCreateWithoutSentFollowRequestsInput, UserUncheckedCreateWithoutSentFollowRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentFollowRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumFollowRequestStatusFieldUpdateOperationsInput = {
    set?: $Enums.FollowRequestStatus
  }

  export type UserUpdateOneRequiredWithoutReceivedFollowRequestsNestedInput = {
    create?: XOR<UserCreateWithoutReceivedFollowRequestsInput, UserUncheckedCreateWithoutReceivedFollowRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedFollowRequestsInput
    upsert?: UserUpsertWithoutReceivedFollowRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReceivedFollowRequestsInput, UserUpdateWithoutReceivedFollowRequestsInput>, UserUncheckedUpdateWithoutReceivedFollowRequestsInput>
  }

  export type UserUpdateOneRequiredWithoutSentFollowRequestsNestedInput = {
    create?: XOR<UserCreateWithoutSentFollowRequestsInput, UserUncheckedCreateWithoutSentFollowRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentFollowRequestsInput
    upsert?: UserUpsertWithoutSentFollowRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSentFollowRequestsInput, UserUpdateWithoutSentFollowRequestsInput>, UserUncheckedUpdateWithoutSentFollowRequestsInput>
  }

  export type UserCreateNestedOneWithoutFollowingInput = {
    create?: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowingInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutFollowedByInput = {
    create?: XOR<UserCreateWithoutFollowedByInput, UserUncheckedCreateWithoutFollowedByInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowedByInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFollowingNestedInput = {
    create?: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowingInput
    upsert?: UserUpsertWithoutFollowingInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFollowingInput, UserUpdateWithoutFollowingInput>, UserUncheckedUpdateWithoutFollowingInput>
  }

  export type UserUpdateOneRequiredWithoutFollowedByNestedInput = {
    create?: XOR<UserCreateWithoutFollowedByInput, UserUncheckedCreateWithoutFollowedByInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowedByInput
    upsert?: UserUpsertWithoutFollowedByInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFollowedByInput, UserUpdateWithoutFollowedByInput>, UserUncheckedUpdateWithoutFollowedByInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumListStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ListStatus | EnumListStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ListStatus[] | ListEnumListStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ListStatus[] | ListEnumListStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumListStatusFilter<$PrismaModel> | $Enums.ListStatus
  }

  export type NestedEnumListStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ListStatus | EnumListStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ListStatus[] | ListEnumListStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ListStatus[] | ListEnumListStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumListStatusWithAggregatesFilter<$PrismaModel> | $Enums.ListStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumListStatusFilter<$PrismaModel>
    _max?: NestedEnumListStatusFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumTrendPeriodFilter<$PrismaModel = never> = {
    equals?: $Enums.TrendPeriod | EnumTrendPeriodFieldRefInput<$PrismaModel>
    in?: $Enums.TrendPeriod[] | ListEnumTrendPeriodFieldRefInput<$PrismaModel>
    notIn?: $Enums.TrendPeriod[] | ListEnumTrendPeriodFieldRefInput<$PrismaModel>
    not?: NestedEnumTrendPeriodFilter<$PrismaModel> | $Enums.TrendPeriod
  }

  export type NestedEnumTrendPeriodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TrendPeriod | EnumTrendPeriodFieldRefInput<$PrismaModel>
    in?: $Enums.TrendPeriod[] | ListEnumTrendPeriodFieldRefInput<$PrismaModel>
    notIn?: $Enums.TrendPeriod[] | ListEnumTrendPeriodFieldRefInput<$PrismaModel>
    not?: NestedEnumTrendPeriodWithAggregatesFilter<$PrismaModel> | $Enums.TrendPeriod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTrendPeriodFilter<$PrismaModel>
    _max?: NestedEnumTrendPeriodFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedUuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type NestedUuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumFeedTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.FeedType | EnumFeedTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FeedType[] | ListEnumFeedTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FeedType[] | ListEnumFeedTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFeedTypeFilter<$PrismaModel> | $Enums.FeedType
  }

  export type NestedEnumFeedTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FeedType | EnumFeedTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FeedType[] | ListEnumFeedTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FeedType[] | ListEnumFeedTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFeedTypeWithAggregatesFilter<$PrismaModel> | $Enums.FeedType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFeedTypeFilter<$PrismaModel>
    _max?: NestedEnumFeedTypeFilter<$PrismaModel>
  }

  export type NestedEnumFollowRequestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.FollowRequestStatus | EnumFollowRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.FollowRequestStatus[] | ListEnumFollowRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.FollowRequestStatus[] | ListEnumFollowRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumFollowRequestStatusFilter<$PrismaModel> | $Enums.FollowRequestStatus
  }

  export type NestedEnumFollowRequestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FollowRequestStatus | EnumFollowRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.FollowRequestStatus[] | ListEnumFollowRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.FollowRequestStatus[] | ListEnumFollowRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumFollowRequestStatusWithAggregatesFilter<$PrismaModel> | $Enums.FollowRequestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFollowRequestStatusFilter<$PrismaModel>
    _max?: NestedEnumFollowRequestStatusFilter<$PrismaModel>
  }

  export type TrendingTagCreateWithoutTagInput = {
    id?: string
    tagName: string
    count: number
    period: $Enums.TrendPeriod
    calculationDate: Date | string
  }

  export type TrendingTagUncheckedCreateWithoutTagInput = {
    id?: string
    tagName: string
    count: number
    period: $Enums.TrendPeriod
    calculationDate: Date | string
  }

  export type TrendingTagCreateOrConnectWithoutTagInput = {
    where: TrendingTagWhereUniqueInput
    create: XOR<TrendingTagCreateWithoutTagInput, TrendingTagUncheckedCreateWithoutTagInput>
  }

  export type TrendingTagCreateManyTagInputEnvelope = {
    data: TrendingTagCreateManyTagInput | TrendingTagCreateManyTagInput[]
    skipDuplicates?: boolean
  }

  export type RankingListTagCreateWithoutTagInput = {
    id?: string
    list: RankingListCreateNestedOneWithoutRankingListTagsInput
  }

  export type RankingListTagUncheckedCreateWithoutTagInput = {
    id?: string
    listId: string
  }

  export type RankingListTagCreateOrConnectWithoutTagInput = {
    where: RankingListTagWhereUniqueInput
    create: XOR<RankingListTagCreateWithoutTagInput, RankingListTagUncheckedCreateWithoutTagInput>
  }

  export type RankingListTagCreateManyTagInputEnvelope = {
    data: RankingListTagCreateManyTagInput | RankingListTagCreateManyTagInput[]
    skipDuplicates?: boolean
  }

  export type TrendingTagUpsertWithWhereUniqueWithoutTagInput = {
    where: TrendingTagWhereUniqueInput
    update: XOR<TrendingTagUpdateWithoutTagInput, TrendingTagUncheckedUpdateWithoutTagInput>
    create: XOR<TrendingTagCreateWithoutTagInput, TrendingTagUncheckedCreateWithoutTagInput>
  }

  export type TrendingTagUpdateWithWhereUniqueWithoutTagInput = {
    where: TrendingTagWhereUniqueInput
    data: XOR<TrendingTagUpdateWithoutTagInput, TrendingTagUncheckedUpdateWithoutTagInput>
  }

  export type TrendingTagUpdateManyWithWhereWithoutTagInput = {
    where: TrendingTagScalarWhereInput
    data: XOR<TrendingTagUpdateManyMutationInput, TrendingTagUncheckedUpdateManyWithoutTagInput>
  }

  export type TrendingTagScalarWhereInput = {
    AND?: TrendingTagScalarWhereInput | TrendingTagScalarWhereInput[]
    OR?: TrendingTagScalarWhereInput[]
    NOT?: TrendingTagScalarWhereInput | TrendingTagScalarWhereInput[]
    id?: StringFilter<"TrendingTag"> | string
    tagId?: StringFilter<"TrendingTag"> | string
    tagName?: StringFilter<"TrendingTag"> | string
    count?: IntFilter<"TrendingTag"> | number
    period?: EnumTrendPeriodFilter<"TrendingTag"> | $Enums.TrendPeriod
    calculationDate?: DateTimeFilter<"TrendingTag"> | Date | string
  }

  export type RankingListTagUpsertWithWhereUniqueWithoutTagInput = {
    where: RankingListTagWhereUniqueInput
    update: XOR<RankingListTagUpdateWithoutTagInput, RankingListTagUncheckedUpdateWithoutTagInput>
    create: XOR<RankingListTagCreateWithoutTagInput, RankingListTagUncheckedCreateWithoutTagInput>
  }

  export type RankingListTagUpdateWithWhereUniqueWithoutTagInput = {
    where: RankingListTagWhereUniqueInput
    data: XOR<RankingListTagUpdateWithoutTagInput, RankingListTagUncheckedUpdateWithoutTagInput>
  }

  export type RankingListTagUpdateManyWithWhereWithoutTagInput = {
    where: RankingListTagScalarWhereInput
    data: XOR<RankingListTagUpdateManyMutationInput, RankingListTagUncheckedUpdateManyWithoutTagInput>
  }

  export type RankingListTagScalarWhereInput = {
    AND?: RankingListTagScalarWhereInput | RankingListTagScalarWhereInput[]
    OR?: RankingListTagScalarWhereInput[]
    NOT?: RankingListTagScalarWhereInput | RankingListTagScalarWhereInput[]
    id?: StringFilter<"RankingListTag"> | string
    listId?: StringFilter<"RankingListTag"> | string
    tagId?: StringFilter<"RankingListTag"> | string
  }

  export type FeedItemCreateWithoutUserInput = {
    id?: string
    type: $Enums.FeedType
    createdAt?: Date | string
    updatedAt?: Date | string
    quoteRetweetCount?: number
    post?: PostCreateNestedOneWithoutFeedItemsInput
    rankingList?: RankingListCreateNestedOneWithoutFeedItemsInput
    quotedFeedItem?: FeedItemCreateNestedOneWithoutQuotedByItemsInput
    quotedByItems?: FeedItemCreateNestedManyWithoutQuotedFeedItemInput
    retweetOfFeedItem?: FeedItemCreateNestedOneWithoutRetweetedByItemsInput
    retweetedByItems?: FeedItemCreateNestedManyWithoutRetweetOfFeedItemInput
    retweets?: RetweetCreateNestedManyWithoutFeedItemInput
  }

  export type FeedItemUncheckedCreateWithoutUserInput = {
    id?: string
    type: $Enums.FeedType
    createdAt?: Date | string
    updatedAt?: Date | string
    postId?: string | null
    rankingListId?: string | null
    retweetOfFeedItemId?: string | null
    quotedFeedItemId?: string | null
    quoteRetweetCount?: number
    quotedByItems?: FeedItemUncheckedCreateNestedManyWithoutQuotedFeedItemInput
    retweetedByItems?: FeedItemUncheckedCreateNestedManyWithoutRetweetOfFeedItemInput
    retweets?: RetweetUncheckedCreateNestedManyWithoutFeedItemInput
  }

  export type FeedItemCreateOrConnectWithoutUserInput = {
    where: FeedItemWhereUniqueInput
    create: XOR<FeedItemCreateWithoutUserInput, FeedItemUncheckedCreateWithoutUserInput>
  }

  export type FeedItemCreateManyUserInputEnvelope = {
    data: FeedItemCreateManyUserInput | FeedItemCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FollowCreateWithoutFollowerInput = {
    id?: string
    createdAt?: Date | string
    following: UserCreateNestedOneWithoutFollowedByInput
  }

  export type FollowUncheckedCreateWithoutFollowerInput = {
    id?: string
    followingId: string
    createdAt?: Date | string
  }

  export type FollowCreateOrConnectWithoutFollowerInput = {
    where: FollowWhereUniqueInput
    create: XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput>
  }

  export type FollowCreateManyFollowerInputEnvelope = {
    data: FollowCreateManyFollowerInput | FollowCreateManyFollowerInput[]
    skipDuplicates?: boolean
  }

  export type FollowCreateWithoutFollowingInput = {
    id?: string
    createdAt?: Date | string
    follower: UserCreateNestedOneWithoutFollowingInput
  }

  export type FollowUncheckedCreateWithoutFollowingInput = {
    id?: string
    followerId: string
    createdAt?: Date | string
  }

  export type FollowCreateOrConnectWithoutFollowingInput = {
    where: FollowWhereUniqueInput
    create: XOR<FollowCreateWithoutFollowingInput, FollowUncheckedCreateWithoutFollowingInput>
  }

  export type FollowCreateManyFollowingInputEnvelope = {
    data: FollowCreateManyFollowingInput | FollowCreateManyFollowingInput[]
    skipDuplicates?: boolean
  }

  export type FollowRequestCreateWithoutRequestedInput = {
    id?: string
    status?: $Enums.FollowRequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    requester: UserCreateNestedOneWithoutSentFollowRequestsInput
  }

  export type FollowRequestUncheckedCreateWithoutRequestedInput = {
    id?: string
    status?: $Enums.FollowRequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    requesterId: string
  }

  export type FollowRequestCreateOrConnectWithoutRequestedInput = {
    where: FollowRequestWhereUniqueInput
    create: XOR<FollowRequestCreateWithoutRequestedInput, FollowRequestUncheckedCreateWithoutRequestedInput>
  }

  export type FollowRequestCreateManyRequestedInputEnvelope = {
    data: FollowRequestCreateManyRequestedInput | FollowRequestCreateManyRequestedInput[]
    skipDuplicates?: boolean
  }

  export type FollowRequestCreateWithoutRequesterInput = {
    id?: string
    status?: $Enums.FollowRequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    requested: UserCreateNestedOneWithoutReceivedFollowRequestsInput
  }

  export type FollowRequestUncheckedCreateWithoutRequesterInput = {
    id?: string
    status?: $Enums.FollowRequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    requestedId: string
  }

  export type FollowRequestCreateOrConnectWithoutRequesterInput = {
    where: FollowRequestWhereUniqueInput
    create: XOR<FollowRequestCreateWithoutRequesterInput, FollowRequestUncheckedCreateWithoutRequesterInput>
  }

  export type FollowRequestCreateManyRequesterInputEnvelope = {
    data: FollowRequestCreateManyRequesterInput | FollowRequestCreateManyRequesterInput[]
    skipDuplicates?: boolean
  }

  export type LikeCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    post?: PostCreateNestedOneWithoutLikesInput
    rankingList?: RankingListCreateNestedOneWithoutLikesInput
  }

  export type LikeUncheckedCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    postId?: string | null
    rankingListId?: string | null
  }

  export type LikeCreateOrConnectWithoutUserInput = {
    where: LikeWhereUniqueInput
    create: XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput>
  }

  export type LikeCreateManyUserInputEnvelope = {
    data: LikeCreateManyUserInput | LikeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PostCreateWithoutAuthorInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    likeCount?: number
    imageUrl?: string | null
    feedItems?: FeedItemCreateNestedManyWithoutPostInput
    likes?: LikeCreateNestedManyWithoutPostInput
    replies?: ReplyCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutAuthorInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    likeCount?: number
    imageUrl?: string | null
    feedItems?: FeedItemUncheckedCreateNestedManyWithoutPostInput
    likes?: LikeUncheckedCreateNestedManyWithoutPostInput
    replies?: ReplyUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutAuthorInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput>
  }

  export type PostCreateManyAuthorInputEnvelope = {
    data: PostCreateManyAuthorInput | PostCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type RankingListCreateWithoutAuthorInput = {
    id?: string
    subject: string
    description?: string | null
    status?: $Enums.ListStatus
    listImageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    displayOrder?: number | null
    likeCount?: number
    feedItems?: FeedItemCreateNestedManyWithoutRankingListInput
    likes?: LikeCreateNestedManyWithoutRankingListInput
    items?: RankedItemCreateNestedManyWithoutRankingListInput
    rankingListTags?: RankingListTagCreateNestedManyWithoutListInput
  }

  export type RankingListUncheckedCreateWithoutAuthorInput = {
    id?: string
    subject: string
    description?: string | null
    status?: $Enums.ListStatus
    listImageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    displayOrder?: number | null
    likeCount?: number
    feedItems?: FeedItemUncheckedCreateNestedManyWithoutRankingListInput
    likes?: LikeUncheckedCreateNestedManyWithoutRankingListInput
    items?: RankedItemUncheckedCreateNestedManyWithoutRankingListInput
    rankingListTags?: RankingListTagUncheckedCreateNestedManyWithoutListInput
  }

  export type RankingListCreateOrConnectWithoutAuthorInput = {
    where: RankingListWhereUniqueInput
    create: XOR<RankingListCreateWithoutAuthorInput, RankingListUncheckedCreateWithoutAuthorInput>
  }

  export type RankingListCreateManyAuthorInputEnvelope = {
    data: RankingListCreateManyAuthorInput | RankingListCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type ReplyCreateWithoutUserInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    post: PostCreateNestedOneWithoutRepliesInput
  }

  export type ReplyUncheckedCreateWithoutUserInput = {
    id?: string
    content: string
    postId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReplyCreateOrConnectWithoutUserInput = {
    where: ReplyWhereUniqueInput
    create: XOR<ReplyCreateWithoutUserInput, ReplyUncheckedCreateWithoutUserInput>
  }

  export type ReplyCreateManyUserInputEnvelope = {
    data: ReplyCreateManyUserInput | ReplyCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RetweetCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    feedItem: FeedItemCreateNestedOneWithoutRetweetsInput
  }

  export type RetweetUncheckedCreateWithoutUserInput = {
    id?: string
    feedItemId: string
    createdAt?: Date | string
  }

  export type RetweetCreateOrConnectWithoutUserInput = {
    where: RetweetWhereUniqueInput
    create: XOR<RetweetCreateWithoutUserInput, RetweetUncheckedCreateWithoutUserInput>
  }

  export type RetweetCreateManyUserInputEnvelope = {
    data: RetweetCreateManyUserInput | RetweetCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RankingListCommentCreateWithoutUserInput = {
    id?: string
    listId: string
    content: string
    createdAt?: Date | string
  }

  export type RankingListCommentUncheckedCreateWithoutUserInput = {
    id?: string
    listId: string
    content: string
    createdAt?: Date | string
  }

  export type RankingListCommentCreateOrConnectWithoutUserInput = {
    where: RankingListCommentWhereUniqueInput
    create: XOR<RankingListCommentCreateWithoutUserInput, RankingListCommentUncheckedCreateWithoutUserInput>
  }

  export type RankingListCommentCreateManyUserInputEnvelope = {
    data: RankingListCommentCreateManyUserInput | RankingListCommentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AverageItemCommentCreateWithoutUserInput = {
    id?: string
    subject: string
    content: string
    createdAt?: Date | string
  }

  export type AverageItemCommentUncheckedCreateWithoutUserInput = {
    id?: string
    subject: string
    content: string
    createdAt?: Date | string
  }

  export type AverageItemCommentCreateOrConnectWithoutUserInput = {
    where: AverageItemCommentWhereUniqueInput
    create: XOR<AverageItemCommentCreateWithoutUserInput, AverageItemCommentUncheckedCreateWithoutUserInput>
  }

  export type AverageItemCommentCreateManyUserInputEnvelope = {
    data: AverageItemCommentCreateManyUserInput | AverageItemCommentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FeedItemUpsertWithWhereUniqueWithoutUserInput = {
    where: FeedItemWhereUniqueInput
    update: XOR<FeedItemUpdateWithoutUserInput, FeedItemUncheckedUpdateWithoutUserInput>
    create: XOR<FeedItemCreateWithoutUserInput, FeedItemUncheckedCreateWithoutUserInput>
  }

  export type FeedItemUpdateWithWhereUniqueWithoutUserInput = {
    where: FeedItemWhereUniqueInput
    data: XOR<FeedItemUpdateWithoutUserInput, FeedItemUncheckedUpdateWithoutUserInput>
  }

  export type FeedItemUpdateManyWithWhereWithoutUserInput = {
    where: FeedItemScalarWhereInput
    data: XOR<FeedItemUpdateManyMutationInput, FeedItemUncheckedUpdateManyWithoutUserInput>
  }

  export type FeedItemScalarWhereInput = {
    AND?: FeedItemScalarWhereInput | FeedItemScalarWhereInput[]
    OR?: FeedItemScalarWhereInput[]
    NOT?: FeedItemScalarWhereInput | FeedItemScalarWhereInput[]
    id?: StringFilter<"FeedItem"> | string
    type?: EnumFeedTypeFilter<"FeedItem"> | $Enums.FeedType
    createdAt?: DateTimeFilter<"FeedItem"> | Date | string
    updatedAt?: DateTimeFilter<"FeedItem"> | Date | string
    userId?: StringFilter<"FeedItem"> | string
    postId?: StringNullableFilter<"FeedItem"> | string | null
    rankingListId?: StringNullableFilter<"FeedItem"> | string | null
    retweetOfFeedItemId?: StringNullableFilter<"FeedItem"> | string | null
    quotedFeedItemId?: StringNullableFilter<"FeedItem"> | string | null
    quoteRetweetCount?: IntFilter<"FeedItem"> | number
  }

  export type FollowUpsertWithWhereUniqueWithoutFollowerInput = {
    where: FollowWhereUniqueInput
    update: XOR<FollowUpdateWithoutFollowerInput, FollowUncheckedUpdateWithoutFollowerInput>
    create: XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput>
  }

  export type FollowUpdateWithWhereUniqueWithoutFollowerInput = {
    where: FollowWhereUniqueInput
    data: XOR<FollowUpdateWithoutFollowerInput, FollowUncheckedUpdateWithoutFollowerInput>
  }

  export type FollowUpdateManyWithWhereWithoutFollowerInput = {
    where: FollowScalarWhereInput
    data: XOR<FollowUpdateManyMutationInput, FollowUncheckedUpdateManyWithoutFollowerInput>
  }

  export type FollowScalarWhereInput = {
    AND?: FollowScalarWhereInput | FollowScalarWhereInput[]
    OR?: FollowScalarWhereInput[]
    NOT?: FollowScalarWhereInput | FollowScalarWhereInput[]
    id?: StringFilter<"Follow"> | string
    followerId?: StringFilter<"Follow"> | string
    followingId?: StringFilter<"Follow"> | string
    createdAt?: DateTimeFilter<"Follow"> | Date | string
  }

  export type FollowUpsertWithWhereUniqueWithoutFollowingInput = {
    where: FollowWhereUniqueInput
    update: XOR<FollowUpdateWithoutFollowingInput, FollowUncheckedUpdateWithoutFollowingInput>
    create: XOR<FollowCreateWithoutFollowingInput, FollowUncheckedCreateWithoutFollowingInput>
  }

  export type FollowUpdateWithWhereUniqueWithoutFollowingInput = {
    where: FollowWhereUniqueInput
    data: XOR<FollowUpdateWithoutFollowingInput, FollowUncheckedUpdateWithoutFollowingInput>
  }

  export type FollowUpdateManyWithWhereWithoutFollowingInput = {
    where: FollowScalarWhereInput
    data: XOR<FollowUpdateManyMutationInput, FollowUncheckedUpdateManyWithoutFollowingInput>
  }

  export type FollowRequestUpsertWithWhereUniqueWithoutRequestedInput = {
    where: FollowRequestWhereUniqueInput
    update: XOR<FollowRequestUpdateWithoutRequestedInput, FollowRequestUncheckedUpdateWithoutRequestedInput>
    create: XOR<FollowRequestCreateWithoutRequestedInput, FollowRequestUncheckedCreateWithoutRequestedInput>
  }

  export type FollowRequestUpdateWithWhereUniqueWithoutRequestedInput = {
    where: FollowRequestWhereUniqueInput
    data: XOR<FollowRequestUpdateWithoutRequestedInput, FollowRequestUncheckedUpdateWithoutRequestedInput>
  }

  export type FollowRequestUpdateManyWithWhereWithoutRequestedInput = {
    where: FollowRequestScalarWhereInput
    data: XOR<FollowRequestUpdateManyMutationInput, FollowRequestUncheckedUpdateManyWithoutRequestedInput>
  }

  export type FollowRequestScalarWhereInput = {
    AND?: FollowRequestScalarWhereInput | FollowRequestScalarWhereInput[]
    OR?: FollowRequestScalarWhereInput[]
    NOT?: FollowRequestScalarWhereInput | FollowRequestScalarWhereInput[]
    id?: StringFilter<"FollowRequest"> | string
    status?: EnumFollowRequestStatusFilter<"FollowRequest"> | $Enums.FollowRequestStatus
    createdAt?: DateTimeFilter<"FollowRequest"> | Date | string
    updatedAt?: DateTimeFilter<"FollowRequest"> | Date | string
    requesterId?: StringFilter<"FollowRequest"> | string
    requestedId?: StringFilter<"FollowRequest"> | string
  }

  export type FollowRequestUpsertWithWhereUniqueWithoutRequesterInput = {
    where: FollowRequestWhereUniqueInput
    update: XOR<FollowRequestUpdateWithoutRequesterInput, FollowRequestUncheckedUpdateWithoutRequesterInput>
    create: XOR<FollowRequestCreateWithoutRequesterInput, FollowRequestUncheckedCreateWithoutRequesterInput>
  }

  export type FollowRequestUpdateWithWhereUniqueWithoutRequesterInput = {
    where: FollowRequestWhereUniqueInput
    data: XOR<FollowRequestUpdateWithoutRequesterInput, FollowRequestUncheckedUpdateWithoutRequesterInput>
  }

  export type FollowRequestUpdateManyWithWhereWithoutRequesterInput = {
    where: FollowRequestScalarWhereInput
    data: XOR<FollowRequestUpdateManyMutationInput, FollowRequestUncheckedUpdateManyWithoutRequesterInput>
  }

  export type LikeUpsertWithWhereUniqueWithoutUserInput = {
    where: LikeWhereUniqueInput
    update: XOR<LikeUpdateWithoutUserInput, LikeUncheckedUpdateWithoutUserInput>
    create: XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput>
  }

  export type LikeUpdateWithWhereUniqueWithoutUserInput = {
    where: LikeWhereUniqueInput
    data: XOR<LikeUpdateWithoutUserInput, LikeUncheckedUpdateWithoutUserInput>
  }

  export type LikeUpdateManyWithWhereWithoutUserInput = {
    where: LikeScalarWhereInput
    data: XOR<LikeUpdateManyMutationInput, LikeUncheckedUpdateManyWithoutUserInput>
  }

  export type LikeScalarWhereInput = {
    AND?: LikeScalarWhereInput | LikeScalarWhereInput[]
    OR?: LikeScalarWhereInput[]
    NOT?: LikeScalarWhereInput | LikeScalarWhereInput[]
    id?: StringFilter<"Like"> | string
    userId?: StringFilter<"Like"> | string
    createdAt?: DateTimeFilter<"Like"> | Date | string
    postId?: StringNullableFilter<"Like"> | string | null
    rankingListId?: StringNullableFilter<"Like"> | string | null
  }

  export type PostUpsertWithWhereUniqueWithoutAuthorInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutAuthorInput, PostUncheckedUpdateWithoutAuthorInput>
    create: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput>
  }

  export type PostUpdateWithWhereUniqueWithoutAuthorInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutAuthorInput, PostUncheckedUpdateWithoutAuthorInput>
  }

  export type PostUpdateManyWithWhereWithoutAuthorInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutAuthorInput>
  }

  export type PostScalarWhereInput = {
    AND?: PostScalarWhereInput | PostScalarWhereInput[]
    OR?: PostScalarWhereInput[]
    NOT?: PostScalarWhereInput | PostScalarWhereInput[]
    id?: StringFilter<"Post"> | string
    content?: StringFilter<"Post"> | string
    authorId?: StringFilter<"Post"> | string
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
    likeCount?: IntFilter<"Post"> | number
    imageUrl?: StringNullableFilter<"Post"> | string | null
  }

  export type RankingListUpsertWithWhereUniqueWithoutAuthorInput = {
    where: RankingListWhereUniqueInput
    update: XOR<RankingListUpdateWithoutAuthorInput, RankingListUncheckedUpdateWithoutAuthorInput>
    create: XOR<RankingListCreateWithoutAuthorInput, RankingListUncheckedCreateWithoutAuthorInput>
  }

  export type RankingListUpdateWithWhereUniqueWithoutAuthorInput = {
    where: RankingListWhereUniqueInput
    data: XOR<RankingListUpdateWithoutAuthorInput, RankingListUncheckedUpdateWithoutAuthorInput>
  }

  export type RankingListUpdateManyWithWhereWithoutAuthorInput = {
    where: RankingListScalarWhereInput
    data: XOR<RankingListUpdateManyMutationInput, RankingListUncheckedUpdateManyWithoutAuthorInput>
  }

  export type RankingListScalarWhereInput = {
    AND?: RankingListScalarWhereInput | RankingListScalarWhereInput[]
    OR?: RankingListScalarWhereInput[]
    NOT?: RankingListScalarWhereInput | RankingListScalarWhereInput[]
    id?: StringFilter<"RankingList"> | string
    subject?: StringFilter<"RankingList"> | string
    description?: StringNullableFilter<"RankingList"> | string | null
    status?: EnumListStatusFilter<"RankingList"> | $Enums.ListStatus
    listImageUrl?: StringNullableFilter<"RankingList"> | string | null
    authorId?: StringFilter<"RankingList"> | string
    createdAt?: DateTimeFilter<"RankingList"> | Date | string
    updatedAt?: DateTimeFilter<"RankingList"> | Date | string
    displayOrder?: IntNullableFilter<"RankingList"> | number | null
    likeCount?: IntFilter<"RankingList"> | number
  }

  export type ReplyUpsertWithWhereUniqueWithoutUserInput = {
    where: ReplyWhereUniqueInput
    update: XOR<ReplyUpdateWithoutUserInput, ReplyUncheckedUpdateWithoutUserInput>
    create: XOR<ReplyCreateWithoutUserInput, ReplyUncheckedCreateWithoutUserInput>
  }

  export type ReplyUpdateWithWhereUniqueWithoutUserInput = {
    where: ReplyWhereUniqueInput
    data: XOR<ReplyUpdateWithoutUserInput, ReplyUncheckedUpdateWithoutUserInput>
  }

  export type ReplyUpdateManyWithWhereWithoutUserInput = {
    where: ReplyScalarWhereInput
    data: XOR<ReplyUpdateManyMutationInput, ReplyUncheckedUpdateManyWithoutUserInput>
  }

  export type ReplyScalarWhereInput = {
    AND?: ReplyScalarWhereInput | ReplyScalarWhereInput[]
    OR?: ReplyScalarWhereInput[]
    NOT?: ReplyScalarWhereInput | ReplyScalarWhereInput[]
    id?: StringFilter<"Reply"> | string
    content?: StringFilter<"Reply"> | string
    userId?: StringFilter<"Reply"> | string
    postId?: StringFilter<"Reply"> | string
    createdAt?: DateTimeFilter<"Reply"> | Date | string
    updatedAt?: DateTimeFilter<"Reply"> | Date | string
  }

  export type RetweetUpsertWithWhereUniqueWithoutUserInput = {
    where: RetweetWhereUniqueInput
    update: XOR<RetweetUpdateWithoutUserInput, RetweetUncheckedUpdateWithoutUserInput>
    create: XOR<RetweetCreateWithoutUserInput, RetweetUncheckedCreateWithoutUserInput>
  }

  export type RetweetUpdateWithWhereUniqueWithoutUserInput = {
    where: RetweetWhereUniqueInput
    data: XOR<RetweetUpdateWithoutUserInput, RetweetUncheckedUpdateWithoutUserInput>
  }

  export type RetweetUpdateManyWithWhereWithoutUserInput = {
    where: RetweetScalarWhereInput
    data: XOR<RetweetUpdateManyMutationInput, RetweetUncheckedUpdateManyWithoutUserInput>
  }

  export type RetweetScalarWhereInput = {
    AND?: RetweetScalarWhereInput | RetweetScalarWhereInput[]
    OR?: RetweetScalarWhereInput[]
    NOT?: RetweetScalarWhereInput | RetweetScalarWhereInput[]
    id?: StringFilter<"Retweet"> | string
    userId?: StringFilter<"Retweet"> | string
    feedItemId?: StringFilter<"Retweet"> | string
    createdAt?: DateTimeFilter<"Retweet"> | Date | string
  }

  export type RankingListCommentUpsertWithWhereUniqueWithoutUserInput = {
    where: RankingListCommentWhereUniqueInput
    update: XOR<RankingListCommentUpdateWithoutUserInput, RankingListCommentUncheckedUpdateWithoutUserInput>
    create: XOR<RankingListCommentCreateWithoutUserInput, RankingListCommentUncheckedCreateWithoutUserInput>
  }

  export type RankingListCommentUpdateWithWhereUniqueWithoutUserInput = {
    where: RankingListCommentWhereUniqueInput
    data: XOR<RankingListCommentUpdateWithoutUserInput, RankingListCommentUncheckedUpdateWithoutUserInput>
  }

  export type RankingListCommentUpdateManyWithWhereWithoutUserInput = {
    where: RankingListCommentScalarWhereInput
    data: XOR<RankingListCommentUpdateManyMutationInput, RankingListCommentUncheckedUpdateManyWithoutUserInput>
  }

  export type RankingListCommentScalarWhereInput = {
    AND?: RankingListCommentScalarWhereInput | RankingListCommentScalarWhereInput[]
    OR?: RankingListCommentScalarWhereInput[]
    NOT?: RankingListCommentScalarWhereInput | RankingListCommentScalarWhereInput[]
    id?: StringFilter<"RankingListComment"> | string
    listId?: StringFilter<"RankingListComment"> | string
    userId?: StringFilter<"RankingListComment"> | string
    content?: StringFilter<"RankingListComment"> | string
    createdAt?: DateTimeFilter<"RankingListComment"> | Date | string
  }

  export type AverageItemCommentUpsertWithWhereUniqueWithoutUserInput = {
    where: AverageItemCommentWhereUniqueInput
    update: XOR<AverageItemCommentUpdateWithoutUserInput, AverageItemCommentUncheckedUpdateWithoutUserInput>
    create: XOR<AverageItemCommentCreateWithoutUserInput, AverageItemCommentUncheckedCreateWithoutUserInput>
  }

  export type AverageItemCommentUpdateWithWhereUniqueWithoutUserInput = {
    where: AverageItemCommentWhereUniqueInput
    data: XOR<AverageItemCommentUpdateWithoutUserInput, AverageItemCommentUncheckedUpdateWithoutUserInput>
  }

  export type AverageItemCommentUpdateManyWithWhereWithoutUserInput = {
    where: AverageItemCommentScalarWhereInput
    data: XOR<AverageItemCommentUpdateManyMutationInput, AverageItemCommentUncheckedUpdateManyWithoutUserInput>
  }

  export type AverageItemCommentScalarWhereInput = {
    AND?: AverageItemCommentScalarWhereInput | AverageItemCommentScalarWhereInput[]
    OR?: AverageItemCommentScalarWhereInput[]
    NOT?: AverageItemCommentScalarWhereInput | AverageItemCommentScalarWhereInput[]
    id?: StringFilter<"AverageItemComment"> | string
    subject?: StringFilter<"AverageItemComment"> | string
    userId?: StringFilter<"AverageItemComment"> | string
    content?: StringFilter<"AverageItemComment"> | string
    createdAt?: DateTimeFilter<"AverageItemComment"> | Date | string
  }

  export type FeedItemCreateWithoutRankingListInput = {
    id?: string
    type: $Enums.FeedType
    createdAt?: Date | string
    updatedAt?: Date | string
    quoteRetweetCount?: number
    post?: PostCreateNestedOneWithoutFeedItemsInput
    user: UserCreateNestedOneWithoutFeedItemsInput
    quotedFeedItem?: FeedItemCreateNestedOneWithoutQuotedByItemsInput
    quotedByItems?: FeedItemCreateNestedManyWithoutQuotedFeedItemInput
    retweetOfFeedItem?: FeedItemCreateNestedOneWithoutRetweetedByItemsInput
    retweetedByItems?: FeedItemCreateNestedManyWithoutRetweetOfFeedItemInput
    retweets?: RetweetCreateNestedManyWithoutFeedItemInput
  }

  export type FeedItemUncheckedCreateWithoutRankingListInput = {
    id?: string
    type: $Enums.FeedType
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    postId?: string | null
    retweetOfFeedItemId?: string | null
    quotedFeedItemId?: string | null
    quoteRetweetCount?: number
    quotedByItems?: FeedItemUncheckedCreateNestedManyWithoutQuotedFeedItemInput
    retweetedByItems?: FeedItemUncheckedCreateNestedManyWithoutRetweetOfFeedItemInput
    retweets?: RetweetUncheckedCreateNestedManyWithoutFeedItemInput
  }

  export type FeedItemCreateOrConnectWithoutRankingListInput = {
    where: FeedItemWhereUniqueInput
    create: XOR<FeedItemCreateWithoutRankingListInput, FeedItemUncheckedCreateWithoutRankingListInput>
  }

  export type FeedItemCreateManyRankingListInputEnvelope = {
    data: FeedItemCreateManyRankingListInput | FeedItemCreateManyRankingListInput[]
    skipDuplicates?: boolean
  }

  export type LikeCreateWithoutRankingListInput = {
    id?: string
    createdAt?: Date | string
    post?: PostCreateNestedOneWithoutLikesInput
    user: UserCreateNestedOneWithoutLikesInput
  }

  export type LikeUncheckedCreateWithoutRankingListInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    postId?: string | null
  }

  export type LikeCreateOrConnectWithoutRankingListInput = {
    where: LikeWhereUniqueInput
    create: XOR<LikeCreateWithoutRankingListInput, LikeUncheckedCreateWithoutRankingListInput>
  }

  export type LikeCreateManyRankingListInputEnvelope = {
    data: LikeCreateManyRankingListInput | LikeCreateManyRankingListInput[]
    skipDuplicates?: boolean
  }

  export type RankedItemCreateWithoutRankingListInput = {
    id?: string
    itemName: string
    rank: number
    imageUrl?: string | null
    itemDescription?: string | null
    createdAt?: Date | string
  }

  export type RankedItemUncheckedCreateWithoutRankingListInput = {
    id?: string
    itemName: string
    rank: number
    imageUrl?: string | null
    itemDescription?: string | null
    createdAt?: Date | string
  }

  export type RankedItemCreateOrConnectWithoutRankingListInput = {
    where: RankedItemWhereUniqueInput
    create: XOR<RankedItemCreateWithoutRankingListInput, RankedItemUncheckedCreateWithoutRankingListInput>
  }

  export type RankedItemCreateManyRankingListInputEnvelope = {
    data: RankedItemCreateManyRankingListInput | RankedItemCreateManyRankingListInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutRankingListsInput = {
    id?: string
    clerkId: string
    username: string
    name?: string | null
    bio?: string | null
    image?: string | null
    coverImageUrl?: string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    birthday?: Date | string | null
    location?: string | null
    feedItems?: FeedItemCreateNestedManyWithoutUserInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    followedBy?: FollowCreateNestedManyWithoutFollowingInput
    receivedFollowRequests?: FollowRequestCreateNestedManyWithoutRequestedInput
    sentFollowRequests?: FollowRequestCreateNestedManyWithoutRequesterInput
    likes?: LikeCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    replies?: ReplyCreateNestedManyWithoutUserInput
    retweets?: RetweetCreateNestedManyWithoutUserInput
    rankingListComments?: RankingListCommentCreateNestedManyWithoutUserInput
    averageItemComments?: AverageItemCommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRankingListsInput = {
    id?: string
    clerkId: string
    username: string
    name?: string | null
    bio?: string | null
    image?: string | null
    coverImageUrl?: string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    birthday?: Date | string | null
    location?: string | null
    feedItems?: FeedItemUncheckedCreateNestedManyWithoutUserInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followedBy?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    receivedFollowRequests?: FollowRequestUncheckedCreateNestedManyWithoutRequestedInput
    sentFollowRequests?: FollowRequestUncheckedCreateNestedManyWithoutRequesterInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    replies?: ReplyUncheckedCreateNestedManyWithoutUserInput
    retweets?: RetweetUncheckedCreateNestedManyWithoutUserInput
    rankingListComments?: RankingListCommentUncheckedCreateNestedManyWithoutUserInput
    averageItemComments?: AverageItemCommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRankingListsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRankingListsInput, UserUncheckedCreateWithoutRankingListsInput>
  }

  export type RankingListTagCreateWithoutListInput = {
    id?: string
    tag: TagCreateNestedOneWithoutRankingListTagsInput
  }

  export type RankingListTagUncheckedCreateWithoutListInput = {
    id?: string
    tagId: string
  }

  export type RankingListTagCreateOrConnectWithoutListInput = {
    where: RankingListTagWhereUniqueInput
    create: XOR<RankingListTagCreateWithoutListInput, RankingListTagUncheckedCreateWithoutListInput>
  }

  export type RankingListTagCreateManyListInputEnvelope = {
    data: RankingListTagCreateManyListInput | RankingListTagCreateManyListInput[]
    skipDuplicates?: boolean
  }

  export type FeedItemUpsertWithWhereUniqueWithoutRankingListInput = {
    where: FeedItemWhereUniqueInput
    update: XOR<FeedItemUpdateWithoutRankingListInput, FeedItemUncheckedUpdateWithoutRankingListInput>
    create: XOR<FeedItemCreateWithoutRankingListInput, FeedItemUncheckedCreateWithoutRankingListInput>
  }

  export type FeedItemUpdateWithWhereUniqueWithoutRankingListInput = {
    where: FeedItemWhereUniqueInput
    data: XOR<FeedItemUpdateWithoutRankingListInput, FeedItemUncheckedUpdateWithoutRankingListInput>
  }

  export type FeedItemUpdateManyWithWhereWithoutRankingListInput = {
    where: FeedItemScalarWhereInput
    data: XOR<FeedItemUpdateManyMutationInput, FeedItemUncheckedUpdateManyWithoutRankingListInput>
  }

  export type LikeUpsertWithWhereUniqueWithoutRankingListInput = {
    where: LikeWhereUniqueInput
    update: XOR<LikeUpdateWithoutRankingListInput, LikeUncheckedUpdateWithoutRankingListInput>
    create: XOR<LikeCreateWithoutRankingListInput, LikeUncheckedCreateWithoutRankingListInput>
  }

  export type LikeUpdateWithWhereUniqueWithoutRankingListInput = {
    where: LikeWhereUniqueInput
    data: XOR<LikeUpdateWithoutRankingListInput, LikeUncheckedUpdateWithoutRankingListInput>
  }

  export type LikeUpdateManyWithWhereWithoutRankingListInput = {
    where: LikeScalarWhereInput
    data: XOR<LikeUpdateManyMutationInput, LikeUncheckedUpdateManyWithoutRankingListInput>
  }

  export type RankedItemUpsertWithWhereUniqueWithoutRankingListInput = {
    where: RankedItemWhereUniqueInput
    update: XOR<RankedItemUpdateWithoutRankingListInput, RankedItemUncheckedUpdateWithoutRankingListInput>
    create: XOR<RankedItemCreateWithoutRankingListInput, RankedItemUncheckedCreateWithoutRankingListInput>
  }

  export type RankedItemUpdateWithWhereUniqueWithoutRankingListInput = {
    where: RankedItemWhereUniqueInput
    data: XOR<RankedItemUpdateWithoutRankingListInput, RankedItemUncheckedUpdateWithoutRankingListInput>
  }

  export type RankedItemUpdateManyWithWhereWithoutRankingListInput = {
    where: RankedItemScalarWhereInput
    data: XOR<RankedItemUpdateManyMutationInput, RankedItemUncheckedUpdateManyWithoutRankingListInput>
  }

  export type RankedItemScalarWhereInput = {
    AND?: RankedItemScalarWhereInput | RankedItemScalarWhereInput[]
    OR?: RankedItemScalarWhereInput[]
    NOT?: RankedItemScalarWhereInput | RankedItemScalarWhereInput[]
    id?: StringFilter<"RankedItem"> | string
    itemName?: StringFilter<"RankedItem"> | string
    rank?: IntFilter<"RankedItem"> | number
    imageUrl?: StringNullableFilter<"RankedItem"> | string | null
    itemDescription?: StringNullableFilter<"RankedItem"> | string | null
    listId?: StringFilter<"RankedItem"> | string
    createdAt?: DateTimeFilter<"RankedItem"> | Date | string
  }

  export type UserUpsertWithoutRankingListsInput = {
    update: XOR<UserUpdateWithoutRankingListsInput, UserUncheckedUpdateWithoutRankingListsInput>
    create: XOR<UserCreateWithoutRankingListsInput, UserUncheckedCreateWithoutRankingListsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRankingListsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRankingListsInput, UserUncheckedUpdateWithoutRankingListsInput>
  }

  export type UserUpdateWithoutRankingListsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    feedItems?: FeedItemUpdateManyWithoutUserNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    followedBy?: FollowUpdateManyWithoutFollowingNestedInput
    receivedFollowRequests?: FollowRequestUpdateManyWithoutRequestedNestedInput
    sentFollowRequests?: FollowRequestUpdateManyWithoutRequesterNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    replies?: ReplyUpdateManyWithoutUserNestedInput
    retweets?: RetweetUpdateManyWithoutUserNestedInput
    rankingListComments?: RankingListCommentUpdateManyWithoutUserNestedInput
    averageItemComments?: AverageItemCommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRankingListsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    feedItems?: FeedItemUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followedBy?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    receivedFollowRequests?: FollowRequestUncheckedUpdateManyWithoutRequestedNestedInput
    sentFollowRequests?: FollowRequestUncheckedUpdateManyWithoutRequesterNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    replies?: ReplyUncheckedUpdateManyWithoutUserNestedInput
    retweets?: RetweetUncheckedUpdateManyWithoutUserNestedInput
    rankingListComments?: RankingListCommentUncheckedUpdateManyWithoutUserNestedInput
    averageItemComments?: AverageItemCommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RankingListTagUpsertWithWhereUniqueWithoutListInput = {
    where: RankingListTagWhereUniqueInput
    update: XOR<RankingListTagUpdateWithoutListInput, RankingListTagUncheckedUpdateWithoutListInput>
    create: XOR<RankingListTagCreateWithoutListInput, RankingListTagUncheckedCreateWithoutListInput>
  }

  export type RankingListTagUpdateWithWhereUniqueWithoutListInput = {
    where: RankingListTagWhereUniqueInput
    data: XOR<RankingListTagUpdateWithoutListInput, RankingListTagUncheckedUpdateWithoutListInput>
  }

  export type RankingListTagUpdateManyWithWhereWithoutListInput = {
    where: RankingListTagScalarWhereInput
    data: XOR<RankingListTagUpdateManyMutationInput, RankingListTagUncheckedUpdateManyWithoutListInput>
  }

  export type RankingListCreateWithoutItemsInput = {
    id?: string
    subject: string
    description?: string | null
    status?: $Enums.ListStatus
    listImageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    displayOrder?: number | null
    likeCount?: number
    feedItems?: FeedItemCreateNestedManyWithoutRankingListInput
    likes?: LikeCreateNestedManyWithoutRankingListInput
    author: UserCreateNestedOneWithoutRankingListsInput
    rankingListTags?: RankingListTagCreateNestedManyWithoutListInput
  }

  export type RankingListUncheckedCreateWithoutItemsInput = {
    id?: string
    subject: string
    description?: string | null
    status?: $Enums.ListStatus
    listImageUrl?: string | null
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    displayOrder?: number | null
    likeCount?: number
    feedItems?: FeedItemUncheckedCreateNestedManyWithoutRankingListInput
    likes?: LikeUncheckedCreateNestedManyWithoutRankingListInput
    rankingListTags?: RankingListTagUncheckedCreateNestedManyWithoutListInput
  }

  export type RankingListCreateOrConnectWithoutItemsInput = {
    where: RankingListWhereUniqueInput
    create: XOR<RankingListCreateWithoutItemsInput, RankingListUncheckedCreateWithoutItemsInput>
  }

  export type RankingListUpsertWithoutItemsInput = {
    update: XOR<RankingListUpdateWithoutItemsInput, RankingListUncheckedUpdateWithoutItemsInput>
    create: XOR<RankingListCreateWithoutItemsInput, RankingListUncheckedCreateWithoutItemsInput>
    where?: RankingListWhereInput
  }

  export type RankingListUpdateToOneWithWhereWithoutItemsInput = {
    where?: RankingListWhereInput
    data: XOR<RankingListUpdateWithoutItemsInput, RankingListUncheckedUpdateWithoutItemsInput>
  }

  export type RankingListUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumListStatusFieldUpdateOperationsInput | $Enums.ListStatus
    listImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayOrder?: NullableIntFieldUpdateOperationsInput | number | null
    likeCount?: IntFieldUpdateOperationsInput | number
    feedItems?: FeedItemUpdateManyWithoutRankingListNestedInput
    likes?: LikeUpdateManyWithoutRankingListNestedInput
    author?: UserUpdateOneRequiredWithoutRankingListsNestedInput
    rankingListTags?: RankingListTagUpdateManyWithoutListNestedInput
  }

  export type RankingListUncheckedUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumListStatusFieldUpdateOperationsInput | $Enums.ListStatus
    listImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayOrder?: NullableIntFieldUpdateOperationsInput | number | null
    likeCount?: IntFieldUpdateOperationsInput | number
    feedItems?: FeedItemUncheckedUpdateManyWithoutRankingListNestedInput
    likes?: LikeUncheckedUpdateManyWithoutRankingListNestedInput
    rankingListTags?: RankingListTagUncheckedUpdateManyWithoutListNestedInput
  }

  export type RankingListCreateWithoutRankingListTagsInput = {
    id?: string
    subject: string
    description?: string | null
    status?: $Enums.ListStatus
    listImageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    displayOrder?: number | null
    likeCount?: number
    feedItems?: FeedItemCreateNestedManyWithoutRankingListInput
    likes?: LikeCreateNestedManyWithoutRankingListInput
    items?: RankedItemCreateNestedManyWithoutRankingListInput
    author: UserCreateNestedOneWithoutRankingListsInput
  }

  export type RankingListUncheckedCreateWithoutRankingListTagsInput = {
    id?: string
    subject: string
    description?: string | null
    status?: $Enums.ListStatus
    listImageUrl?: string | null
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    displayOrder?: number | null
    likeCount?: number
    feedItems?: FeedItemUncheckedCreateNestedManyWithoutRankingListInput
    likes?: LikeUncheckedCreateNestedManyWithoutRankingListInput
    items?: RankedItemUncheckedCreateNestedManyWithoutRankingListInput
  }

  export type RankingListCreateOrConnectWithoutRankingListTagsInput = {
    where: RankingListWhereUniqueInput
    create: XOR<RankingListCreateWithoutRankingListTagsInput, RankingListUncheckedCreateWithoutRankingListTagsInput>
  }

  export type TagCreateWithoutRankingListTagsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    trendingStats?: TrendingTagCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateWithoutRankingListTagsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    trendingStats?: TrendingTagUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagCreateOrConnectWithoutRankingListTagsInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutRankingListTagsInput, TagUncheckedCreateWithoutRankingListTagsInput>
  }

  export type RankingListUpsertWithoutRankingListTagsInput = {
    update: XOR<RankingListUpdateWithoutRankingListTagsInput, RankingListUncheckedUpdateWithoutRankingListTagsInput>
    create: XOR<RankingListCreateWithoutRankingListTagsInput, RankingListUncheckedCreateWithoutRankingListTagsInput>
    where?: RankingListWhereInput
  }

  export type RankingListUpdateToOneWithWhereWithoutRankingListTagsInput = {
    where?: RankingListWhereInput
    data: XOR<RankingListUpdateWithoutRankingListTagsInput, RankingListUncheckedUpdateWithoutRankingListTagsInput>
  }

  export type RankingListUpdateWithoutRankingListTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumListStatusFieldUpdateOperationsInput | $Enums.ListStatus
    listImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayOrder?: NullableIntFieldUpdateOperationsInput | number | null
    likeCount?: IntFieldUpdateOperationsInput | number
    feedItems?: FeedItemUpdateManyWithoutRankingListNestedInput
    likes?: LikeUpdateManyWithoutRankingListNestedInput
    items?: RankedItemUpdateManyWithoutRankingListNestedInput
    author?: UserUpdateOneRequiredWithoutRankingListsNestedInput
  }

  export type RankingListUncheckedUpdateWithoutRankingListTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumListStatusFieldUpdateOperationsInput | $Enums.ListStatus
    listImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayOrder?: NullableIntFieldUpdateOperationsInput | number | null
    likeCount?: IntFieldUpdateOperationsInput | number
    feedItems?: FeedItemUncheckedUpdateManyWithoutRankingListNestedInput
    likes?: LikeUncheckedUpdateManyWithoutRankingListNestedInput
    items?: RankedItemUncheckedUpdateManyWithoutRankingListNestedInput
  }

  export type TagUpsertWithoutRankingListTagsInput = {
    update: XOR<TagUpdateWithoutRankingListTagsInput, TagUncheckedUpdateWithoutRankingListTagsInput>
    create: XOR<TagCreateWithoutRankingListTagsInput, TagUncheckedCreateWithoutRankingListTagsInput>
    where?: TagWhereInput
  }

  export type TagUpdateToOneWithWhereWithoutRankingListTagsInput = {
    where?: TagWhereInput
    data: XOR<TagUpdateWithoutRankingListTagsInput, TagUncheckedUpdateWithoutRankingListTagsInput>
  }

  export type TagUpdateWithoutRankingListTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trendingStats?: TrendingTagUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateWithoutRankingListTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trendingStats?: TrendingTagUncheckedUpdateManyWithoutTagNestedInput
  }

  export type UserCreateWithoutRankingListCommentsInput = {
    id?: string
    clerkId: string
    username: string
    name?: string | null
    bio?: string | null
    image?: string | null
    coverImageUrl?: string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    birthday?: Date | string | null
    location?: string | null
    feedItems?: FeedItemCreateNestedManyWithoutUserInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    followedBy?: FollowCreateNestedManyWithoutFollowingInput
    receivedFollowRequests?: FollowRequestCreateNestedManyWithoutRequestedInput
    sentFollowRequests?: FollowRequestCreateNestedManyWithoutRequesterInput
    likes?: LikeCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    rankingLists?: RankingListCreateNestedManyWithoutAuthorInput
    replies?: ReplyCreateNestedManyWithoutUserInput
    retweets?: RetweetCreateNestedManyWithoutUserInput
    averageItemComments?: AverageItemCommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRankingListCommentsInput = {
    id?: string
    clerkId: string
    username: string
    name?: string | null
    bio?: string | null
    image?: string | null
    coverImageUrl?: string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    birthday?: Date | string | null
    location?: string | null
    feedItems?: FeedItemUncheckedCreateNestedManyWithoutUserInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followedBy?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    receivedFollowRequests?: FollowRequestUncheckedCreateNestedManyWithoutRequestedInput
    sentFollowRequests?: FollowRequestUncheckedCreateNestedManyWithoutRequesterInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    rankingLists?: RankingListUncheckedCreateNestedManyWithoutAuthorInput
    replies?: ReplyUncheckedCreateNestedManyWithoutUserInput
    retweets?: RetweetUncheckedCreateNestedManyWithoutUserInput
    averageItemComments?: AverageItemCommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRankingListCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRankingListCommentsInput, UserUncheckedCreateWithoutRankingListCommentsInput>
  }

  export type UserUpsertWithoutRankingListCommentsInput = {
    update: XOR<UserUpdateWithoutRankingListCommentsInput, UserUncheckedUpdateWithoutRankingListCommentsInput>
    create: XOR<UserCreateWithoutRankingListCommentsInput, UserUncheckedCreateWithoutRankingListCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRankingListCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRankingListCommentsInput, UserUncheckedUpdateWithoutRankingListCommentsInput>
  }

  export type UserUpdateWithoutRankingListCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    feedItems?: FeedItemUpdateManyWithoutUserNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    followedBy?: FollowUpdateManyWithoutFollowingNestedInput
    receivedFollowRequests?: FollowRequestUpdateManyWithoutRequestedNestedInput
    sentFollowRequests?: FollowRequestUpdateManyWithoutRequesterNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    rankingLists?: RankingListUpdateManyWithoutAuthorNestedInput
    replies?: ReplyUpdateManyWithoutUserNestedInput
    retweets?: RetweetUpdateManyWithoutUserNestedInput
    averageItemComments?: AverageItemCommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRankingListCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    feedItems?: FeedItemUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followedBy?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    receivedFollowRequests?: FollowRequestUncheckedUpdateManyWithoutRequestedNestedInput
    sentFollowRequests?: FollowRequestUncheckedUpdateManyWithoutRequesterNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    rankingLists?: RankingListUncheckedUpdateManyWithoutAuthorNestedInput
    replies?: ReplyUncheckedUpdateManyWithoutUserNestedInput
    retweets?: RetweetUncheckedUpdateManyWithoutUserNestedInput
    averageItemComments?: AverageItemCommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TagCreateWithoutTrendingStatsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    rankingListTags?: RankingListTagCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateWithoutTrendingStatsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    rankingListTags?: RankingListTagUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagCreateOrConnectWithoutTrendingStatsInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutTrendingStatsInput, TagUncheckedCreateWithoutTrendingStatsInput>
  }

  export type TagUpsertWithoutTrendingStatsInput = {
    update: XOR<TagUpdateWithoutTrendingStatsInput, TagUncheckedUpdateWithoutTrendingStatsInput>
    create: XOR<TagCreateWithoutTrendingStatsInput, TagUncheckedCreateWithoutTrendingStatsInput>
    where?: TagWhereInput
  }

  export type TagUpdateToOneWithWhereWithoutTrendingStatsInput = {
    where?: TagWhereInput
    data: XOR<TagUpdateWithoutTrendingStatsInput, TagUncheckedUpdateWithoutTrendingStatsInput>
  }

  export type TagUpdateWithoutTrendingStatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rankingListTags?: RankingListTagUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateWithoutTrendingStatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rankingListTags?: RankingListTagUncheckedUpdateManyWithoutTagNestedInput
  }

  export type UserCreateWithoutAverageItemCommentsInput = {
    id?: string
    clerkId: string
    username: string
    name?: string | null
    bio?: string | null
    image?: string | null
    coverImageUrl?: string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    birthday?: Date | string | null
    location?: string | null
    feedItems?: FeedItemCreateNestedManyWithoutUserInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    followedBy?: FollowCreateNestedManyWithoutFollowingInput
    receivedFollowRequests?: FollowRequestCreateNestedManyWithoutRequestedInput
    sentFollowRequests?: FollowRequestCreateNestedManyWithoutRequesterInput
    likes?: LikeCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    rankingLists?: RankingListCreateNestedManyWithoutAuthorInput
    replies?: ReplyCreateNestedManyWithoutUserInput
    retweets?: RetweetCreateNestedManyWithoutUserInput
    rankingListComments?: RankingListCommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAverageItemCommentsInput = {
    id?: string
    clerkId: string
    username: string
    name?: string | null
    bio?: string | null
    image?: string | null
    coverImageUrl?: string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    birthday?: Date | string | null
    location?: string | null
    feedItems?: FeedItemUncheckedCreateNestedManyWithoutUserInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followedBy?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    receivedFollowRequests?: FollowRequestUncheckedCreateNestedManyWithoutRequestedInput
    sentFollowRequests?: FollowRequestUncheckedCreateNestedManyWithoutRequesterInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    rankingLists?: RankingListUncheckedCreateNestedManyWithoutAuthorInput
    replies?: ReplyUncheckedCreateNestedManyWithoutUserInput
    retweets?: RetweetUncheckedCreateNestedManyWithoutUserInput
    rankingListComments?: RankingListCommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAverageItemCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAverageItemCommentsInput, UserUncheckedCreateWithoutAverageItemCommentsInput>
  }

  export type UserUpsertWithoutAverageItemCommentsInput = {
    update: XOR<UserUpdateWithoutAverageItemCommentsInput, UserUncheckedUpdateWithoutAverageItemCommentsInput>
    create: XOR<UserCreateWithoutAverageItemCommentsInput, UserUncheckedCreateWithoutAverageItemCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAverageItemCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAverageItemCommentsInput, UserUncheckedUpdateWithoutAverageItemCommentsInput>
  }

  export type UserUpdateWithoutAverageItemCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    feedItems?: FeedItemUpdateManyWithoutUserNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    followedBy?: FollowUpdateManyWithoutFollowingNestedInput
    receivedFollowRequests?: FollowRequestUpdateManyWithoutRequestedNestedInput
    sentFollowRequests?: FollowRequestUpdateManyWithoutRequesterNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    rankingLists?: RankingListUpdateManyWithoutAuthorNestedInput
    replies?: ReplyUpdateManyWithoutUserNestedInput
    retweets?: RetweetUpdateManyWithoutUserNestedInput
    rankingListComments?: RankingListCommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAverageItemCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    feedItems?: FeedItemUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followedBy?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    receivedFollowRequests?: FollowRequestUncheckedUpdateManyWithoutRequestedNestedInput
    sentFollowRequests?: FollowRequestUncheckedUpdateManyWithoutRequesterNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    rankingLists?: RankingListUncheckedUpdateManyWithoutAuthorNestedInput
    replies?: ReplyUncheckedUpdateManyWithoutUserNestedInput
    retweets?: RetweetUncheckedUpdateManyWithoutUserNestedInput
    rankingListComments?: RankingListCommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FeedItemCreateWithoutPostInput = {
    id?: string
    type: $Enums.FeedType
    createdAt?: Date | string
    updatedAt?: Date | string
    quoteRetweetCount?: number
    rankingList?: RankingListCreateNestedOneWithoutFeedItemsInput
    user: UserCreateNestedOneWithoutFeedItemsInput
    quotedFeedItem?: FeedItemCreateNestedOneWithoutQuotedByItemsInput
    quotedByItems?: FeedItemCreateNestedManyWithoutQuotedFeedItemInput
    retweetOfFeedItem?: FeedItemCreateNestedOneWithoutRetweetedByItemsInput
    retweetedByItems?: FeedItemCreateNestedManyWithoutRetweetOfFeedItemInput
    retweets?: RetweetCreateNestedManyWithoutFeedItemInput
  }

  export type FeedItemUncheckedCreateWithoutPostInput = {
    id?: string
    type: $Enums.FeedType
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    rankingListId?: string | null
    retweetOfFeedItemId?: string | null
    quotedFeedItemId?: string | null
    quoteRetweetCount?: number
    quotedByItems?: FeedItemUncheckedCreateNestedManyWithoutQuotedFeedItemInput
    retweetedByItems?: FeedItemUncheckedCreateNestedManyWithoutRetweetOfFeedItemInput
    retweets?: RetweetUncheckedCreateNestedManyWithoutFeedItemInput
  }

  export type FeedItemCreateOrConnectWithoutPostInput = {
    where: FeedItemWhereUniqueInput
    create: XOR<FeedItemCreateWithoutPostInput, FeedItemUncheckedCreateWithoutPostInput>
  }

  export type FeedItemCreateManyPostInputEnvelope = {
    data: FeedItemCreateManyPostInput | FeedItemCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type LikeCreateWithoutPostInput = {
    id?: string
    createdAt?: Date | string
    rankingList?: RankingListCreateNestedOneWithoutLikesInput
    user: UserCreateNestedOneWithoutLikesInput
  }

  export type LikeUncheckedCreateWithoutPostInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    rankingListId?: string | null
  }

  export type LikeCreateOrConnectWithoutPostInput = {
    where: LikeWhereUniqueInput
    create: XOR<LikeCreateWithoutPostInput, LikeUncheckedCreateWithoutPostInput>
  }

  export type LikeCreateManyPostInputEnvelope = {
    data: LikeCreateManyPostInput | LikeCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutPostsInput = {
    id?: string
    clerkId: string
    username: string
    name?: string | null
    bio?: string | null
    image?: string | null
    coverImageUrl?: string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    birthday?: Date | string | null
    location?: string | null
    feedItems?: FeedItemCreateNestedManyWithoutUserInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    followedBy?: FollowCreateNestedManyWithoutFollowingInput
    receivedFollowRequests?: FollowRequestCreateNestedManyWithoutRequestedInput
    sentFollowRequests?: FollowRequestCreateNestedManyWithoutRequesterInput
    likes?: LikeCreateNestedManyWithoutUserInput
    rankingLists?: RankingListCreateNestedManyWithoutAuthorInput
    replies?: ReplyCreateNestedManyWithoutUserInput
    retweets?: RetweetCreateNestedManyWithoutUserInput
    rankingListComments?: RankingListCommentCreateNestedManyWithoutUserInput
    averageItemComments?: AverageItemCommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPostsInput = {
    id?: string
    clerkId: string
    username: string
    name?: string | null
    bio?: string | null
    image?: string | null
    coverImageUrl?: string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    birthday?: Date | string | null
    location?: string | null
    feedItems?: FeedItemUncheckedCreateNestedManyWithoutUserInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followedBy?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    receivedFollowRequests?: FollowRequestUncheckedCreateNestedManyWithoutRequestedInput
    sentFollowRequests?: FollowRequestUncheckedCreateNestedManyWithoutRequesterInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    rankingLists?: RankingListUncheckedCreateNestedManyWithoutAuthorInput
    replies?: ReplyUncheckedCreateNestedManyWithoutUserInput
    retweets?: RetweetUncheckedCreateNestedManyWithoutUserInput
    rankingListComments?: RankingListCommentUncheckedCreateNestedManyWithoutUserInput
    averageItemComments?: AverageItemCommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPostsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
  }

  export type ReplyCreateWithoutPostInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutRepliesInput
  }

  export type ReplyUncheckedCreateWithoutPostInput = {
    id?: string
    content: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReplyCreateOrConnectWithoutPostInput = {
    where: ReplyWhereUniqueInput
    create: XOR<ReplyCreateWithoutPostInput, ReplyUncheckedCreateWithoutPostInput>
  }

  export type ReplyCreateManyPostInputEnvelope = {
    data: ReplyCreateManyPostInput | ReplyCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type FeedItemUpsertWithWhereUniqueWithoutPostInput = {
    where: FeedItemWhereUniqueInput
    update: XOR<FeedItemUpdateWithoutPostInput, FeedItemUncheckedUpdateWithoutPostInput>
    create: XOR<FeedItemCreateWithoutPostInput, FeedItemUncheckedCreateWithoutPostInput>
  }

  export type FeedItemUpdateWithWhereUniqueWithoutPostInput = {
    where: FeedItemWhereUniqueInput
    data: XOR<FeedItemUpdateWithoutPostInput, FeedItemUncheckedUpdateWithoutPostInput>
  }

  export type FeedItemUpdateManyWithWhereWithoutPostInput = {
    where: FeedItemScalarWhereInput
    data: XOR<FeedItemUpdateManyMutationInput, FeedItemUncheckedUpdateManyWithoutPostInput>
  }

  export type LikeUpsertWithWhereUniqueWithoutPostInput = {
    where: LikeWhereUniqueInput
    update: XOR<LikeUpdateWithoutPostInput, LikeUncheckedUpdateWithoutPostInput>
    create: XOR<LikeCreateWithoutPostInput, LikeUncheckedCreateWithoutPostInput>
  }

  export type LikeUpdateWithWhereUniqueWithoutPostInput = {
    where: LikeWhereUniqueInput
    data: XOR<LikeUpdateWithoutPostInput, LikeUncheckedUpdateWithoutPostInput>
  }

  export type LikeUpdateManyWithWhereWithoutPostInput = {
    where: LikeScalarWhereInput
    data: XOR<LikeUpdateManyMutationInput, LikeUncheckedUpdateManyWithoutPostInput>
  }

  export type UserUpsertWithoutPostsInput = {
    update: XOR<UserUpdateWithoutPostsInput, UserUncheckedUpdateWithoutPostsInput>
    create: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPostsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPostsInput, UserUncheckedUpdateWithoutPostsInput>
  }

  export type UserUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    feedItems?: FeedItemUpdateManyWithoutUserNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    followedBy?: FollowUpdateManyWithoutFollowingNestedInput
    receivedFollowRequests?: FollowRequestUpdateManyWithoutRequestedNestedInput
    sentFollowRequests?: FollowRequestUpdateManyWithoutRequesterNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    rankingLists?: RankingListUpdateManyWithoutAuthorNestedInput
    replies?: ReplyUpdateManyWithoutUserNestedInput
    retweets?: RetweetUpdateManyWithoutUserNestedInput
    rankingListComments?: RankingListCommentUpdateManyWithoutUserNestedInput
    averageItemComments?: AverageItemCommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    feedItems?: FeedItemUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followedBy?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    receivedFollowRequests?: FollowRequestUncheckedUpdateManyWithoutRequestedNestedInput
    sentFollowRequests?: FollowRequestUncheckedUpdateManyWithoutRequesterNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    rankingLists?: RankingListUncheckedUpdateManyWithoutAuthorNestedInput
    replies?: ReplyUncheckedUpdateManyWithoutUserNestedInput
    retweets?: RetweetUncheckedUpdateManyWithoutUserNestedInput
    rankingListComments?: RankingListCommentUncheckedUpdateManyWithoutUserNestedInput
    averageItemComments?: AverageItemCommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ReplyUpsertWithWhereUniqueWithoutPostInput = {
    where: ReplyWhereUniqueInput
    update: XOR<ReplyUpdateWithoutPostInput, ReplyUncheckedUpdateWithoutPostInput>
    create: XOR<ReplyCreateWithoutPostInput, ReplyUncheckedCreateWithoutPostInput>
  }

  export type ReplyUpdateWithWhereUniqueWithoutPostInput = {
    where: ReplyWhereUniqueInput
    data: XOR<ReplyUpdateWithoutPostInput, ReplyUncheckedUpdateWithoutPostInput>
  }

  export type ReplyUpdateManyWithWhereWithoutPostInput = {
    where: ReplyScalarWhereInput
    data: XOR<ReplyUpdateManyMutationInput, ReplyUncheckedUpdateManyWithoutPostInput>
  }

  export type FeedItemCreateWithoutRetweetsInput = {
    id?: string
    type: $Enums.FeedType
    createdAt?: Date | string
    updatedAt?: Date | string
    quoteRetweetCount?: number
    post?: PostCreateNestedOneWithoutFeedItemsInput
    rankingList?: RankingListCreateNestedOneWithoutFeedItemsInput
    user: UserCreateNestedOneWithoutFeedItemsInput
    quotedFeedItem?: FeedItemCreateNestedOneWithoutQuotedByItemsInput
    quotedByItems?: FeedItemCreateNestedManyWithoutQuotedFeedItemInput
    retweetOfFeedItem?: FeedItemCreateNestedOneWithoutRetweetedByItemsInput
    retweetedByItems?: FeedItemCreateNestedManyWithoutRetweetOfFeedItemInput
  }

  export type FeedItemUncheckedCreateWithoutRetweetsInput = {
    id?: string
    type: $Enums.FeedType
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    postId?: string | null
    rankingListId?: string | null
    retweetOfFeedItemId?: string | null
    quotedFeedItemId?: string | null
    quoteRetweetCount?: number
    quotedByItems?: FeedItemUncheckedCreateNestedManyWithoutQuotedFeedItemInput
    retweetedByItems?: FeedItemUncheckedCreateNestedManyWithoutRetweetOfFeedItemInput
  }

  export type FeedItemCreateOrConnectWithoutRetweetsInput = {
    where: FeedItemWhereUniqueInput
    create: XOR<FeedItemCreateWithoutRetweetsInput, FeedItemUncheckedCreateWithoutRetweetsInput>
  }

  export type UserCreateWithoutRetweetsInput = {
    id?: string
    clerkId: string
    username: string
    name?: string | null
    bio?: string | null
    image?: string | null
    coverImageUrl?: string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    birthday?: Date | string | null
    location?: string | null
    feedItems?: FeedItemCreateNestedManyWithoutUserInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    followedBy?: FollowCreateNestedManyWithoutFollowingInput
    receivedFollowRequests?: FollowRequestCreateNestedManyWithoutRequestedInput
    sentFollowRequests?: FollowRequestCreateNestedManyWithoutRequesterInput
    likes?: LikeCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    rankingLists?: RankingListCreateNestedManyWithoutAuthorInput
    replies?: ReplyCreateNestedManyWithoutUserInput
    rankingListComments?: RankingListCommentCreateNestedManyWithoutUserInput
    averageItemComments?: AverageItemCommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRetweetsInput = {
    id?: string
    clerkId: string
    username: string
    name?: string | null
    bio?: string | null
    image?: string | null
    coverImageUrl?: string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    birthday?: Date | string | null
    location?: string | null
    feedItems?: FeedItemUncheckedCreateNestedManyWithoutUserInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followedBy?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    receivedFollowRequests?: FollowRequestUncheckedCreateNestedManyWithoutRequestedInput
    sentFollowRequests?: FollowRequestUncheckedCreateNestedManyWithoutRequesterInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    rankingLists?: RankingListUncheckedCreateNestedManyWithoutAuthorInput
    replies?: ReplyUncheckedCreateNestedManyWithoutUserInput
    rankingListComments?: RankingListCommentUncheckedCreateNestedManyWithoutUserInput
    averageItemComments?: AverageItemCommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRetweetsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRetweetsInput, UserUncheckedCreateWithoutRetweetsInput>
  }

  export type FeedItemUpsertWithoutRetweetsInput = {
    update: XOR<FeedItemUpdateWithoutRetweetsInput, FeedItemUncheckedUpdateWithoutRetweetsInput>
    create: XOR<FeedItemCreateWithoutRetweetsInput, FeedItemUncheckedCreateWithoutRetweetsInput>
    where?: FeedItemWhereInput
  }

  export type FeedItemUpdateToOneWithWhereWithoutRetweetsInput = {
    where?: FeedItemWhereInput
    data: XOR<FeedItemUpdateWithoutRetweetsInput, FeedItemUncheckedUpdateWithoutRetweetsInput>
  }

  export type FeedItemUpdateWithoutRetweetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumFeedTypeFieldUpdateOperationsInput | $Enums.FeedType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quoteRetweetCount?: IntFieldUpdateOperationsInput | number
    post?: PostUpdateOneWithoutFeedItemsNestedInput
    rankingList?: RankingListUpdateOneWithoutFeedItemsNestedInput
    user?: UserUpdateOneRequiredWithoutFeedItemsNestedInput
    quotedFeedItem?: FeedItemUpdateOneWithoutQuotedByItemsNestedInput
    quotedByItems?: FeedItemUpdateManyWithoutQuotedFeedItemNestedInput
    retweetOfFeedItem?: FeedItemUpdateOneWithoutRetweetedByItemsNestedInput
    retweetedByItems?: FeedItemUpdateManyWithoutRetweetOfFeedItemNestedInput
  }

  export type FeedItemUncheckedUpdateWithoutRetweetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumFeedTypeFieldUpdateOperationsInput | $Enums.FeedType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    rankingListId?: NullableStringFieldUpdateOperationsInput | string | null
    retweetOfFeedItemId?: NullableStringFieldUpdateOperationsInput | string | null
    quotedFeedItemId?: NullableStringFieldUpdateOperationsInput | string | null
    quoteRetweetCount?: IntFieldUpdateOperationsInput | number
    quotedByItems?: FeedItemUncheckedUpdateManyWithoutQuotedFeedItemNestedInput
    retweetedByItems?: FeedItemUncheckedUpdateManyWithoutRetweetOfFeedItemNestedInput
  }

  export type UserUpsertWithoutRetweetsInput = {
    update: XOR<UserUpdateWithoutRetweetsInput, UserUncheckedUpdateWithoutRetweetsInput>
    create: XOR<UserCreateWithoutRetweetsInput, UserUncheckedCreateWithoutRetweetsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRetweetsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRetweetsInput, UserUncheckedUpdateWithoutRetweetsInput>
  }

  export type UserUpdateWithoutRetweetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    feedItems?: FeedItemUpdateManyWithoutUserNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    followedBy?: FollowUpdateManyWithoutFollowingNestedInput
    receivedFollowRequests?: FollowRequestUpdateManyWithoutRequestedNestedInput
    sentFollowRequests?: FollowRequestUpdateManyWithoutRequesterNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    rankingLists?: RankingListUpdateManyWithoutAuthorNestedInput
    replies?: ReplyUpdateManyWithoutUserNestedInput
    rankingListComments?: RankingListCommentUpdateManyWithoutUserNestedInput
    averageItemComments?: AverageItemCommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRetweetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    feedItems?: FeedItemUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followedBy?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    receivedFollowRequests?: FollowRequestUncheckedUpdateManyWithoutRequestedNestedInput
    sentFollowRequests?: FollowRequestUncheckedUpdateManyWithoutRequesterNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    rankingLists?: RankingListUncheckedUpdateManyWithoutAuthorNestedInput
    replies?: ReplyUncheckedUpdateManyWithoutUserNestedInput
    rankingListComments?: RankingListCommentUncheckedUpdateManyWithoutUserNestedInput
    averageItemComments?: AverageItemCommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PostCreateWithoutFeedItemsInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    likeCount?: number
    imageUrl?: string | null
    likes?: LikeCreateNestedManyWithoutPostInput
    author: UserCreateNestedOneWithoutPostsInput
    replies?: ReplyCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutFeedItemsInput = {
    id?: string
    content: string
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    likeCount?: number
    imageUrl?: string | null
    likes?: LikeUncheckedCreateNestedManyWithoutPostInput
    replies?: ReplyUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutFeedItemsInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutFeedItemsInput, PostUncheckedCreateWithoutFeedItemsInput>
  }

  export type RankingListCreateWithoutFeedItemsInput = {
    id?: string
    subject: string
    description?: string | null
    status?: $Enums.ListStatus
    listImageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    displayOrder?: number | null
    likeCount?: number
    likes?: LikeCreateNestedManyWithoutRankingListInput
    items?: RankedItemCreateNestedManyWithoutRankingListInput
    author: UserCreateNestedOneWithoutRankingListsInput
    rankingListTags?: RankingListTagCreateNestedManyWithoutListInput
  }

  export type RankingListUncheckedCreateWithoutFeedItemsInput = {
    id?: string
    subject: string
    description?: string | null
    status?: $Enums.ListStatus
    listImageUrl?: string | null
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    displayOrder?: number | null
    likeCount?: number
    likes?: LikeUncheckedCreateNestedManyWithoutRankingListInput
    items?: RankedItemUncheckedCreateNestedManyWithoutRankingListInput
    rankingListTags?: RankingListTagUncheckedCreateNestedManyWithoutListInput
  }

  export type RankingListCreateOrConnectWithoutFeedItemsInput = {
    where: RankingListWhereUniqueInput
    create: XOR<RankingListCreateWithoutFeedItemsInput, RankingListUncheckedCreateWithoutFeedItemsInput>
  }

  export type UserCreateWithoutFeedItemsInput = {
    id?: string
    clerkId: string
    username: string
    name?: string | null
    bio?: string | null
    image?: string | null
    coverImageUrl?: string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    birthday?: Date | string | null
    location?: string | null
    following?: FollowCreateNestedManyWithoutFollowerInput
    followedBy?: FollowCreateNestedManyWithoutFollowingInput
    receivedFollowRequests?: FollowRequestCreateNestedManyWithoutRequestedInput
    sentFollowRequests?: FollowRequestCreateNestedManyWithoutRequesterInput
    likes?: LikeCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    rankingLists?: RankingListCreateNestedManyWithoutAuthorInput
    replies?: ReplyCreateNestedManyWithoutUserInput
    retweets?: RetweetCreateNestedManyWithoutUserInput
    rankingListComments?: RankingListCommentCreateNestedManyWithoutUserInput
    averageItemComments?: AverageItemCommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFeedItemsInput = {
    id?: string
    clerkId: string
    username: string
    name?: string | null
    bio?: string | null
    image?: string | null
    coverImageUrl?: string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    birthday?: Date | string | null
    location?: string | null
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followedBy?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    receivedFollowRequests?: FollowRequestUncheckedCreateNestedManyWithoutRequestedInput
    sentFollowRequests?: FollowRequestUncheckedCreateNestedManyWithoutRequesterInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    rankingLists?: RankingListUncheckedCreateNestedManyWithoutAuthorInput
    replies?: ReplyUncheckedCreateNestedManyWithoutUserInput
    retweets?: RetweetUncheckedCreateNestedManyWithoutUserInput
    rankingListComments?: RankingListCommentUncheckedCreateNestedManyWithoutUserInput
    averageItemComments?: AverageItemCommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFeedItemsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFeedItemsInput, UserUncheckedCreateWithoutFeedItemsInput>
  }

  export type FeedItemCreateWithoutQuotedByItemsInput = {
    id?: string
    type: $Enums.FeedType
    createdAt?: Date | string
    updatedAt?: Date | string
    quoteRetweetCount?: number
    post?: PostCreateNestedOneWithoutFeedItemsInput
    rankingList?: RankingListCreateNestedOneWithoutFeedItemsInput
    user: UserCreateNestedOneWithoutFeedItemsInput
    quotedFeedItem?: FeedItemCreateNestedOneWithoutQuotedByItemsInput
    retweetOfFeedItem?: FeedItemCreateNestedOneWithoutRetweetedByItemsInput
    retweetedByItems?: FeedItemCreateNestedManyWithoutRetweetOfFeedItemInput
    retweets?: RetweetCreateNestedManyWithoutFeedItemInput
  }

  export type FeedItemUncheckedCreateWithoutQuotedByItemsInput = {
    id?: string
    type: $Enums.FeedType
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    postId?: string | null
    rankingListId?: string | null
    retweetOfFeedItemId?: string | null
    quotedFeedItemId?: string | null
    quoteRetweetCount?: number
    retweetedByItems?: FeedItemUncheckedCreateNestedManyWithoutRetweetOfFeedItemInput
    retweets?: RetweetUncheckedCreateNestedManyWithoutFeedItemInput
  }

  export type FeedItemCreateOrConnectWithoutQuotedByItemsInput = {
    where: FeedItemWhereUniqueInput
    create: XOR<FeedItemCreateWithoutQuotedByItemsInput, FeedItemUncheckedCreateWithoutQuotedByItemsInput>
  }

  export type FeedItemCreateWithoutQuotedFeedItemInput = {
    id?: string
    type: $Enums.FeedType
    createdAt?: Date | string
    updatedAt?: Date | string
    quoteRetweetCount?: number
    post?: PostCreateNestedOneWithoutFeedItemsInput
    rankingList?: RankingListCreateNestedOneWithoutFeedItemsInput
    user: UserCreateNestedOneWithoutFeedItemsInput
    quotedByItems?: FeedItemCreateNestedManyWithoutQuotedFeedItemInput
    retweetOfFeedItem?: FeedItemCreateNestedOneWithoutRetweetedByItemsInput
    retweetedByItems?: FeedItemCreateNestedManyWithoutRetweetOfFeedItemInput
    retweets?: RetweetCreateNestedManyWithoutFeedItemInput
  }

  export type FeedItemUncheckedCreateWithoutQuotedFeedItemInput = {
    id?: string
    type: $Enums.FeedType
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    postId?: string | null
    rankingListId?: string | null
    retweetOfFeedItemId?: string | null
    quoteRetweetCount?: number
    quotedByItems?: FeedItemUncheckedCreateNestedManyWithoutQuotedFeedItemInput
    retweetedByItems?: FeedItemUncheckedCreateNestedManyWithoutRetweetOfFeedItemInput
    retweets?: RetweetUncheckedCreateNestedManyWithoutFeedItemInput
  }

  export type FeedItemCreateOrConnectWithoutQuotedFeedItemInput = {
    where: FeedItemWhereUniqueInput
    create: XOR<FeedItemCreateWithoutQuotedFeedItemInput, FeedItemUncheckedCreateWithoutQuotedFeedItemInput>
  }

  export type FeedItemCreateManyQuotedFeedItemInputEnvelope = {
    data: FeedItemCreateManyQuotedFeedItemInput | FeedItemCreateManyQuotedFeedItemInput[]
    skipDuplicates?: boolean
  }

  export type FeedItemCreateWithoutRetweetedByItemsInput = {
    id?: string
    type: $Enums.FeedType
    createdAt?: Date | string
    updatedAt?: Date | string
    quoteRetweetCount?: number
    post?: PostCreateNestedOneWithoutFeedItemsInput
    rankingList?: RankingListCreateNestedOneWithoutFeedItemsInput
    user: UserCreateNestedOneWithoutFeedItemsInput
    quotedFeedItem?: FeedItemCreateNestedOneWithoutQuotedByItemsInput
    quotedByItems?: FeedItemCreateNestedManyWithoutQuotedFeedItemInput
    retweetOfFeedItem?: FeedItemCreateNestedOneWithoutRetweetedByItemsInput
    retweets?: RetweetCreateNestedManyWithoutFeedItemInput
  }

  export type FeedItemUncheckedCreateWithoutRetweetedByItemsInput = {
    id?: string
    type: $Enums.FeedType
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    postId?: string | null
    rankingListId?: string | null
    retweetOfFeedItemId?: string | null
    quotedFeedItemId?: string | null
    quoteRetweetCount?: number
    quotedByItems?: FeedItemUncheckedCreateNestedManyWithoutQuotedFeedItemInput
    retweets?: RetweetUncheckedCreateNestedManyWithoutFeedItemInput
  }

  export type FeedItemCreateOrConnectWithoutRetweetedByItemsInput = {
    where: FeedItemWhereUniqueInput
    create: XOR<FeedItemCreateWithoutRetweetedByItemsInput, FeedItemUncheckedCreateWithoutRetweetedByItemsInput>
  }

  export type FeedItemCreateWithoutRetweetOfFeedItemInput = {
    id?: string
    type: $Enums.FeedType
    createdAt?: Date | string
    updatedAt?: Date | string
    quoteRetweetCount?: number
    post?: PostCreateNestedOneWithoutFeedItemsInput
    rankingList?: RankingListCreateNestedOneWithoutFeedItemsInput
    user: UserCreateNestedOneWithoutFeedItemsInput
    quotedFeedItem?: FeedItemCreateNestedOneWithoutQuotedByItemsInput
    quotedByItems?: FeedItemCreateNestedManyWithoutQuotedFeedItemInput
    retweetedByItems?: FeedItemCreateNestedManyWithoutRetweetOfFeedItemInput
    retweets?: RetweetCreateNestedManyWithoutFeedItemInput
  }

  export type FeedItemUncheckedCreateWithoutRetweetOfFeedItemInput = {
    id?: string
    type: $Enums.FeedType
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    postId?: string | null
    rankingListId?: string | null
    quotedFeedItemId?: string | null
    quoteRetweetCount?: number
    quotedByItems?: FeedItemUncheckedCreateNestedManyWithoutQuotedFeedItemInput
    retweetedByItems?: FeedItemUncheckedCreateNestedManyWithoutRetweetOfFeedItemInput
    retweets?: RetweetUncheckedCreateNestedManyWithoutFeedItemInput
  }

  export type FeedItemCreateOrConnectWithoutRetweetOfFeedItemInput = {
    where: FeedItemWhereUniqueInput
    create: XOR<FeedItemCreateWithoutRetweetOfFeedItemInput, FeedItemUncheckedCreateWithoutRetweetOfFeedItemInput>
  }

  export type FeedItemCreateManyRetweetOfFeedItemInputEnvelope = {
    data: FeedItemCreateManyRetweetOfFeedItemInput | FeedItemCreateManyRetweetOfFeedItemInput[]
    skipDuplicates?: boolean
  }

  export type RetweetCreateWithoutFeedItemInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutRetweetsInput
  }

  export type RetweetUncheckedCreateWithoutFeedItemInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type RetweetCreateOrConnectWithoutFeedItemInput = {
    where: RetweetWhereUniqueInput
    create: XOR<RetweetCreateWithoutFeedItemInput, RetweetUncheckedCreateWithoutFeedItemInput>
  }

  export type RetweetCreateManyFeedItemInputEnvelope = {
    data: RetweetCreateManyFeedItemInput | RetweetCreateManyFeedItemInput[]
    skipDuplicates?: boolean
  }

  export type PostUpsertWithoutFeedItemsInput = {
    update: XOR<PostUpdateWithoutFeedItemsInput, PostUncheckedUpdateWithoutFeedItemsInput>
    create: XOR<PostCreateWithoutFeedItemsInput, PostUncheckedCreateWithoutFeedItemsInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutFeedItemsInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutFeedItemsInput, PostUncheckedUpdateWithoutFeedItemsInput>
  }

  export type PostUpdateWithoutFeedItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likeCount?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: LikeUpdateManyWithoutPostNestedInput
    author?: UserUpdateOneRequiredWithoutPostsNestedInput
    replies?: ReplyUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutFeedItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likeCount?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: LikeUncheckedUpdateManyWithoutPostNestedInput
    replies?: ReplyUncheckedUpdateManyWithoutPostNestedInput
  }

  export type RankingListUpsertWithoutFeedItemsInput = {
    update: XOR<RankingListUpdateWithoutFeedItemsInput, RankingListUncheckedUpdateWithoutFeedItemsInput>
    create: XOR<RankingListCreateWithoutFeedItemsInput, RankingListUncheckedCreateWithoutFeedItemsInput>
    where?: RankingListWhereInput
  }

  export type RankingListUpdateToOneWithWhereWithoutFeedItemsInput = {
    where?: RankingListWhereInput
    data: XOR<RankingListUpdateWithoutFeedItemsInput, RankingListUncheckedUpdateWithoutFeedItemsInput>
  }

  export type RankingListUpdateWithoutFeedItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumListStatusFieldUpdateOperationsInput | $Enums.ListStatus
    listImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayOrder?: NullableIntFieldUpdateOperationsInput | number | null
    likeCount?: IntFieldUpdateOperationsInput | number
    likes?: LikeUpdateManyWithoutRankingListNestedInput
    items?: RankedItemUpdateManyWithoutRankingListNestedInput
    author?: UserUpdateOneRequiredWithoutRankingListsNestedInput
    rankingListTags?: RankingListTagUpdateManyWithoutListNestedInput
  }

  export type RankingListUncheckedUpdateWithoutFeedItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumListStatusFieldUpdateOperationsInput | $Enums.ListStatus
    listImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayOrder?: NullableIntFieldUpdateOperationsInput | number | null
    likeCount?: IntFieldUpdateOperationsInput | number
    likes?: LikeUncheckedUpdateManyWithoutRankingListNestedInput
    items?: RankedItemUncheckedUpdateManyWithoutRankingListNestedInput
    rankingListTags?: RankingListTagUncheckedUpdateManyWithoutListNestedInput
  }

  export type UserUpsertWithoutFeedItemsInput = {
    update: XOR<UserUpdateWithoutFeedItemsInput, UserUncheckedUpdateWithoutFeedItemsInput>
    create: XOR<UserCreateWithoutFeedItemsInput, UserUncheckedCreateWithoutFeedItemsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFeedItemsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFeedItemsInput, UserUncheckedUpdateWithoutFeedItemsInput>
  }

  export type UserUpdateWithoutFeedItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    following?: FollowUpdateManyWithoutFollowerNestedInput
    followedBy?: FollowUpdateManyWithoutFollowingNestedInput
    receivedFollowRequests?: FollowRequestUpdateManyWithoutRequestedNestedInput
    sentFollowRequests?: FollowRequestUpdateManyWithoutRequesterNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    rankingLists?: RankingListUpdateManyWithoutAuthorNestedInput
    replies?: ReplyUpdateManyWithoutUserNestedInput
    retweets?: RetweetUpdateManyWithoutUserNestedInput
    rankingListComments?: RankingListCommentUpdateManyWithoutUserNestedInput
    averageItemComments?: AverageItemCommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFeedItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followedBy?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    receivedFollowRequests?: FollowRequestUncheckedUpdateManyWithoutRequestedNestedInput
    sentFollowRequests?: FollowRequestUncheckedUpdateManyWithoutRequesterNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    rankingLists?: RankingListUncheckedUpdateManyWithoutAuthorNestedInput
    replies?: ReplyUncheckedUpdateManyWithoutUserNestedInput
    retweets?: RetweetUncheckedUpdateManyWithoutUserNestedInput
    rankingListComments?: RankingListCommentUncheckedUpdateManyWithoutUserNestedInput
    averageItemComments?: AverageItemCommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FeedItemUpsertWithoutQuotedByItemsInput = {
    update: XOR<FeedItemUpdateWithoutQuotedByItemsInput, FeedItemUncheckedUpdateWithoutQuotedByItemsInput>
    create: XOR<FeedItemCreateWithoutQuotedByItemsInput, FeedItemUncheckedCreateWithoutQuotedByItemsInput>
    where?: FeedItemWhereInput
  }

  export type FeedItemUpdateToOneWithWhereWithoutQuotedByItemsInput = {
    where?: FeedItemWhereInput
    data: XOR<FeedItemUpdateWithoutQuotedByItemsInput, FeedItemUncheckedUpdateWithoutQuotedByItemsInput>
  }

  export type FeedItemUpdateWithoutQuotedByItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumFeedTypeFieldUpdateOperationsInput | $Enums.FeedType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quoteRetweetCount?: IntFieldUpdateOperationsInput | number
    post?: PostUpdateOneWithoutFeedItemsNestedInput
    rankingList?: RankingListUpdateOneWithoutFeedItemsNestedInput
    user?: UserUpdateOneRequiredWithoutFeedItemsNestedInput
    quotedFeedItem?: FeedItemUpdateOneWithoutQuotedByItemsNestedInput
    retweetOfFeedItem?: FeedItemUpdateOneWithoutRetweetedByItemsNestedInput
    retweetedByItems?: FeedItemUpdateManyWithoutRetweetOfFeedItemNestedInput
    retweets?: RetweetUpdateManyWithoutFeedItemNestedInput
  }

  export type FeedItemUncheckedUpdateWithoutQuotedByItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumFeedTypeFieldUpdateOperationsInput | $Enums.FeedType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    rankingListId?: NullableStringFieldUpdateOperationsInput | string | null
    retweetOfFeedItemId?: NullableStringFieldUpdateOperationsInput | string | null
    quotedFeedItemId?: NullableStringFieldUpdateOperationsInput | string | null
    quoteRetweetCount?: IntFieldUpdateOperationsInput | number
    retweetedByItems?: FeedItemUncheckedUpdateManyWithoutRetweetOfFeedItemNestedInput
    retweets?: RetweetUncheckedUpdateManyWithoutFeedItemNestedInput
  }

  export type FeedItemUpsertWithWhereUniqueWithoutQuotedFeedItemInput = {
    where: FeedItemWhereUniqueInput
    update: XOR<FeedItemUpdateWithoutQuotedFeedItemInput, FeedItemUncheckedUpdateWithoutQuotedFeedItemInput>
    create: XOR<FeedItemCreateWithoutQuotedFeedItemInput, FeedItemUncheckedCreateWithoutQuotedFeedItemInput>
  }

  export type FeedItemUpdateWithWhereUniqueWithoutQuotedFeedItemInput = {
    where: FeedItemWhereUniqueInput
    data: XOR<FeedItemUpdateWithoutQuotedFeedItemInput, FeedItemUncheckedUpdateWithoutQuotedFeedItemInput>
  }

  export type FeedItemUpdateManyWithWhereWithoutQuotedFeedItemInput = {
    where: FeedItemScalarWhereInput
    data: XOR<FeedItemUpdateManyMutationInput, FeedItemUncheckedUpdateManyWithoutQuotedFeedItemInput>
  }

  export type FeedItemUpsertWithoutRetweetedByItemsInput = {
    update: XOR<FeedItemUpdateWithoutRetweetedByItemsInput, FeedItemUncheckedUpdateWithoutRetweetedByItemsInput>
    create: XOR<FeedItemCreateWithoutRetweetedByItemsInput, FeedItemUncheckedCreateWithoutRetweetedByItemsInput>
    where?: FeedItemWhereInput
  }

  export type FeedItemUpdateToOneWithWhereWithoutRetweetedByItemsInput = {
    where?: FeedItemWhereInput
    data: XOR<FeedItemUpdateWithoutRetweetedByItemsInput, FeedItemUncheckedUpdateWithoutRetweetedByItemsInput>
  }

  export type FeedItemUpdateWithoutRetweetedByItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumFeedTypeFieldUpdateOperationsInput | $Enums.FeedType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quoteRetweetCount?: IntFieldUpdateOperationsInput | number
    post?: PostUpdateOneWithoutFeedItemsNestedInput
    rankingList?: RankingListUpdateOneWithoutFeedItemsNestedInput
    user?: UserUpdateOneRequiredWithoutFeedItemsNestedInput
    quotedFeedItem?: FeedItemUpdateOneWithoutQuotedByItemsNestedInput
    quotedByItems?: FeedItemUpdateManyWithoutQuotedFeedItemNestedInput
    retweetOfFeedItem?: FeedItemUpdateOneWithoutRetweetedByItemsNestedInput
    retweets?: RetweetUpdateManyWithoutFeedItemNestedInput
  }

  export type FeedItemUncheckedUpdateWithoutRetweetedByItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumFeedTypeFieldUpdateOperationsInput | $Enums.FeedType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    rankingListId?: NullableStringFieldUpdateOperationsInput | string | null
    retweetOfFeedItemId?: NullableStringFieldUpdateOperationsInput | string | null
    quotedFeedItemId?: NullableStringFieldUpdateOperationsInput | string | null
    quoteRetweetCount?: IntFieldUpdateOperationsInput | number
    quotedByItems?: FeedItemUncheckedUpdateManyWithoutQuotedFeedItemNestedInput
    retweets?: RetweetUncheckedUpdateManyWithoutFeedItemNestedInput
  }

  export type FeedItemUpsertWithWhereUniqueWithoutRetweetOfFeedItemInput = {
    where: FeedItemWhereUniqueInput
    update: XOR<FeedItemUpdateWithoutRetweetOfFeedItemInput, FeedItemUncheckedUpdateWithoutRetweetOfFeedItemInput>
    create: XOR<FeedItemCreateWithoutRetweetOfFeedItemInput, FeedItemUncheckedCreateWithoutRetweetOfFeedItemInput>
  }

  export type FeedItemUpdateWithWhereUniqueWithoutRetweetOfFeedItemInput = {
    where: FeedItemWhereUniqueInput
    data: XOR<FeedItemUpdateWithoutRetweetOfFeedItemInput, FeedItemUncheckedUpdateWithoutRetweetOfFeedItemInput>
  }

  export type FeedItemUpdateManyWithWhereWithoutRetweetOfFeedItemInput = {
    where: FeedItemScalarWhereInput
    data: XOR<FeedItemUpdateManyMutationInput, FeedItemUncheckedUpdateManyWithoutRetweetOfFeedItemInput>
  }

  export type RetweetUpsertWithWhereUniqueWithoutFeedItemInput = {
    where: RetweetWhereUniqueInput
    update: XOR<RetweetUpdateWithoutFeedItemInput, RetweetUncheckedUpdateWithoutFeedItemInput>
    create: XOR<RetweetCreateWithoutFeedItemInput, RetweetUncheckedCreateWithoutFeedItemInput>
  }

  export type RetweetUpdateWithWhereUniqueWithoutFeedItemInput = {
    where: RetweetWhereUniqueInput
    data: XOR<RetweetUpdateWithoutFeedItemInput, RetweetUncheckedUpdateWithoutFeedItemInput>
  }

  export type RetweetUpdateManyWithWhereWithoutFeedItemInput = {
    where: RetweetScalarWhereInput
    data: XOR<RetweetUpdateManyMutationInput, RetweetUncheckedUpdateManyWithoutFeedItemInput>
  }

  export type PostCreateWithoutLikesInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    likeCount?: number
    imageUrl?: string | null
    feedItems?: FeedItemCreateNestedManyWithoutPostInput
    author: UserCreateNestedOneWithoutPostsInput
    replies?: ReplyCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutLikesInput = {
    id?: string
    content: string
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    likeCount?: number
    imageUrl?: string | null
    feedItems?: FeedItemUncheckedCreateNestedManyWithoutPostInput
    replies?: ReplyUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutLikesInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutLikesInput, PostUncheckedCreateWithoutLikesInput>
  }

  export type RankingListCreateWithoutLikesInput = {
    id?: string
    subject: string
    description?: string | null
    status?: $Enums.ListStatus
    listImageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    displayOrder?: number | null
    likeCount?: number
    feedItems?: FeedItemCreateNestedManyWithoutRankingListInput
    items?: RankedItemCreateNestedManyWithoutRankingListInput
    author: UserCreateNestedOneWithoutRankingListsInput
    rankingListTags?: RankingListTagCreateNestedManyWithoutListInput
  }

  export type RankingListUncheckedCreateWithoutLikesInput = {
    id?: string
    subject: string
    description?: string | null
    status?: $Enums.ListStatus
    listImageUrl?: string | null
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    displayOrder?: number | null
    likeCount?: number
    feedItems?: FeedItemUncheckedCreateNestedManyWithoutRankingListInput
    items?: RankedItemUncheckedCreateNestedManyWithoutRankingListInput
    rankingListTags?: RankingListTagUncheckedCreateNestedManyWithoutListInput
  }

  export type RankingListCreateOrConnectWithoutLikesInput = {
    where: RankingListWhereUniqueInput
    create: XOR<RankingListCreateWithoutLikesInput, RankingListUncheckedCreateWithoutLikesInput>
  }

  export type UserCreateWithoutLikesInput = {
    id?: string
    clerkId: string
    username: string
    name?: string | null
    bio?: string | null
    image?: string | null
    coverImageUrl?: string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    birthday?: Date | string | null
    location?: string | null
    feedItems?: FeedItemCreateNestedManyWithoutUserInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    followedBy?: FollowCreateNestedManyWithoutFollowingInput
    receivedFollowRequests?: FollowRequestCreateNestedManyWithoutRequestedInput
    sentFollowRequests?: FollowRequestCreateNestedManyWithoutRequesterInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    rankingLists?: RankingListCreateNestedManyWithoutAuthorInput
    replies?: ReplyCreateNestedManyWithoutUserInput
    retweets?: RetweetCreateNestedManyWithoutUserInput
    rankingListComments?: RankingListCommentCreateNestedManyWithoutUserInput
    averageItemComments?: AverageItemCommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLikesInput = {
    id?: string
    clerkId: string
    username: string
    name?: string | null
    bio?: string | null
    image?: string | null
    coverImageUrl?: string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    birthday?: Date | string | null
    location?: string | null
    feedItems?: FeedItemUncheckedCreateNestedManyWithoutUserInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followedBy?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    receivedFollowRequests?: FollowRequestUncheckedCreateNestedManyWithoutRequestedInput
    sentFollowRequests?: FollowRequestUncheckedCreateNestedManyWithoutRequesterInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    rankingLists?: RankingListUncheckedCreateNestedManyWithoutAuthorInput
    replies?: ReplyUncheckedCreateNestedManyWithoutUserInput
    retweets?: RetweetUncheckedCreateNestedManyWithoutUserInput
    rankingListComments?: RankingListCommentUncheckedCreateNestedManyWithoutUserInput
    averageItemComments?: AverageItemCommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLikesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLikesInput, UserUncheckedCreateWithoutLikesInput>
  }

  export type PostUpsertWithoutLikesInput = {
    update: XOR<PostUpdateWithoutLikesInput, PostUncheckedUpdateWithoutLikesInput>
    create: XOR<PostCreateWithoutLikesInput, PostUncheckedCreateWithoutLikesInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutLikesInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutLikesInput, PostUncheckedUpdateWithoutLikesInput>
  }

  export type PostUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likeCount?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    feedItems?: FeedItemUpdateManyWithoutPostNestedInput
    author?: UserUpdateOneRequiredWithoutPostsNestedInput
    replies?: ReplyUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likeCount?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    feedItems?: FeedItemUncheckedUpdateManyWithoutPostNestedInput
    replies?: ReplyUncheckedUpdateManyWithoutPostNestedInput
  }

  export type RankingListUpsertWithoutLikesInput = {
    update: XOR<RankingListUpdateWithoutLikesInput, RankingListUncheckedUpdateWithoutLikesInput>
    create: XOR<RankingListCreateWithoutLikesInput, RankingListUncheckedCreateWithoutLikesInput>
    where?: RankingListWhereInput
  }

  export type RankingListUpdateToOneWithWhereWithoutLikesInput = {
    where?: RankingListWhereInput
    data: XOR<RankingListUpdateWithoutLikesInput, RankingListUncheckedUpdateWithoutLikesInput>
  }

  export type RankingListUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumListStatusFieldUpdateOperationsInput | $Enums.ListStatus
    listImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayOrder?: NullableIntFieldUpdateOperationsInput | number | null
    likeCount?: IntFieldUpdateOperationsInput | number
    feedItems?: FeedItemUpdateManyWithoutRankingListNestedInput
    items?: RankedItemUpdateManyWithoutRankingListNestedInput
    author?: UserUpdateOneRequiredWithoutRankingListsNestedInput
    rankingListTags?: RankingListTagUpdateManyWithoutListNestedInput
  }

  export type RankingListUncheckedUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumListStatusFieldUpdateOperationsInput | $Enums.ListStatus
    listImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayOrder?: NullableIntFieldUpdateOperationsInput | number | null
    likeCount?: IntFieldUpdateOperationsInput | number
    feedItems?: FeedItemUncheckedUpdateManyWithoutRankingListNestedInput
    items?: RankedItemUncheckedUpdateManyWithoutRankingListNestedInput
    rankingListTags?: RankingListTagUncheckedUpdateManyWithoutListNestedInput
  }

  export type UserUpsertWithoutLikesInput = {
    update: XOR<UserUpdateWithoutLikesInput, UserUncheckedUpdateWithoutLikesInput>
    create: XOR<UserCreateWithoutLikesInput, UserUncheckedCreateWithoutLikesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLikesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLikesInput, UserUncheckedUpdateWithoutLikesInput>
  }

  export type UserUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    feedItems?: FeedItemUpdateManyWithoutUserNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    followedBy?: FollowUpdateManyWithoutFollowingNestedInput
    receivedFollowRequests?: FollowRequestUpdateManyWithoutRequestedNestedInput
    sentFollowRequests?: FollowRequestUpdateManyWithoutRequesterNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    rankingLists?: RankingListUpdateManyWithoutAuthorNestedInput
    replies?: ReplyUpdateManyWithoutUserNestedInput
    retweets?: RetweetUpdateManyWithoutUserNestedInput
    rankingListComments?: RankingListCommentUpdateManyWithoutUserNestedInput
    averageItemComments?: AverageItemCommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    feedItems?: FeedItemUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followedBy?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    receivedFollowRequests?: FollowRequestUncheckedUpdateManyWithoutRequestedNestedInput
    sentFollowRequests?: FollowRequestUncheckedUpdateManyWithoutRequesterNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    rankingLists?: RankingListUncheckedUpdateManyWithoutAuthorNestedInput
    replies?: ReplyUncheckedUpdateManyWithoutUserNestedInput
    retweets?: RetweetUncheckedUpdateManyWithoutUserNestedInput
    rankingListComments?: RankingListCommentUncheckedUpdateManyWithoutUserNestedInput
    averageItemComments?: AverageItemCommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PostCreateWithoutRepliesInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    likeCount?: number
    imageUrl?: string | null
    feedItems?: FeedItemCreateNestedManyWithoutPostInput
    likes?: LikeCreateNestedManyWithoutPostInput
    author: UserCreateNestedOneWithoutPostsInput
  }

  export type PostUncheckedCreateWithoutRepliesInput = {
    id?: string
    content: string
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    likeCount?: number
    imageUrl?: string | null
    feedItems?: FeedItemUncheckedCreateNestedManyWithoutPostInput
    likes?: LikeUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutRepliesInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutRepliesInput, PostUncheckedCreateWithoutRepliesInput>
  }

  export type UserCreateWithoutRepliesInput = {
    id?: string
    clerkId: string
    username: string
    name?: string | null
    bio?: string | null
    image?: string | null
    coverImageUrl?: string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    birthday?: Date | string | null
    location?: string | null
    feedItems?: FeedItemCreateNestedManyWithoutUserInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    followedBy?: FollowCreateNestedManyWithoutFollowingInput
    receivedFollowRequests?: FollowRequestCreateNestedManyWithoutRequestedInput
    sentFollowRequests?: FollowRequestCreateNestedManyWithoutRequesterInput
    likes?: LikeCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    rankingLists?: RankingListCreateNestedManyWithoutAuthorInput
    retweets?: RetweetCreateNestedManyWithoutUserInput
    rankingListComments?: RankingListCommentCreateNestedManyWithoutUserInput
    averageItemComments?: AverageItemCommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRepliesInput = {
    id?: string
    clerkId: string
    username: string
    name?: string | null
    bio?: string | null
    image?: string | null
    coverImageUrl?: string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    birthday?: Date | string | null
    location?: string | null
    feedItems?: FeedItemUncheckedCreateNestedManyWithoutUserInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followedBy?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    receivedFollowRequests?: FollowRequestUncheckedCreateNestedManyWithoutRequestedInput
    sentFollowRequests?: FollowRequestUncheckedCreateNestedManyWithoutRequesterInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    rankingLists?: RankingListUncheckedCreateNestedManyWithoutAuthorInput
    retweets?: RetweetUncheckedCreateNestedManyWithoutUserInput
    rankingListComments?: RankingListCommentUncheckedCreateNestedManyWithoutUserInput
    averageItemComments?: AverageItemCommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRepliesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRepliesInput, UserUncheckedCreateWithoutRepliesInput>
  }

  export type PostUpsertWithoutRepliesInput = {
    update: XOR<PostUpdateWithoutRepliesInput, PostUncheckedUpdateWithoutRepliesInput>
    create: XOR<PostCreateWithoutRepliesInput, PostUncheckedCreateWithoutRepliesInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutRepliesInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutRepliesInput, PostUncheckedUpdateWithoutRepliesInput>
  }

  export type PostUpdateWithoutRepliesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likeCount?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    feedItems?: FeedItemUpdateManyWithoutPostNestedInput
    likes?: LikeUpdateManyWithoutPostNestedInput
    author?: UserUpdateOneRequiredWithoutPostsNestedInput
  }

  export type PostUncheckedUpdateWithoutRepliesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likeCount?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    feedItems?: FeedItemUncheckedUpdateManyWithoutPostNestedInput
    likes?: LikeUncheckedUpdateManyWithoutPostNestedInput
  }

  export type UserUpsertWithoutRepliesInput = {
    update: XOR<UserUpdateWithoutRepliesInput, UserUncheckedUpdateWithoutRepliesInput>
    create: XOR<UserCreateWithoutRepliesInput, UserUncheckedCreateWithoutRepliesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRepliesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRepliesInput, UserUncheckedUpdateWithoutRepliesInput>
  }

  export type UserUpdateWithoutRepliesInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    feedItems?: FeedItemUpdateManyWithoutUserNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    followedBy?: FollowUpdateManyWithoutFollowingNestedInput
    receivedFollowRequests?: FollowRequestUpdateManyWithoutRequestedNestedInput
    sentFollowRequests?: FollowRequestUpdateManyWithoutRequesterNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    rankingLists?: RankingListUpdateManyWithoutAuthorNestedInput
    retweets?: RetweetUpdateManyWithoutUserNestedInput
    rankingListComments?: RankingListCommentUpdateManyWithoutUserNestedInput
    averageItemComments?: AverageItemCommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRepliesInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    feedItems?: FeedItemUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followedBy?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    receivedFollowRequests?: FollowRequestUncheckedUpdateManyWithoutRequestedNestedInput
    sentFollowRequests?: FollowRequestUncheckedUpdateManyWithoutRequesterNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    rankingLists?: RankingListUncheckedUpdateManyWithoutAuthorNestedInput
    retweets?: RetweetUncheckedUpdateManyWithoutUserNestedInput
    rankingListComments?: RankingListCommentUncheckedUpdateManyWithoutUserNestedInput
    averageItemComments?: AverageItemCommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutReceivedFollowRequestsInput = {
    id?: string
    clerkId: string
    username: string
    name?: string | null
    bio?: string | null
    image?: string | null
    coverImageUrl?: string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    birthday?: Date | string | null
    location?: string | null
    feedItems?: FeedItemCreateNestedManyWithoutUserInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    followedBy?: FollowCreateNestedManyWithoutFollowingInput
    sentFollowRequests?: FollowRequestCreateNestedManyWithoutRequesterInput
    likes?: LikeCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    rankingLists?: RankingListCreateNestedManyWithoutAuthorInput
    replies?: ReplyCreateNestedManyWithoutUserInput
    retweets?: RetweetCreateNestedManyWithoutUserInput
    rankingListComments?: RankingListCommentCreateNestedManyWithoutUserInput
    averageItemComments?: AverageItemCommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReceivedFollowRequestsInput = {
    id?: string
    clerkId: string
    username: string
    name?: string | null
    bio?: string | null
    image?: string | null
    coverImageUrl?: string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    birthday?: Date | string | null
    location?: string | null
    feedItems?: FeedItemUncheckedCreateNestedManyWithoutUserInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followedBy?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    sentFollowRequests?: FollowRequestUncheckedCreateNestedManyWithoutRequesterInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    rankingLists?: RankingListUncheckedCreateNestedManyWithoutAuthorInput
    replies?: ReplyUncheckedCreateNestedManyWithoutUserInput
    retweets?: RetweetUncheckedCreateNestedManyWithoutUserInput
    rankingListComments?: RankingListCommentUncheckedCreateNestedManyWithoutUserInput
    averageItemComments?: AverageItemCommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReceivedFollowRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceivedFollowRequestsInput, UserUncheckedCreateWithoutReceivedFollowRequestsInput>
  }

  export type UserCreateWithoutSentFollowRequestsInput = {
    id?: string
    clerkId: string
    username: string
    name?: string | null
    bio?: string | null
    image?: string | null
    coverImageUrl?: string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    birthday?: Date | string | null
    location?: string | null
    feedItems?: FeedItemCreateNestedManyWithoutUserInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    followedBy?: FollowCreateNestedManyWithoutFollowingInput
    receivedFollowRequests?: FollowRequestCreateNestedManyWithoutRequestedInput
    likes?: LikeCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    rankingLists?: RankingListCreateNestedManyWithoutAuthorInput
    replies?: ReplyCreateNestedManyWithoutUserInput
    retweets?: RetweetCreateNestedManyWithoutUserInput
    rankingListComments?: RankingListCommentCreateNestedManyWithoutUserInput
    averageItemComments?: AverageItemCommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSentFollowRequestsInput = {
    id?: string
    clerkId: string
    username: string
    name?: string | null
    bio?: string | null
    image?: string | null
    coverImageUrl?: string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    birthday?: Date | string | null
    location?: string | null
    feedItems?: FeedItemUncheckedCreateNestedManyWithoutUserInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followedBy?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    receivedFollowRequests?: FollowRequestUncheckedCreateNestedManyWithoutRequestedInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    rankingLists?: RankingListUncheckedCreateNestedManyWithoutAuthorInput
    replies?: ReplyUncheckedCreateNestedManyWithoutUserInput
    retweets?: RetweetUncheckedCreateNestedManyWithoutUserInput
    rankingListComments?: RankingListCommentUncheckedCreateNestedManyWithoutUserInput
    averageItemComments?: AverageItemCommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSentFollowRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSentFollowRequestsInput, UserUncheckedCreateWithoutSentFollowRequestsInput>
  }

  export type UserUpsertWithoutReceivedFollowRequestsInput = {
    update: XOR<UserUpdateWithoutReceivedFollowRequestsInput, UserUncheckedUpdateWithoutReceivedFollowRequestsInput>
    create: XOR<UserCreateWithoutReceivedFollowRequestsInput, UserUncheckedCreateWithoutReceivedFollowRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReceivedFollowRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReceivedFollowRequestsInput, UserUncheckedUpdateWithoutReceivedFollowRequestsInput>
  }

  export type UserUpdateWithoutReceivedFollowRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    feedItems?: FeedItemUpdateManyWithoutUserNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    followedBy?: FollowUpdateManyWithoutFollowingNestedInput
    sentFollowRequests?: FollowRequestUpdateManyWithoutRequesterNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    rankingLists?: RankingListUpdateManyWithoutAuthorNestedInput
    replies?: ReplyUpdateManyWithoutUserNestedInput
    retweets?: RetweetUpdateManyWithoutUserNestedInput
    rankingListComments?: RankingListCommentUpdateManyWithoutUserNestedInput
    averageItemComments?: AverageItemCommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReceivedFollowRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    feedItems?: FeedItemUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followedBy?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    sentFollowRequests?: FollowRequestUncheckedUpdateManyWithoutRequesterNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    rankingLists?: RankingListUncheckedUpdateManyWithoutAuthorNestedInput
    replies?: ReplyUncheckedUpdateManyWithoutUserNestedInput
    retweets?: RetweetUncheckedUpdateManyWithoutUserNestedInput
    rankingListComments?: RankingListCommentUncheckedUpdateManyWithoutUserNestedInput
    averageItemComments?: AverageItemCommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutSentFollowRequestsInput = {
    update: XOR<UserUpdateWithoutSentFollowRequestsInput, UserUncheckedUpdateWithoutSentFollowRequestsInput>
    create: XOR<UserCreateWithoutSentFollowRequestsInput, UserUncheckedCreateWithoutSentFollowRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSentFollowRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSentFollowRequestsInput, UserUncheckedUpdateWithoutSentFollowRequestsInput>
  }

  export type UserUpdateWithoutSentFollowRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    feedItems?: FeedItemUpdateManyWithoutUserNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    followedBy?: FollowUpdateManyWithoutFollowingNestedInput
    receivedFollowRequests?: FollowRequestUpdateManyWithoutRequestedNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    rankingLists?: RankingListUpdateManyWithoutAuthorNestedInput
    replies?: ReplyUpdateManyWithoutUserNestedInput
    retweets?: RetweetUpdateManyWithoutUserNestedInput
    rankingListComments?: RankingListCommentUpdateManyWithoutUserNestedInput
    averageItemComments?: AverageItemCommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSentFollowRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    feedItems?: FeedItemUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followedBy?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    receivedFollowRequests?: FollowRequestUncheckedUpdateManyWithoutRequestedNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    rankingLists?: RankingListUncheckedUpdateManyWithoutAuthorNestedInput
    replies?: ReplyUncheckedUpdateManyWithoutUserNestedInput
    retweets?: RetweetUncheckedUpdateManyWithoutUserNestedInput
    rankingListComments?: RankingListCommentUncheckedUpdateManyWithoutUserNestedInput
    averageItemComments?: AverageItemCommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutFollowingInput = {
    id?: string
    clerkId: string
    username: string
    name?: string | null
    bio?: string | null
    image?: string | null
    coverImageUrl?: string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    birthday?: Date | string | null
    location?: string | null
    feedItems?: FeedItemCreateNestedManyWithoutUserInput
    followedBy?: FollowCreateNestedManyWithoutFollowingInput
    receivedFollowRequests?: FollowRequestCreateNestedManyWithoutRequestedInput
    sentFollowRequests?: FollowRequestCreateNestedManyWithoutRequesterInput
    likes?: LikeCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    rankingLists?: RankingListCreateNestedManyWithoutAuthorInput
    replies?: ReplyCreateNestedManyWithoutUserInput
    retweets?: RetweetCreateNestedManyWithoutUserInput
    rankingListComments?: RankingListCommentCreateNestedManyWithoutUserInput
    averageItemComments?: AverageItemCommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFollowingInput = {
    id?: string
    clerkId: string
    username: string
    name?: string | null
    bio?: string | null
    image?: string | null
    coverImageUrl?: string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    birthday?: Date | string | null
    location?: string | null
    feedItems?: FeedItemUncheckedCreateNestedManyWithoutUserInput
    followedBy?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    receivedFollowRequests?: FollowRequestUncheckedCreateNestedManyWithoutRequestedInput
    sentFollowRequests?: FollowRequestUncheckedCreateNestedManyWithoutRequesterInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    rankingLists?: RankingListUncheckedCreateNestedManyWithoutAuthorInput
    replies?: ReplyUncheckedCreateNestedManyWithoutUserInput
    retweets?: RetweetUncheckedCreateNestedManyWithoutUserInput
    rankingListComments?: RankingListCommentUncheckedCreateNestedManyWithoutUserInput
    averageItemComments?: AverageItemCommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFollowingInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>
  }

  export type UserCreateWithoutFollowedByInput = {
    id?: string
    clerkId: string
    username: string
    name?: string | null
    bio?: string | null
    image?: string | null
    coverImageUrl?: string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    birthday?: Date | string | null
    location?: string | null
    feedItems?: FeedItemCreateNestedManyWithoutUserInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    receivedFollowRequests?: FollowRequestCreateNestedManyWithoutRequestedInput
    sentFollowRequests?: FollowRequestCreateNestedManyWithoutRequesterInput
    likes?: LikeCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    rankingLists?: RankingListCreateNestedManyWithoutAuthorInput
    replies?: ReplyCreateNestedManyWithoutUserInput
    retweets?: RetweetCreateNestedManyWithoutUserInput
    rankingListComments?: RankingListCommentCreateNestedManyWithoutUserInput
    averageItemComments?: AverageItemCommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFollowedByInput = {
    id?: string
    clerkId: string
    username: string
    name?: string | null
    bio?: string | null
    image?: string | null
    coverImageUrl?: string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    isPrivate?: boolean
    birthday?: Date | string | null
    location?: string | null
    feedItems?: FeedItemUncheckedCreateNestedManyWithoutUserInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    receivedFollowRequests?: FollowRequestUncheckedCreateNestedManyWithoutRequestedInput
    sentFollowRequests?: FollowRequestUncheckedCreateNestedManyWithoutRequesterInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    rankingLists?: RankingListUncheckedCreateNestedManyWithoutAuthorInput
    replies?: ReplyUncheckedCreateNestedManyWithoutUserInput
    retweets?: RetweetUncheckedCreateNestedManyWithoutUserInput
    rankingListComments?: RankingListCommentUncheckedCreateNestedManyWithoutUserInput
    averageItemComments?: AverageItemCommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFollowedByInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFollowedByInput, UserUncheckedCreateWithoutFollowedByInput>
  }

  export type UserUpsertWithoutFollowingInput = {
    update: XOR<UserUpdateWithoutFollowingInput, UserUncheckedUpdateWithoutFollowingInput>
    create: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFollowingInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFollowingInput, UserUncheckedUpdateWithoutFollowingInput>
  }

  export type UserUpdateWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    feedItems?: FeedItemUpdateManyWithoutUserNestedInput
    followedBy?: FollowUpdateManyWithoutFollowingNestedInput
    receivedFollowRequests?: FollowRequestUpdateManyWithoutRequestedNestedInput
    sentFollowRequests?: FollowRequestUpdateManyWithoutRequesterNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    rankingLists?: RankingListUpdateManyWithoutAuthorNestedInput
    replies?: ReplyUpdateManyWithoutUserNestedInput
    retweets?: RetweetUpdateManyWithoutUserNestedInput
    rankingListComments?: RankingListCommentUpdateManyWithoutUserNestedInput
    averageItemComments?: AverageItemCommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    feedItems?: FeedItemUncheckedUpdateManyWithoutUserNestedInput
    followedBy?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    receivedFollowRequests?: FollowRequestUncheckedUpdateManyWithoutRequestedNestedInput
    sentFollowRequests?: FollowRequestUncheckedUpdateManyWithoutRequesterNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    rankingLists?: RankingListUncheckedUpdateManyWithoutAuthorNestedInput
    replies?: ReplyUncheckedUpdateManyWithoutUserNestedInput
    retweets?: RetweetUncheckedUpdateManyWithoutUserNestedInput
    rankingListComments?: RankingListCommentUncheckedUpdateManyWithoutUserNestedInput
    averageItemComments?: AverageItemCommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutFollowedByInput = {
    update: XOR<UserUpdateWithoutFollowedByInput, UserUncheckedUpdateWithoutFollowedByInput>
    create: XOR<UserCreateWithoutFollowedByInput, UserUncheckedCreateWithoutFollowedByInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFollowedByInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFollowedByInput, UserUncheckedUpdateWithoutFollowedByInput>
  }

  export type UserUpdateWithoutFollowedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    feedItems?: FeedItemUpdateManyWithoutUserNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    receivedFollowRequests?: FollowRequestUpdateManyWithoutRequestedNestedInput
    sentFollowRequests?: FollowRequestUpdateManyWithoutRequesterNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    rankingLists?: RankingListUpdateManyWithoutAuthorNestedInput
    replies?: ReplyUpdateManyWithoutUserNestedInput
    retweets?: RetweetUpdateManyWithoutUserNestedInput
    rankingListComments?: RankingListCommentUpdateManyWithoutUserNestedInput
    averageItemComments?: AverageItemCommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFollowedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    feedItems?: FeedItemUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    receivedFollowRequests?: FollowRequestUncheckedUpdateManyWithoutRequestedNestedInput
    sentFollowRequests?: FollowRequestUncheckedUpdateManyWithoutRequesterNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    rankingLists?: RankingListUncheckedUpdateManyWithoutAuthorNestedInput
    replies?: ReplyUncheckedUpdateManyWithoutUserNestedInput
    retweets?: RetweetUncheckedUpdateManyWithoutUserNestedInput
    rankingListComments?: RankingListCommentUncheckedUpdateManyWithoutUserNestedInput
    averageItemComments?: AverageItemCommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TrendingTagCreateManyTagInput = {
    id?: string
    tagName: string
    count: number
    period: $Enums.TrendPeriod
    calculationDate: Date | string
  }

  export type RankingListTagCreateManyTagInput = {
    id?: string
    listId: string
  }

  export type TrendingTagUpdateWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagName?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    period?: EnumTrendPeriodFieldUpdateOperationsInput | $Enums.TrendPeriod
    calculationDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrendingTagUncheckedUpdateWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagName?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    period?: EnumTrendPeriodFieldUpdateOperationsInput | $Enums.TrendPeriod
    calculationDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrendingTagUncheckedUpdateManyWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagName?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    period?: EnumTrendPeriodFieldUpdateOperationsInput | $Enums.TrendPeriod
    calculationDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RankingListTagUpdateWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    list?: RankingListUpdateOneRequiredWithoutRankingListTagsNestedInput
  }

  export type RankingListTagUncheckedUpdateWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    listId?: StringFieldUpdateOperationsInput | string
  }

  export type RankingListTagUncheckedUpdateManyWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    listId?: StringFieldUpdateOperationsInput | string
  }

  export type FeedItemCreateManyUserInput = {
    id?: string
    type: $Enums.FeedType
    createdAt?: Date | string
    updatedAt?: Date | string
    postId?: string | null
    rankingListId?: string | null
    retweetOfFeedItemId?: string | null
    quotedFeedItemId?: string | null
    quoteRetweetCount?: number
  }

  export type FollowCreateManyFollowerInput = {
    id?: string
    followingId: string
    createdAt?: Date | string
  }

  export type FollowCreateManyFollowingInput = {
    id?: string
    followerId: string
    createdAt?: Date | string
  }

  export type FollowRequestCreateManyRequestedInput = {
    id?: string
    status?: $Enums.FollowRequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    requesterId: string
  }

  export type FollowRequestCreateManyRequesterInput = {
    id?: string
    status?: $Enums.FollowRequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    requestedId: string
  }

  export type LikeCreateManyUserInput = {
    id?: string
    createdAt?: Date | string
    postId?: string | null
    rankingListId?: string | null
  }

  export type PostCreateManyAuthorInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    likeCount?: number
    imageUrl?: string | null
  }

  export type RankingListCreateManyAuthorInput = {
    id?: string
    subject: string
    description?: string | null
    status?: $Enums.ListStatus
    listImageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    displayOrder?: number | null
    likeCount?: number
  }

  export type ReplyCreateManyUserInput = {
    id?: string
    content: string
    postId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RetweetCreateManyUserInput = {
    id?: string
    feedItemId: string
    createdAt?: Date | string
  }

  export type RankingListCommentCreateManyUserInput = {
    id?: string
    listId: string
    content: string
    createdAt?: Date | string
  }

  export type AverageItemCommentCreateManyUserInput = {
    id?: string
    subject: string
    content: string
    createdAt?: Date | string
  }

  export type FeedItemUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumFeedTypeFieldUpdateOperationsInput | $Enums.FeedType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quoteRetweetCount?: IntFieldUpdateOperationsInput | number
    post?: PostUpdateOneWithoutFeedItemsNestedInput
    rankingList?: RankingListUpdateOneWithoutFeedItemsNestedInput
    quotedFeedItem?: FeedItemUpdateOneWithoutQuotedByItemsNestedInput
    quotedByItems?: FeedItemUpdateManyWithoutQuotedFeedItemNestedInput
    retweetOfFeedItem?: FeedItemUpdateOneWithoutRetweetedByItemsNestedInput
    retweetedByItems?: FeedItemUpdateManyWithoutRetweetOfFeedItemNestedInput
    retweets?: RetweetUpdateManyWithoutFeedItemNestedInput
  }

  export type FeedItemUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumFeedTypeFieldUpdateOperationsInput | $Enums.FeedType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    rankingListId?: NullableStringFieldUpdateOperationsInput | string | null
    retweetOfFeedItemId?: NullableStringFieldUpdateOperationsInput | string | null
    quotedFeedItemId?: NullableStringFieldUpdateOperationsInput | string | null
    quoteRetweetCount?: IntFieldUpdateOperationsInput | number
    quotedByItems?: FeedItemUncheckedUpdateManyWithoutQuotedFeedItemNestedInput
    retweetedByItems?: FeedItemUncheckedUpdateManyWithoutRetweetOfFeedItemNestedInput
    retweets?: RetweetUncheckedUpdateManyWithoutFeedItemNestedInput
  }

  export type FeedItemUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumFeedTypeFieldUpdateOperationsInput | $Enums.FeedType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    rankingListId?: NullableStringFieldUpdateOperationsInput | string | null
    retweetOfFeedItemId?: NullableStringFieldUpdateOperationsInput | string | null
    quotedFeedItemId?: NullableStringFieldUpdateOperationsInput | string | null
    quoteRetweetCount?: IntFieldUpdateOperationsInput | number
  }

  export type FollowUpdateWithoutFollowerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    following?: UserUpdateOneRequiredWithoutFollowedByNestedInput
  }

  export type FollowUncheckedUpdateWithoutFollowerInput = {
    id?: StringFieldUpdateOperationsInput | string
    followingId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowUncheckedUpdateManyWithoutFollowerInput = {
    id?: StringFieldUpdateOperationsInput | string
    followingId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowUpdateWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    follower?: UserUpdateOneRequiredWithoutFollowingNestedInput
  }

  export type FollowUncheckedUpdateWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    followerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowUncheckedUpdateManyWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    followerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowRequestUpdateWithoutRequestedInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumFollowRequestStatusFieldUpdateOperationsInput | $Enums.FollowRequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requester?: UserUpdateOneRequiredWithoutSentFollowRequestsNestedInput
  }

  export type FollowRequestUncheckedUpdateWithoutRequestedInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumFollowRequestStatusFieldUpdateOperationsInput | $Enums.FollowRequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requesterId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowRequestUncheckedUpdateManyWithoutRequestedInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumFollowRequestStatusFieldUpdateOperationsInput | $Enums.FollowRequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requesterId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowRequestUpdateWithoutRequesterInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumFollowRequestStatusFieldUpdateOperationsInput | $Enums.FollowRequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requested?: UserUpdateOneRequiredWithoutReceivedFollowRequestsNestedInput
  }

  export type FollowRequestUncheckedUpdateWithoutRequesterInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumFollowRequestStatusFieldUpdateOperationsInput | $Enums.FollowRequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requestedId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowRequestUncheckedUpdateManyWithoutRequesterInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumFollowRequestStatusFieldUpdateOperationsInput | $Enums.FollowRequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requestedId?: StringFieldUpdateOperationsInput | string
  }

  export type LikeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: PostUpdateOneWithoutLikesNestedInput
    rankingList?: RankingListUpdateOneWithoutLikesNestedInput
  }

  export type LikeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    rankingListId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LikeUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    rankingListId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PostUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likeCount?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    feedItems?: FeedItemUpdateManyWithoutPostNestedInput
    likes?: LikeUpdateManyWithoutPostNestedInput
    replies?: ReplyUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likeCount?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    feedItems?: FeedItemUncheckedUpdateManyWithoutPostNestedInput
    likes?: LikeUncheckedUpdateManyWithoutPostNestedInput
    replies?: ReplyUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likeCount?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RankingListUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumListStatusFieldUpdateOperationsInput | $Enums.ListStatus
    listImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayOrder?: NullableIntFieldUpdateOperationsInput | number | null
    likeCount?: IntFieldUpdateOperationsInput | number
    feedItems?: FeedItemUpdateManyWithoutRankingListNestedInput
    likes?: LikeUpdateManyWithoutRankingListNestedInput
    items?: RankedItemUpdateManyWithoutRankingListNestedInput
    rankingListTags?: RankingListTagUpdateManyWithoutListNestedInput
  }

  export type RankingListUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumListStatusFieldUpdateOperationsInput | $Enums.ListStatus
    listImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayOrder?: NullableIntFieldUpdateOperationsInput | number | null
    likeCount?: IntFieldUpdateOperationsInput | number
    feedItems?: FeedItemUncheckedUpdateManyWithoutRankingListNestedInput
    likes?: LikeUncheckedUpdateManyWithoutRankingListNestedInput
    items?: RankedItemUncheckedUpdateManyWithoutRankingListNestedInput
    rankingListTags?: RankingListTagUncheckedUpdateManyWithoutListNestedInput
  }

  export type RankingListUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumListStatusFieldUpdateOperationsInput | $Enums.ListStatus
    listImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayOrder?: NullableIntFieldUpdateOperationsInput | number | null
    likeCount?: IntFieldUpdateOperationsInput | number
  }

  export type ReplyUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: PostUpdateOneRequiredWithoutRepliesNestedInput
  }

  export type ReplyUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReplyUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RetweetUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedItem?: FeedItemUpdateOneRequiredWithoutRetweetsNestedInput
  }

  export type RetweetUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    feedItemId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RetweetUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    feedItemId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RankingListCommentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    listId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RankingListCommentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    listId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RankingListCommentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    listId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AverageItemCommentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AverageItemCommentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AverageItemCommentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedItemCreateManyRankingListInput = {
    id?: string
    type: $Enums.FeedType
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    postId?: string | null
    retweetOfFeedItemId?: string | null
    quotedFeedItemId?: string | null
    quoteRetweetCount?: number
  }

  export type LikeCreateManyRankingListInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    postId?: string | null
  }

  export type RankedItemCreateManyRankingListInput = {
    id?: string
    itemName: string
    rank: number
    imageUrl?: string | null
    itemDescription?: string | null
    createdAt?: Date | string
  }

  export type RankingListTagCreateManyListInput = {
    id?: string
    tagId: string
  }

  export type FeedItemUpdateWithoutRankingListInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumFeedTypeFieldUpdateOperationsInput | $Enums.FeedType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quoteRetweetCount?: IntFieldUpdateOperationsInput | number
    post?: PostUpdateOneWithoutFeedItemsNestedInput
    user?: UserUpdateOneRequiredWithoutFeedItemsNestedInput
    quotedFeedItem?: FeedItemUpdateOneWithoutQuotedByItemsNestedInput
    quotedByItems?: FeedItemUpdateManyWithoutQuotedFeedItemNestedInput
    retweetOfFeedItem?: FeedItemUpdateOneWithoutRetweetedByItemsNestedInput
    retweetedByItems?: FeedItemUpdateManyWithoutRetweetOfFeedItemNestedInput
    retweets?: RetweetUpdateManyWithoutFeedItemNestedInput
  }

  export type FeedItemUncheckedUpdateWithoutRankingListInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumFeedTypeFieldUpdateOperationsInput | $Enums.FeedType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    retweetOfFeedItemId?: NullableStringFieldUpdateOperationsInput | string | null
    quotedFeedItemId?: NullableStringFieldUpdateOperationsInput | string | null
    quoteRetweetCount?: IntFieldUpdateOperationsInput | number
    quotedByItems?: FeedItemUncheckedUpdateManyWithoutQuotedFeedItemNestedInput
    retweetedByItems?: FeedItemUncheckedUpdateManyWithoutRetweetOfFeedItemNestedInput
    retweets?: RetweetUncheckedUpdateManyWithoutFeedItemNestedInput
  }

  export type FeedItemUncheckedUpdateManyWithoutRankingListInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumFeedTypeFieldUpdateOperationsInput | $Enums.FeedType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    retweetOfFeedItemId?: NullableStringFieldUpdateOperationsInput | string | null
    quotedFeedItemId?: NullableStringFieldUpdateOperationsInput | string | null
    quoteRetweetCount?: IntFieldUpdateOperationsInput | number
  }

  export type LikeUpdateWithoutRankingListInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: PostUpdateOneWithoutLikesNestedInput
    user?: UserUpdateOneRequiredWithoutLikesNestedInput
  }

  export type LikeUncheckedUpdateWithoutRankingListInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LikeUncheckedUpdateManyWithoutRankingListInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RankedItemUpdateWithoutRankingListInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemName?: StringFieldUpdateOperationsInput | string
    rank?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    itemDescription?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RankedItemUncheckedUpdateWithoutRankingListInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemName?: StringFieldUpdateOperationsInput | string
    rank?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    itemDescription?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RankedItemUncheckedUpdateManyWithoutRankingListInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemName?: StringFieldUpdateOperationsInput | string
    rank?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    itemDescription?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RankingListTagUpdateWithoutListInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: TagUpdateOneRequiredWithoutRankingListTagsNestedInput
  }

  export type RankingListTagUncheckedUpdateWithoutListInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type RankingListTagUncheckedUpdateManyWithoutListInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type FeedItemCreateManyPostInput = {
    id?: string
    type: $Enums.FeedType
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    rankingListId?: string | null
    retweetOfFeedItemId?: string | null
    quotedFeedItemId?: string | null
    quoteRetweetCount?: number
  }

  export type LikeCreateManyPostInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    rankingListId?: string | null
  }

  export type ReplyCreateManyPostInput = {
    id?: string
    content: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeedItemUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumFeedTypeFieldUpdateOperationsInput | $Enums.FeedType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quoteRetweetCount?: IntFieldUpdateOperationsInput | number
    rankingList?: RankingListUpdateOneWithoutFeedItemsNestedInput
    user?: UserUpdateOneRequiredWithoutFeedItemsNestedInput
    quotedFeedItem?: FeedItemUpdateOneWithoutQuotedByItemsNestedInput
    quotedByItems?: FeedItemUpdateManyWithoutQuotedFeedItemNestedInput
    retweetOfFeedItem?: FeedItemUpdateOneWithoutRetweetedByItemsNestedInput
    retweetedByItems?: FeedItemUpdateManyWithoutRetweetOfFeedItemNestedInput
    retweets?: RetweetUpdateManyWithoutFeedItemNestedInput
  }

  export type FeedItemUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumFeedTypeFieldUpdateOperationsInput | $Enums.FeedType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    rankingListId?: NullableStringFieldUpdateOperationsInput | string | null
    retweetOfFeedItemId?: NullableStringFieldUpdateOperationsInput | string | null
    quotedFeedItemId?: NullableStringFieldUpdateOperationsInput | string | null
    quoteRetweetCount?: IntFieldUpdateOperationsInput | number
    quotedByItems?: FeedItemUncheckedUpdateManyWithoutQuotedFeedItemNestedInput
    retweetedByItems?: FeedItemUncheckedUpdateManyWithoutRetweetOfFeedItemNestedInput
    retweets?: RetweetUncheckedUpdateManyWithoutFeedItemNestedInput
  }

  export type FeedItemUncheckedUpdateManyWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumFeedTypeFieldUpdateOperationsInput | $Enums.FeedType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    rankingListId?: NullableStringFieldUpdateOperationsInput | string | null
    retweetOfFeedItemId?: NullableStringFieldUpdateOperationsInput | string | null
    quotedFeedItemId?: NullableStringFieldUpdateOperationsInput | string | null
    quoteRetweetCount?: IntFieldUpdateOperationsInput | number
  }

  export type LikeUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rankingList?: RankingListUpdateOneWithoutLikesNestedInput
    user?: UserUpdateOneRequiredWithoutLikesNestedInput
  }

  export type LikeUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rankingListId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LikeUncheckedUpdateManyWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rankingListId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReplyUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRepliesNestedInput
  }

  export type ReplyUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReplyUncheckedUpdateManyWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedItemCreateManyQuotedFeedItemInput = {
    id?: string
    type: $Enums.FeedType
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    postId?: string | null
    rankingListId?: string | null
    retweetOfFeedItemId?: string | null
    quoteRetweetCount?: number
  }

  export type FeedItemCreateManyRetweetOfFeedItemInput = {
    id?: string
    type: $Enums.FeedType
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    postId?: string | null
    rankingListId?: string | null
    quotedFeedItemId?: string | null
    quoteRetweetCount?: number
  }

  export type RetweetCreateManyFeedItemInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type FeedItemUpdateWithoutQuotedFeedItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumFeedTypeFieldUpdateOperationsInput | $Enums.FeedType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quoteRetweetCount?: IntFieldUpdateOperationsInput | number
    post?: PostUpdateOneWithoutFeedItemsNestedInput
    rankingList?: RankingListUpdateOneWithoutFeedItemsNestedInput
    user?: UserUpdateOneRequiredWithoutFeedItemsNestedInput
    quotedByItems?: FeedItemUpdateManyWithoutQuotedFeedItemNestedInput
    retweetOfFeedItem?: FeedItemUpdateOneWithoutRetweetedByItemsNestedInput
    retweetedByItems?: FeedItemUpdateManyWithoutRetweetOfFeedItemNestedInput
    retweets?: RetweetUpdateManyWithoutFeedItemNestedInput
  }

  export type FeedItemUncheckedUpdateWithoutQuotedFeedItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumFeedTypeFieldUpdateOperationsInput | $Enums.FeedType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    rankingListId?: NullableStringFieldUpdateOperationsInput | string | null
    retweetOfFeedItemId?: NullableStringFieldUpdateOperationsInput | string | null
    quoteRetweetCount?: IntFieldUpdateOperationsInput | number
    quotedByItems?: FeedItemUncheckedUpdateManyWithoutQuotedFeedItemNestedInput
    retweetedByItems?: FeedItemUncheckedUpdateManyWithoutRetweetOfFeedItemNestedInput
    retweets?: RetweetUncheckedUpdateManyWithoutFeedItemNestedInput
  }

  export type FeedItemUncheckedUpdateManyWithoutQuotedFeedItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumFeedTypeFieldUpdateOperationsInput | $Enums.FeedType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    rankingListId?: NullableStringFieldUpdateOperationsInput | string | null
    retweetOfFeedItemId?: NullableStringFieldUpdateOperationsInput | string | null
    quoteRetweetCount?: IntFieldUpdateOperationsInput | number
  }

  export type FeedItemUpdateWithoutRetweetOfFeedItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumFeedTypeFieldUpdateOperationsInput | $Enums.FeedType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quoteRetweetCount?: IntFieldUpdateOperationsInput | number
    post?: PostUpdateOneWithoutFeedItemsNestedInput
    rankingList?: RankingListUpdateOneWithoutFeedItemsNestedInput
    user?: UserUpdateOneRequiredWithoutFeedItemsNestedInput
    quotedFeedItem?: FeedItemUpdateOneWithoutQuotedByItemsNestedInput
    quotedByItems?: FeedItemUpdateManyWithoutQuotedFeedItemNestedInput
    retweetedByItems?: FeedItemUpdateManyWithoutRetweetOfFeedItemNestedInput
    retweets?: RetweetUpdateManyWithoutFeedItemNestedInput
  }

  export type FeedItemUncheckedUpdateWithoutRetweetOfFeedItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumFeedTypeFieldUpdateOperationsInput | $Enums.FeedType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    rankingListId?: NullableStringFieldUpdateOperationsInput | string | null
    quotedFeedItemId?: NullableStringFieldUpdateOperationsInput | string | null
    quoteRetweetCount?: IntFieldUpdateOperationsInput | number
    quotedByItems?: FeedItemUncheckedUpdateManyWithoutQuotedFeedItemNestedInput
    retweetedByItems?: FeedItemUncheckedUpdateManyWithoutRetweetOfFeedItemNestedInput
    retweets?: RetweetUncheckedUpdateManyWithoutFeedItemNestedInput
  }

  export type FeedItemUncheckedUpdateManyWithoutRetweetOfFeedItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumFeedTypeFieldUpdateOperationsInput | $Enums.FeedType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    rankingListId?: NullableStringFieldUpdateOperationsInput | string | null
    quotedFeedItemId?: NullableStringFieldUpdateOperationsInput | string | null
    quoteRetweetCount?: IntFieldUpdateOperationsInput | number
  }

  export type RetweetUpdateWithoutFeedItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRetweetsNestedInput
  }

  export type RetweetUncheckedUpdateWithoutFeedItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RetweetUncheckedUpdateManyWithoutFeedItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}