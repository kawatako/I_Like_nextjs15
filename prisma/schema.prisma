generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ランキングの感情（好き/嫌い）を表す Enum
enum Sentiment {
  LIKE
  DISLIKE
}

// ランキングリストの公開状態 Enum
enum ListStatus {
  DRAFT     // 下書き
  PUBLISHED // 公開済み
}

model User {
  id         String   @id @default(cuid())
  clerkId    String   @unique
  username   String   @unique
  name       String?
  bio        String?
  image      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  posts      Post[]
  likes      Like[]
  replies    Reply[]
  followedBy Follow[] @relation("FollowedBy")
  following  Follow[] @relation("Following")
  rankingLists RankingList[] // User が作成したランキングリスト
}

// ランキングリストを表すモデル
model RankingList {
  id          String   @id @default(cuid())
  sentiment   Sentiment
  subject     String
  description String?
  // isPublic    Boolean  @default(true) // ★ 削除 ★
  status      ListStatus @default(DRAFT) // 公開状態 (デフォルトは下書き)
  listImageUrl String?  // ★ 追加: リストのイメージ画像URL (任意)

  // 作成者 (User) へのリレーション (Userの主キー 'id' を参照)
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // このリストに含まれるアイテム (RankedItem) へのリレーション
  items       RankedItem[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([subject])
  @@index([authorId])
  @@index([status])
  @@index([createdAt])
}

// ランキングリスト内の各アイテムを表すモデル
model RankedItem {
  id              String   @id @default(cuid())
  itemName        String
  rank            Int
  imageUrl        String?  // ★アイテム画像URL (任意) - これは残す
  // linkUrl         String?  // ← これは削除済み
  itemDescription String?

  listId        String
  rankingList   RankingList @relation(fields: [listId], references: [id], onDelete: Cascade)

  createdAt     DateTime    @default(now())

  @@index([itemName])
  @@index([listId, rank])
}

// --- 既存のモデル (Post, Like, Reply, Follow) ---
// ... (変更なし、ただし onDelete の見直しは推奨) ...
model Post {
  id        String   @id @default(cuid())
  content   String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  likes     Like[]
  replies   Reply[]

  @@index([authorId])
}

model Like {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@index([postId])
}

model Reply {
  id        String   @id @default(cuid())
  content   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([userId])
}

model Follow {
  follower    User     @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User     @relation("FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
  createdAt   DateTime @default(now())

  @@id([followerId, followingId])
  @@index([followingId])
}