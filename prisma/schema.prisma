generator client {
  provider = "prisma-client-js"
  //output   = "../node_modules/.prisma/client" // 将来のために output を指定推奨
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ランキングの感情（好き/嫌い）を表す Enum
enum Sentiment {
  LIKE
  DISLIKE
}

// ランキングリストの公開状態 Enum
enum ListStatus {
  DRAFT // 下書き
  PUBLISHED // 公開済み
}

// フォローリクエストの状態を示す
enum FollowRequestStatus {
  PENDING // 申請中
  ACCEPTED
  REJECTED
}

// FeedItem の種類を表す Enum
enum FeedType {
  POST // 通常の投稿
  RANKING_UPDATE // ランキングの公開/更新
  RETWEET // リツイート
  QUOTE_RETWEET // 引用リツイート
}

model User {
  id                     String          @id @default(cuid())
  clerkId                String          @unique
  username               String          @unique
  name                   String?
  bio                    String?
  image                  String?
  coverImageUrl          String?
  socialLinks            Json?
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  isPrivate              Boolean         @default(false) // デフォルトは公開 (false)
  posts                  Post[]
  likes                  Like[]
  replies                Reply[]
  followedBy             Follow[]        @relation("FollowedBy")
  following              Follow[]        @relation("Following")
  rankingLists           RankingList[] // User が作成したランキングリスト
  sentFollowRequests     FollowRequest[] @relation("SentRequests")
  receivedFollowRequests FollowRequest[] @relation("ReceivedRequests")
  feedItems               FeedItem[]
  retweets               Retweet[]   
}

// ランキングリストを表すモデル
model RankingList {
  id           String     @id @default(cuid())
  sentiment    Sentiment
  subject      String
  description  String?
  status       ListStatus @default(DRAFT) // 公開状態 (デフォルトは下書き)
  listImageUrl String?
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  items RankedItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  displayOrder Int?

  feedItems      FeedItem[]

  likes          Like[]     // このランキングに付けられた「いいね」
  likeCount      Int        @default(0) // いいねカウンター

  @@index([subject])
  @@index([authorId])
  @@index([status])
  @@index([createdAt])
  @@index([authorId, displayOrder])
}

// ランキングリスト内の各アイテムを表すモデル
model RankedItem {
  id              String  @id @default(cuid())
  itemName        String
  rank            Int
  imageUrl        String?
  itemDescription String?

  listId      String
  rankingList RankingList @relation(fields: [listId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([itemName])
  @@index([listId, rank])
}

model Post {
  id        String     @id @default(cuid())
  content   String
  imageUrl String?
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  replies   Reply[]
  feedItems  FeedItem[]
  likes      Like[]     // この投稿に付けられた「いいね」
  likeCount  Int        @default(0) // いいねカウンター

  @@index([authorId])
}

model Retweet {
  id         String   @id @default(cuid())
  userId     String   // リツイートしたユーザーのID (User.id)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  feedItemId String   // リツイートされた FeedItem の ID
  feedItem   FeedItem @relation(fields: [feedItemId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  // 同じユーザーは同じ FeedItem を1回しかリツイートできない
  @@unique([userId, feedItemId])
  @@index([feedItemId])
  @@index([userId])
}

// タイムラインの各項目を表すモデル
model FeedItem {
  id        String   @id @default(cuid()) // 主キー
  type      FeedType // この FeedItem の種類 (投稿、ランキング更新など)
  createdAt DateTime @default(now()) // 作成日時 (タイムラインの並び順の基準)
  updatedAt DateTime @updatedAt // 更新日時 (いいね数やRT数などの更新用に)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // 関連するデータへの参照 (タイプに応じていずれか、または複数が設定される)
  postId              String?
  post                Post?       @relation(fields: [postId], references: [id], onDelete: SetNull)
  rankingListId       String?
  rankingList         RankingList? @relation(fields: [rankingListId], references: [id], onDelete: SetNull)

  retweetOfFeedItemId String?     // リツイート元の FeedItem ID (Optional)
  retweetOfFeedItem   FeedItem?     @relation("RetweetOrigin", fields: [retweetOfFeedItemId], references: [id], onDelete: SetNull, map: "retweet_of_feed_item_id") // リツイート元への参照
  retweetedByItems    FeedItem[]    @relation("RetweetOrigin") // この FeedItem をリツイートしている FeedItem (type: RETWEET) のリスト

  retweets            Retweet[]

  // --- 引用リツイート関連 (修正) ---
  quotedFeedItemId    String?     // 引用元の FeedItem ID (Optional)
  quotedFeedItem      FeedItem?     @relation("QuoteOrigin", fields: [quotedFeedItemId], references: [id], onDelete: SetNull, map: "quoted_feed_item_id") // 引用元への参照
  quotedByItems       FeedItem[]    @relation("QuoteOrigin") // この FeedItem を引用している FeedItem (type: QUOTE_RETWEET) のリスト

  quoteRetweetCount   Int           @default(0) // 引用された数

  // --- インデックス (変更なし) ---
  @@index([userId, createdAt(sort: Desc)])
  @@index([createdAt(sort: Desc)])
  @@index([postId])
  @@index([rankingListId])
  @@index([retweetOfFeedItemId])
  @@index([quotedFeedItemId])
}

model Like {
  id            String        @id @default(cuid())
  userId        String        // いいねしたユーザーの ID (User.id)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime      @default(now())

  // いいね対象への Optional なリレーション (どちらか一つだけセットされる想定)
  postId        String?
  post          Post?         @relation(fields: [postId], references: [id], onDelete: Cascade)
  rankingListId String?
  rankingList   RankingList?  @relation(fields: [rankingListId], references: [id], onDelete: Cascade)

  // インデックスは個別に設定
  @@index([postId])
  @@index([rankingListId])
  @@index([userId])
}

model Reply {
  id        String   @id @default(cuid())
  content   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([userId])
}

model FollowRequest {
  id          String              @id @default(cuid())
  status      FollowRequestStatus @default(PENDING)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt // リクエスト日時の更新用に updatedAt を追加
  // リクエストを送った人 (申請者)
  requesterId String
  requester   User                @relation("SentRequests", fields: [requesterId], references: [id], onDelete: Cascade)
  // リクエストを受け取った人 (申請先)
  requestedId String
  requested   User                @relation("ReceivedRequests", fields: [requestedId], references: [id], onDelete: Cascade)

  // 同じユーザー間のリクエストは1つだけ存在できるようにする
  @@unique([requesterId, requestedId])
  @@index([requestedId]) // 自分宛のリクエストを効率よく検索するため
}

model Follow {
  id          String   @id @default(cuid())
  follower    User     @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User     @relation("FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
  @@index([followingId])
  @@index([followerId])
}
