generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

generator edgeClient {
  provider        = "prisma-client-js"
  output          = "../supabase/functions/_shared/generated/client/deno"
  previewFeatures = ["deno"]
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_DATABASE_URL")
}

model Tag {
  id              String           @id @default(cuid())
  name            String           @unique
  createdAt       DateTime         @default(now())
  trendingStats   TrendingTag[]    @relation("TagToTrendingTag")
  rankingListTags RankingListTag[]

  @@index([name])
}

model User {
  id                     String               @id @default(cuid())
  clerkId                String               @unique
  username               String               @unique
  name                   String?
  bio                    String?
  image                  String?
  coverImageUrl          String?
  socialLinks            Json?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  isPrivate              Boolean              @default(false)
  birthday               DateTime?
  location               String?
  feedItems              FeedItem[]
  following              Follow[]             @relation("Following")
  followedBy             Follow[]             @relation("FollowedBy")
  receivedFollowRequests FollowRequest[]      @relation("ReceivedRequests")
  sentFollowRequests     FollowRequest[]      @relation("SentRequests")
  likes                  Like[]
  posts                  Post[]
  rankingLists           RankingList[]
  replies                Reply[]
  retweets               Retweet[]
  rankingListComments    RankingListComment[] @relation("CommentOnRanking")
}

model RankingList {
  id              String           @id @default(cuid())
  subject         String
  description     String?
  status          ListStatus       @default(DRAFT)
  listImageUrl    String?
  authorId        String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  displayOrder    Int?
  likeCount       Int              @default(0)
  feedItems       FeedItem[]
  likes           Like[]
  items           RankedItem[]
  author          User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  rankingListTags RankingListTag[]

  @@index([subject])
  @@index([authorId])
  @@index([status])
  @@index([createdAt])
  @@index([authorId, displayOrder])
  @@index([status, subject, createdAt], map: "idx_rankinglist_status_subject_createdat")
}

model RankedItem {
  id              String      @id @default(cuid())
  itemName        String
  rank            Int
  imageUrl        String?
  itemDescription String?
  listId          String
  createdAt       DateTime    @default(now())
  rankingList     RankingList @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@index([itemName])
  @@index([listId, rank])
}

model RankingListTag {
  id     String      @id @default(cuid())
  list   RankingList @relation(fields: [listId], references: [id])
  listId String
  tag    Tag         @relation(fields: [tagId], references: [id])
  tagId  String

  @@unique([listId, tagId])
  @@map("RankingListTag")
}

model RankingListComment {
  id        String   @id @default(cuid())
  listId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  user      User     @relation("CommentOnRanking", fields: [userId], references: [id])

  @@index([listId])
  @@index([userId])
}

model TrendingSubject {
  id              String      @id @default(cuid())
  subject         String
  count           Int
  period          TrendPeriod
  calculationDate DateTime

  @@unique([subject, period, calculationDate])
  @@index([period, calculationDate, count(sort: Desc)])
  @@index([period, calculationDate], map: "idx_trendingsubject_period_calcdate")
}

model TrendingTag {
  id              String      @id @default(cuid())
  tagId           String
  tagName         String
  count           Int
  period          TrendPeriod
  calculationDate DateTime
  tag             Tag         @relation("TagToTrendingTag", fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([tagId, period, calculationDate])
  @@index([period, calculationDate, count(sort: Desc)])
  @@index([period, calculationDate], map: "idx_trendingtag_period_calcdate")
}

model TrendingItem {
  id              String      @id @default(cuid())
  itemName        String
  rankScore       Float
  period          TrendPeriod
  calculationDate DateTime

  @@index([itemName])
  @@index([period, calculationDate, rankScore(sort: Desc)])
  @@index([period, calculationDate], map: "idx_trendingitem_period_calcdate")
}

model AverageItemRank {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subject         String
  itemName        String
  avgRank         Float
  calculationDate DateTime
  count           Int

  @@index([subject])
  @@index([calculationDate])
  @@index([calculationDate], map: "AverageItemRank_calculationDate_idx1")
  @@index([subject], map: "AverageItemRank_subject_idx1")
  @@index([calculationDate], map: "idx_avgitemrank_calcdate")
  @@index([subject, calculationDate], map: "idx_avgitemrank_subject_calcdate")
}

//AverageItemRankに対するコメント
model AverageItemComment {
  id        String   @id @default(cuid())
  subject   String // テーマ名（AverageItemRank.subject と対応）
  userId    String // コメント投稿者のユーザID
  content   String // コメント本文
  createdAt DateTime @default(now())

  @@index([userId])
}

model Post {
  id        String     @id @default(cuid())
  content   String
  authorId  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  likeCount Int        @default(0)
  imageUrl  String?
  feedItems FeedItem[]
  likes     Like[]
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  replies   Reply[]

  @@index([authorId])
}

model Retweet {
  id         String   @id @default(cuid())
  userId     String
  feedItemId String
  createdAt  DateTime @default(now())
  feedItem   FeedItem @relation(fields: [feedItemId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, feedItemId])
  @@index([feedItemId])
  @@index([userId])
}

model FeedItem {
  id                  String       @id @default(cuid())
  type                FeedType
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  userId              String
  postId              String?
  rankingListId       String?
  retweetOfFeedItemId String?
  quotedFeedItemId    String?
  quoteRetweetCount   Int          @default(0)
  post                Post?        @relation(fields: [postId], references: [id])
  rankingList         RankingList? @relation(fields: [rankingListId], references: [id])
  user                User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  quotedFeedItem      FeedItem?    @relation("QuoteOrigin", fields: [quotedFeedItemId], references: [id], map: "quoted_feed_item_id")
  quotedByItems       FeedItem[]   @relation("QuoteOrigin")
  retweetOfFeedItem   FeedItem?    @relation("RetweetOrigin", fields: [retweetOfFeedItemId], references: [id], map: "retweet_of_feed_item_id")
  retweetedByItems    FeedItem[]   @relation("RetweetOrigin")
  retweets            Retweet[]

  @@unique([rankingListId, type])
  @@index([userId, createdAt(sort: Desc)])
  @@index([createdAt(sort: Desc)])
  @@index([postId])
  @@index([rankingListId])
  @@index([retweetOfFeedItemId])
  @@index([quotedFeedItemId])
}

model Like {
  id            String       @id @default(cuid())
  userId        String
  createdAt     DateTime     @default(now())
  postId        String?
  rankingListId String?
  post          Post?        @relation(fields: [postId], references: [id], onDelete: Cascade)
  rankingList   RankingList? @relation(fields: [rankingListId], references: [id], onDelete: Cascade)
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([rankingListId])
  @@index([userId])
}

model Reply {
  id        String   @id @default(cuid())
  content   String
  userId    String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([userId])
}

model FollowRequest {
  id          String              @id @default(cuid())
  status      FollowRequestStatus @default(PENDING)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  requesterId String
  requestedId String
  requested   User                @relation("ReceivedRequests", fields: [requestedId], references: [id], onDelete: Cascade)
  requester   User                @relation("SentRequests", fields: [requesterId], references: [id], onDelete: Cascade)

  @@unique([requesterId, requestedId])
  @@index([requestedId])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followingId])
  @@index([followerId])
}

enum ListStatus {
  DRAFT
  PUBLISHED
}

enum FollowRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum FeedType {
  POST
  RANKING_UPDATE
  RETWEET
  QUOTE_RETWEET
}

enum TrendPeriod {
  WEEKLY
  MONTHLY
}
